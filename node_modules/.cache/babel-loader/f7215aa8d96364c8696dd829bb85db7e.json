{"ast":null,"code":"/**\r\n * Map object module\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Container } from \"../../core/Container\";\nimport { registry } from \"../../core/Registry\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as d3geo from \"d3-geo\";\nimport * as $type from \"../../core/utils/Type\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * A base class for all map objects: lines, images, etc.\r\n *\r\n * @see {@link IMapObjectEvents} for a list of available events\r\n * @see {@link IMapObjectAdapters} for a list of available Adapters\r\n */\n\nvar MapObject =\n/** @class */\nfunction (_super) {\n  __extends(MapObject, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function MapObject() {\n    var _this = // Init\n    _super.call(this) || this;\n\n    _this.className = \"MapObject\"; // Set defaults\n\n    _this.isMeasured = false;\n    _this.layout = \"none\";\n    _this.clickable = true; // Apply theme\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * (Re)validates this object, forcing it to redraw.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  MapObject.prototype.validate = function () {\n    if (this.series && this.series.itemReaderText) {\n      this.readerTitle = this.series.itemReaderText;\n    }\n\n    _super.prototype.validate.call(this);\n  };\n  /**\r\n   * Updates the item's bounding coordinates: coordinates of the East, West,\r\n   * North, and South-most points.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  MapObject.prototype.updateExtremes = function () {\n    var feature = this.getFeature();\n\n    if (feature) {\n      var geometry = feature.geometry;\n\n      if (geometry) {\n        var bounds = d3geo.geoBounds(geometry);\n        var west = bounds[0][0];\n        var south = bounds[0][1];\n        var north = bounds[1][1];\n        var east = bounds[1][0];\n        var changed = false;\n\n        if (north != this.north) {\n          this._north = $math.round(north, 8);\n          changed = true;\n        }\n\n        if (south != this.south) {\n          this._south = $math.round(south);\n          changed = true;\n        }\n\n        if (east != this.east) {\n          this._east = $math.round(east);\n          changed = true;\n        }\n\n        if (west != this.west) {\n          this._west = $math.round(west);\n          changed = true;\n        }\n\n        if (changed) {\n          this.dispatch(\"geoBoundsChanged\");\n\n          if (this.series) {\n            this.series.invalidateDataItems();\n          }\n        }\n      }\n    }\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  MapObject.prototype.getFeature = function () {\n    return {};\n  };\n\n  Object.defineProperty(MapObject.prototype, \"east\", {\n    /**\r\n     * Longitude of the East-most point of the element.\r\n     */\n    get: function () {\n      if ($type.isNumber(this._east)) {\n        return this._east;\n      } else if (this.dataItem) {\n        return this.dataItem.east;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapObject.prototype, \"west\", {\n    /**\r\n     * Longitude of the West-most point of the element.\r\n     */\n    get: function () {\n      if ($type.isNumber(this._west)) {\n        return this._west;\n      } else if (this.dataItem) {\n        return this.dataItem.west;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapObject.prototype, \"south\", {\n    /**\r\n     * Latitude of the South-most point of the element.\r\n     */\n    get: function () {\n      if ($type.isNumber(this._south)) {\n        return this._south;\n      } else if (this.dataItem) {\n        return this.dataItem.south;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapObject.prototype, \"north\", {\n    /**\r\n     * Latitude of the North-most point of the element.\r\n     */\n    get: function () {\n      if ($type.isNumber(this._north)) {\n        return this._north;\n      } else if (this.dataItem) {\n        return this.dataItem.north;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Shows the element's [[Tooltip]].\r\n   *\r\n   * A tooltip will be populated using text templates in either `tooltipHTML` or\r\n   * `tooltipText` as well as data in `tooltipDataItem`.\r\n   *\r\n   * @see {@link Tooltip}\r\n   * @param optional point (sprite-related) to which tooltip must point.\r\n   * @return returns true if the tooltip was shown and false if it wasn't (no text was found)\r\n   */\n\n  MapObject.prototype.showTooltip = function (point) {\n    var res = _super.prototype.showTooltip.call(this, point);\n\n    if (res && this.showTooltipOn == \"always\" && !this.series.chart.events.has(\"mappositionchanged\", this.handleTooltipMove, this)) {\n      this.addDisposer(this.series.chart.events.on(\"mappositionchanged\", this.handleTooltipMove, this));\n    }\n\n    return res;\n  };\n\n  MapObject.prototype.handleTooltipMove = function (ev) {\n    if (!this.tooltip.isHidden) {\n      this.showTooltip();\n    }\n  };\n  /**\r\n   * Sets a [[DataItem]].\r\n   * @param dataItem DataItem\r\n   */\n\n\n  MapObject.prototype.setDataItem = function (dataItem) {\n    _super.prototype.setDataItem.call(this, dataItem);\n\n    this.applyAccessibility();\n  };\n\n  return MapObject;\n}(Container);\n\nexport { MapObject };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"MapObject\"] = MapObject;","map":{"version":3,"sources":["../../../../../src/.internal/charts/map/MapObject.ts"],"names":[],"mappings":"AAAA;;;;AAIA;;;;;;;AAMA,SAAS,SAAT,QAAsF,sBAAtF;AAEA,SAAS,QAAT,QAAyB,qBAAzB;AAGA,OAAO,KAAK,KAAZ,MAAuB,uBAAvB;AACA,OAAO,KAAK,KAAZ,MAAuB,QAAvB;AACA,OAAO,KAAK,KAAZ,MAAuB,uBAAvB;AA2CA;;;;;;;AAOA;;;;;;;AAMA,IAAA,SAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA+B,EAAA,SAAA,CAAA,SAAA,EAAA,MAAA,CAAA;AA6C9B;;;;;AAGA,WAAA,SAAA,GAAA;AAAA,QAAA,KAAA,GAEC;AACA,IAAA,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IAHR;;AAIC,IAAA,KAAI,CAAC,SAAL,GAAiB,WAAjB,CAJD,CAMC;;AACA,IAAA,KAAI,CAAC,UAAL,GAAkB,KAAlB;AACA,IAAA,KAAI,CAAC,MAAL,GAAc,MAAd;AACA,IAAA,KAAI,CAAC,SAAL,GAAiB,IAAjB,CATD,CAWC;;AACA,IAAA,KAAI,CAAC,UAAL;;;AAEA;AAED;;;;;;;AAKO,EAAA,SAAA,CAAA,SAAA,CAAA,QAAA,GAAP,YAAA;AACC,QAAI,KAAK,MAAL,IAAe,KAAK,MAAL,CAAY,cAA/B,EAA+C;AAC9C,WAAK,WAAL,GAAmB,KAAK,MAAL,CAAY,cAA/B;AACA;;AACD,IAAA,MAAA,CAAA,SAAA,CAAM,QAAN,CAAc,IAAd,CAAc,IAAd;AACA,GALM;AAQP;;;;;;;;AAMO,EAAA,SAAA,CAAA,SAAA,CAAA,cAAA,GAAP,YAAA;AACC,QAAI,OAAO,GAAG,KAAK,UAAL,EAAd;;AACA,QAAI,OAAJ,EAAa;AACZ,UAAI,QAAQ,GAAG,OAAO,CAAC,QAAvB;;AAEA,UAAI,QAAJ,EAAc;AACb,YAAI,MAAM,GAAG,KAAK,CAAC,SAAN,CAAgB,QAAhB,CAAb;AAEA,YAAI,IAAI,GAAG,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,CAAX;AACA,YAAI,KAAK,GAAG,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,CAAZ;AAEA,YAAI,KAAK,GAAG,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,CAAZ;AACA,YAAI,IAAI,GAAG,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,CAAX;AAEA,YAAI,OAAO,GAAG,KAAd;;AACA,YAAI,KAAK,IAAI,KAAK,KAAlB,EAAyB;AACxB,eAAK,MAAL,GAAc,KAAK,CAAC,KAAN,CAAY,KAAZ,EAAmB,CAAnB,CAAd;AACA,UAAA,OAAO,GAAG,IAAV;AACA;;AAED,YAAI,KAAK,IAAI,KAAK,KAAlB,EAAyB;AACxB,eAAK,MAAL,GAAc,KAAK,CAAC,KAAN,CAAY,KAAZ,CAAd;AACA,UAAA,OAAO,GAAG,IAAV;AACA;;AAED,YAAI,IAAI,IAAI,KAAK,IAAjB,EAAuB;AACtB,eAAK,KAAL,GAAa,KAAK,CAAC,KAAN,CAAY,IAAZ,CAAb;AACA,UAAA,OAAO,GAAG,IAAV;AACA;;AAED,YAAI,IAAI,IAAI,KAAK,IAAjB,EAAuB;AACtB,eAAK,KAAL,GAAa,KAAK,CAAC,KAAN,CAAY,IAAZ,CAAb;AACA,UAAA,OAAO,GAAG,IAAV;AACA;;AAED,YAAI,OAAJ,EAAa;AACZ,eAAK,QAAL,CAAc,kBAAd;;AACA,cAAG,KAAK,MAAR,EAAe;AACd,iBAAK,MAAL,CAAY,mBAAZ;AACA;AACD;AACD;AACD;AACD,GA3CM;AA6CP;;;;;AAGO,EAAA,SAAA,CAAA,SAAA,CAAA,UAAA,GAAP,YAAA;AACC,WAAO,EAAP;AACA,GAFM;;AAOP,EAAA,MAAA,CAAA,cAAA,CAAW,SAAA,CAAA,SAAX,EAAW,MAAX,EAAe;AAHf;;;SAGA,YAAA;AACC,UAAI,KAAK,CAAC,QAAN,CAAe,KAAK,KAApB,CAAJ,EAAgC;AAC/B,eAAO,KAAK,KAAZ;AACA,OAFD,MAGK,IAAI,KAAK,QAAT,EAAmB;AACvB,eAAO,KAAK,QAAL,CAAc,IAArB;AACA;AACD,KAPc;oBAAA;;AAAA,GAAf;AAYA,EAAA,MAAA,CAAA,cAAA,CAAW,SAAA,CAAA,SAAX,EAAW,MAAX,EAAe;AAHf;;;SAGA,YAAA;AACC,UAAI,KAAK,CAAC,QAAN,CAAe,KAAK,KAApB,CAAJ,EAAgC;AAC/B,eAAO,KAAK,KAAZ;AACA,OAFD,MAGK,IAAI,KAAK,QAAT,EAAmB;AACvB,eAAO,KAAK,QAAL,CAAc,IAArB;AACA;AACD,KAPc;oBAAA;;AAAA,GAAf;AAYA,EAAA,MAAA,CAAA,cAAA,CAAW,SAAA,CAAA,SAAX,EAAW,OAAX,EAAgB;AAHhB;;;SAGA,YAAA;AACC,UAAI,KAAK,CAAC,QAAN,CAAe,KAAK,MAApB,CAAJ,EAAiC;AAChC,eAAO,KAAK,MAAZ;AACA,OAFD,MAGK,IAAI,KAAK,QAAT,EAAmB;AACvB,eAAO,KAAK,QAAL,CAAc,KAArB;AACA;AACD,KAPe;oBAAA;;AAAA,GAAhB;AAYA,EAAA,MAAA,CAAA,cAAA,CAAW,SAAA,CAAA,SAAX,EAAW,OAAX,EAAgB;AAHhB;;;SAGA,YAAA;AACC,UAAI,KAAK,CAAC,QAAN,CAAe,KAAK,MAApB,CAAJ,EAAiC;AAChC,eAAO,KAAK,MAAZ;AACA,OAFD,MAGK,IAAI,KAAK,QAAT,EAAmB;AACvB,eAAO,KAAK,QAAL,CAAc,KAArB;AACA;AACD,KAPe;oBAAA;;AAAA,GAAhB;AASA;;;;;;;;;;;AAUO,EAAA,SAAA,CAAA,SAAA,CAAA,WAAA,GAAP,UAAmB,KAAnB,EAAiC;AAChC,QAAM,GAAG,GAAG,MAAA,CAAA,SAAA,CAAM,WAAN,CAAiB,IAAjB,CAAiB,IAAjB,EAAkB,KAAlB,CAAZ;;AACA,QAAI,GAAG,IAAI,KAAK,aAAL,IAAsB,QAA7B,IAAyC,CAAC,KAAK,MAAL,CAAY,KAAZ,CAAkB,MAAlB,CAAyB,GAAzB,CAA6B,oBAA7B,EAAmD,KAAK,iBAAxD,EAA2E,IAA3E,CAA9C,EAAgI;AAC/H,WAAK,WAAL,CAAiB,KAAK,MAAL,CAAY,KAAZ,CAAkB,MAAlB,CAAyB,EAAzB,CAA4B,oBAA5B,EAAkD,KAAK,iBAAvD,EAA0E,IAA1E,CAAjB;AACA;;AACD,WAAO,GAAP;AACA,GANM;;AAQG,EAAA,SAAA,CAAA,SAAA,CAAA,iBAAA,GAAV,UAA4B,EAA5B,EAAmC;AAClC,QAAG,CAAC,KAAK,OAAL,CAAa,QAAjB,EAA0B;AACzB,WAAK,WAAL;AACA;AACD,GAJS;AAMV;;;;;;AAIU,EAAA,SAAA,CAAA,SAAA,CAAA,WAAA,GAAV,UAAsB,QAAtB,EAAiD;AAChD,IAAA,MAAA,CAAA,SAAA,CAAM,WAAN,CAAiB,IAAjB,CAAiB,IAAjB,EAAkB,QAAlB;;AACA,SAAK,kBAAL;AACA,GAHS;;AAIX,SAAA,SAAA;AAAC,CAvND,CAA+B,SAA/B,CAAA;;;AAyNA;;;;;;;AAMA,QAAQ,CAAC,iBAAT,CAA2B,WAA3B,IAA0C,SAA1C","sourcesContent":["/**\r\n * Map object module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { MapSeries, MapSeriesDataItem } from \"./MapSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as d3geo from \"d3-geo\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines propeties for [[MapObject]].\r\n */\r\nexport interface IMapObjectProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * A custom zoom level to use when `zoomToMapObject()` is called on this\r\n\t * map object.\r\n\t */\r\n\tzoomLevel?: number;\r\n\r\n\t/**\r\n\t * A custom point to use when `zoomToMapObject()` is called on this map\r\n\t * object.\r\n\t */\r\n\tzoomGeoPoint?: IGeoPoint;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[MapObject]].\r\n */\r\nexport interface IMapObjectEvents extends IContainerEvents {\r\n\tgeoBoundsChanged: {}\r\n}\r\n\r\n/**\r\n * Defines adapters for [[MapObject]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapObjectAdapters extends IContainerAdapters, IMapObjectProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A base class for all map objects: lines, images, etc.\r\n *\r\n * @see {@link IMapObjectEvents} for a list of available events\r\n * @see {@link IMapObjectAdapters} for a list of available Adapters\r\n */\r\nexport class MapObject extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IMapObjectProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IMapObjectAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IMapObjectEvents;\r\n\r\n\t/**\r\n\t * A map series this object belongs to.\r\n\t */\r\n\tpublic series: MapSeries;\r\n\r\n\tpublic _dataItem: MapSeriesDataItem;\r\n\r\n\r\n\t/**\r\n\t * Longitude of the East-most point of the element.\r\n\t */\r\n\tprotected _east: number;\r\n\r\n\t/**\r\n\t * Longitude of the West-most point of the element.\r\n\t */\r\n\tprotected _west: number;\r\n\r\n\t/**\r\n\t * Latitude of the South-most point of the element.\r\n\t */\r\n\tprotected _south: number;\r\n\r\n\t/**\r\n\t * Latitude of the North-most point of the element.\r\n\t */\r\n\tprotected _north: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapObject\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.layout = \"none\";\r\n\t\tthis.clickable = true;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates this object, forcing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tif (this.series && this.series.itemReaderText) {\r\n\t\t\tthis.readerTitle = this.series.itemReaderText;\r\n\t\t}\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Updates the item's bounding coordinates: coordinates of the East, West,\r\n\t * North, and South-most points.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateExtremes(): void {\r\n\t\tlet feature = this.getFeature();\r\n\t\tif (feature) {\r\n\t\t\tlet geometry = feature.geometry;\r\n\r\n\t\t\tif (geometry) {\t\t\t\t\r\n\t\t\t\tlet bounds = d3geo.geoBounds(geometry);\r\n\r\n\t\t\t\tlet west = bounds[0][0];\r\n\t\t\t\tlet south = bounds[0][1];\r\n\r\n\t\t\t\tlet north = bounds[1][1];\r\n\t\t\t\tlet east = bounds[1][0];\r\n\r\n\t\t\t\tlet changed = false;\r\n\t\t\t\tif (north != this.north) {\r\n\t\t\t\t\tthis._north = $math.round(north, 8);\r\n\t\t\t\t\tchanged = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (south != this.south) {\r\n\t\t\t\t\tthis._south = $math.round(south);\r\n\t\t\t\t\tchanged = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (east != this.east) {\r\n\t\t\t\t\tthis._east = $math.round(east);\r\n\t\t\t\t\tchanged = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (west != this.west) {\r\n\t\t\t\t\tthis._west = $math.round(west);\r\n\t\t\t\t\tchanged = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (changed) {\r\n\t\t\t\t\tthis.dispatch(\"geoBoundsChanged\");\r\n\t\t\t\t\tif(this.series){\r\n\t\t\t\t\t\tthis.series.invalidateDataItems();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic getFeature(): any {\r\n\t\treturn {};\r\n\t}\r\n\r\n\t/**\r\n\t * Longitude of the East-most point of the element.\r\n\t */\r\n\tpublic get east(): number {\r\n\t\tif ($type.isNumber(this._east)) {\r\n\t\t\treturn this._east;\r\n\t\t}\r\n\t\telse if (this.dataItem) {\r\n\t\t\treturn this.dataItem.east;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Longitude of the West-most point of the element.\r\n\t */\r\n\tpublic get west(): number {\r\n\t\tif ($type.isNumber(this._west)) {\r\n\t\t\treturn this._west;\r\n\t\t}\r\n\t\telse if (this.dataItem) {\r\n\t\t\treturn this.dataItem.west;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Latitude of the South-most point of the element.\r\n\t */\r\n\tpublic get south(): number {\r\n\t\tif ($type.isNumber(this._south)) {\r\n\t\t\treturn this._south;\r\n\t\t}\r\n\t\telse if (this.dataItem) {\r\n\t\t\treturn this.dataItem.south;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Latitude of the North-most point of the element.\r\n\t */\r\n\tpublic get north(): number {\r\n\t\tif ($type.isNumber(this._north)) {\r\n\t\t\treturn this._north;\r\n\t\t}\r\n\t\telse if (this.dataItem) {\r\n\t\t\treturn this.dataItem.north;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Shows the element's [[Tooltip]].\r\n\t *\r\n\t * A tooltip will be populated using text templates in either `tooltipHTML` or\r\n\t * `tooltipText` as well as data in `tooltipDataItem`.\r\n\t *\r\n\t * @see {@link Tooltip}\r\n\t * @param optional point (sprite-related) to which tooltip must point.\r\n\t * @return returns true if the tooltip was shown and false if it wasn't (no text was found)\r\n\t */\r\n\tpublic showTooltip(point?: IPoint): boolean {\r\n\t\tconst res = super.showTooltip(point);\r\n\t\tif (res && this.showTooltipOn == \"always\" && !this.series.chart.events.has(\"mappositionchanged\", this.handleTooltipMove, this)) {\r\n\t\t\tthis.addDisposer(this.series.chart.events.on(\"mappositionchanged\", this.handleTooltipMove, this));\r\n\t\t}\r\n\t\treturn res;\r\n\t}\r\n\r\n\tprotected handleTooltipMove(ev: any): void {\r\n\t\tif(!this.tooltip.isHidden){\r\n\t\t\tthis.showTooltip();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets a [[DataItem]].\r\n\t * @param dataItem DataItem\r\n\t */\r\n\tprotected setDataItem(dataItem: MapSeriesDataItem) {\r\n\t\tsuper.setDataItem(dataItem);\r\n\t\tthis.applyAccessibility();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapObject\"] = MapObject;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}