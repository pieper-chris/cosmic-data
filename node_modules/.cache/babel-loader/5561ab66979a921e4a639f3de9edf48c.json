{"ast":null,"code":"/**\r\n * Map series module\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Series, SeriesDataItem } from \"../series/Series\";\nimport { registry } from \"../../core/Registry\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as d3geo from \"d3-geo\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines a [[DataItem]] for [[MapSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\n\nvar MapSeriesDataItem =\n/** @class */\nfunction (_super) {\n  __extends(MapSeriesDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function MapSeriesDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"MapSeriesDataItem\";\n    _this.values.value = {};\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  Object.defineProperty(MapSeriesDataItem.prototype, \"value\", {\n    /**\r\n     * @return Value\r\n     */\n    get: function () {\n      return this.values.value.value;\n    },\n\n    /**\r\n     * Numeric value of the data item.\r\n     *\r\n     * Value may be used in heat-map calculations.\r\n     *\r\n     * @param value  Value\r\n     */\n    set: function (value) {\n      this.setValue(\"value\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapSeriesDataItem.prototype, \"zoomLevel\", {\n    /**\r\n     * @return Zoom level\r\n     */\n    get: function () {\n      return this.properties[\"zoomLevel\"];\n    },\n\n    /**\r\n     * When `zoomToMapObject()` is called the map will either calculate suitable\r\n     * zoom level itself or use object's `zoomLevel` if set.\r\n     *\r\n     * @param value  Zoom level\r\n     */\n    set: function (value) {\n      this.setProperty(\"zoomLevel\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapSeriesDataItem.prototype, \"zoomGeoPoint\", {\n    /**\r\n     * @return Zoom geo point\r\n     */\n    get: function () {\n      return this.properties[\"zoomGeoPoint\"];\n    },\n\n    /**\r\n     * When `zoomToMapObject()` is called the map will either calculate suitable\r\n     * center position itself or use object's `zoomGeoPoint` if set.\r\n     *\r\n     * @param value  Zoom geo point\r\n     */\n    set: function (value) {\n      this.setProperty(\"zoomGeoPoint\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapSeriesDataItem.prototype, \"east\", {\n    /**\r\n     * Longitude of the East-most point of the element.\r\n     */\n    get: function () {\n      return this._east;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapSeriesDataItem.prototype, \"west\", {\n    /**\r\n     * Longitude of the West-most point of the element.\r\n     */\n    get: function () {\n      return this._west;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapSeriesDataItem.prototype, \"south\", {\n    /**\r\n     * Latitude of the South-most point of the element.\r\n     */\n    get: function () {\n      return this._south;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapSeriesDataItem.prototype, \"north\", {\n    /**\r\n     * Latitude of the North-most point of the element.\r\n     */\n    get: function () {\n      return this._north;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Updates the item's bounding coordinates: coordinates of the East, West,\r\n   * North, and South-most points.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  MapSeriesDataItem.prototype.updateExtremes = function () {\n    var geometry = this.getFeature().geometry;\n\n    if (geometry) {\n      var bounds = d3geo.geoBounds(geometry);\n      var west = bounds[0][0];\n      var south = bounds[0][1];\n      var north = bounds[1][1];\n      var east = bounds[1][0];\n      var changed = false;\n\n      if (north != this.north) {\n        this._north = $math.round(north, 6);\n        changed = true;\n      }\n\n      if (south != this.south) {\n        this._south = $math.round(south, 6);\n        changed = true;\n      }\n\n      if (east != this.east) {\n        this._east = $math.round(east, 6);\n        changed = true;\n      }\n\n      if (west != this.west) {\n        this._west = $math.round(west, 6);\n        changed = true;\n      } // solves single russia prob\n\n\n      if (this._east < this._west) {\n        this._east = 180;\n        this._west = -180;\n      }\n\n      if (changed) {\n        this.component.invalidateDataItems();\n      }\n    }\n  };\n\n  MapSeriesDataItem.prototype.getFeature = function () {\n    return {};\n  };\n\n  return MapSeriesDataItem;\n}(SeriesDataItem);\n\nexport { MapSeriesDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * A base class for series of map objects.\r\n *\r\n * @see {@link IMapSeriesEvents} for a list of available Events\r\n * @see {@link IMapSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\n\nvar MapSeries =\n/** @class */\nfunction (_super) {\n  __extends(MapSeries, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function MapSeries() {\n    var _this = // Init\n    _super.call(this) || this;\n\n    _this.className = \"MapSeries\"; // Set defaults\n\n    _this.isMeasured = false;\n    _this.nonScalingStroke = true; // Set data fields\n\n    _this.dataFields.value = \"value\";\n    _this.ignoreBounds = false;\n\n    if (_this.tooltip) {\n      _this.tooltip.showInViewport = true;\n    } // Apply theme\n\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Returns a new/empty DataItem of the type appropriate for this object.\r\n   *\r\n   * @see {@link DataItem}\r\n   * @return Data Item\r\n   */\n\n\n  MapSeries.prototype.createDataItem = function () {\n    return new MapSeriesDataItem();\n  };\n  /**\r\n   * Checks whether object should be included in series.\r\n   *\r\n   * @param includes  A list of explicitly included ids\r\n   * @param excludes  A list of explicitly excluded ids\r\n   * @param id        Id of the object\r\n   * @return Include?\r\n   */\n\n\n  MapSeries.prototype.checkInclude = function (includes, excludes, id) {\n    if (includes) {\n      if (includes.length == 0) {\n        return false;\n      } else {\n        if (includes.indexOf(id) == -1) {\n          return false;\n        }\n      }\n    }\n\n    if (excludes && excludes.length > 0) {\n      if (excludes.indexOf(id) != -1) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  Object.defineProperty(MapSeries.prototype, \"useGeodata\", {\n    /**\r\n     * @return Use GeoJSON data?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"useGeodata\");\n    },\n\n    /**\r\n     * Should the map extract all the data about element from the GeoJSON?\r\n     *\r\n     * This is especially relevant for [[MapPolygonSeries]]. If not set to `true`\r\n     * polygon series will need to contain geographical data in itself in order\r\n     * to be drawn.\r\n     *\r\n     * If this is set to `true`, series will try to extract data for its objects\r\n     * from either chart-level `geodata` or from series' `geodata` which holds\r\n     * map infor in GeoJSON format.\r\n     *\r\n     * @default false\r\n     * @param value  Use GeoJSON data?\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"useGeodata\", value)) {\n        this.invalidateData();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapSeries.prototype, \"include\", {\n    /**\r\n     * @return Included objects\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"include\");\n    },\n\n    /**\r\n     * A list of object ids that should be explictly included in the series.\r\n     *\r\n     * If this is not set, the series will automatically include all of the\r\n     * objects, available in the GeoJSON map. (minus the ones listed in\r\n     * `exclude`)\r\n     *\r\n     * If you need to display only specific objects, use `include`. E.g.:\r\n     *\r\n     * `include = [\"FR\", \"ES\", \"DE\"];`\r\n     *\r\n     * The above will show only France, Spain, and Germany out of the whole map.\r\n     *\r\n     * @param value  Included objects\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"include\", value)) {\n        this.processIncExc();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  MapSeries.prototype.processIncExc = function () {\n    //this.data = [];\n    this.invalidateData();\n  };\n\n  Object.defineProperty(MapSeries.prototype, \"ignoreBounds\", {\n    /**\r\n     * @return Ignore bounds?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"ignoreBounds\");\n    },\n\n    /**\r\n     * Should this series be included when calculating bounds of the map?\r\n     *\r\n     * This affects initial zoom as well as limits for zoom/pan.\r\n     *\r\n     * By default, `MapPolygonSeries` included (true), while `MapImageSeries` and\r\n     * `MapLineSeries` are not (`false`).\r\n     *\r\n     * @since 4.3.0\r\n     * @param  value  Ignore bounds?\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"ignoreBounds\", value)) {\n        if (this.chart) {\n          this.chart.updateExtremes();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapSeries.prototype, \"exclude\", {\n    /**\r\n     * @return Excluded ids\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"exclude\");\n    },\n\n    /**\r\n     * A list of object ids that should be excluded from the series.\r\n     *\r\n     * E.g. you want to include all of the areas from a GeoJSON map, except\r\n     * Antarctica.\r\n     *\r\n     * You'd leave `include` empty, and set `exclude = [\"AQ\"]`.\r\n     *\r\n     * @param value  Excluded ids\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"exclude\", value)) {\n        this.processIncExc();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Decorates a newly added object.\r\n   *\r\n   * @param event [description]\r\n   */\n\n  MapSeries.prototype.handleObjectAdded = function (event) {\n    var mapObject = event.newValue;\n    mapObject.parent = this;\n    mapObject.series = this;\n    mapObject.strokeWidth = mapObject.strokeWidth;\n  };\n\n  Object.defineProperty(MapSeries.prototype, \"geodata\", {\n    /**\r\n     * @return GeoJSON data\r\n     */\n    get: function () {\n      return this._geodata;\n    },\n\n    /**\r\n     * Map data in GeoJSON format.\r\n     *\r\n     * The series supports the following GeoJSON objects: `Point`, `LineString`,\r\n     * `Polygon`, `MultiPoint`, `MultiLineString`, and `MultiPolygon`.\r\n     *\r\n     * @see {@link http://geojson.org/} Official GeoJSON format specification\r\n     * @param geoJSON GeoJSON data\r\n     */\n    set: function (geodata) {\n      if (geodata != this._geodata) {\n        this._geodata = geodata;\n\n        for (var i = this.data.length - 1; i >= 0; i--) {\n          if (this.data[i].madeFromGeoData == true) {\n            this.data.splice(i, 1);\n          }\n        }\n\n        this.disposeData();\n        this.invalidateData();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapSeries.prototype, \"geodataSource\", {\n    /**\r\n     * Returns a [[DataSource]] specifically for loading Component's data.\r\n     *\r\n     * @return Data source\r\n     */\n    get: function () {\n      if (!this._dataSources[\"geodata\"]) {\n        this.getDataSource(\"geodata\");\n      }\n\n      return this._dataSources[\"geodata\"];\n    },\n\n    /**\r\n     * Sets a [[DataSource]] to be used for loading Component's data.\r\n     *\r\n     * @param value Data source\r\n     */\n    set: function (value) {\n      var _this = this;\n\n      if (this._dataSources[\"geodata\"]) {\n        this.removeDispose(this._dataSources[\"geodata\"]);\n      }\n\n      this._dataSources[\"geodata\"] = value;\n      this._dataSources[\"geodata\"].component = this;\n      this.events.on(\"inited\", function () {\n        _this.loadData(\"geodata\");\n      }, undefined, false);\n      this.setDataSourceEvents(value, \"geodata\");\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  MapSeries.prototype.getFeatures = function () {\n    return;\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  MapSeries.prototype.validateDataItems = function () {\n    _super.prototype.validateDataItems.call(this);\n\n    this.updateExtremes();\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  MapSeries.prototype.updateExtremes = function () {\n    var north;\n    var south;\n    var east;\n    var west;\n    this.dataItems.each(function (dataItem) {\n      if (dataItem.north > north || !$type.isNumber(north)) {\n        north = dataItem.north;\n      }\n\n      if (dataItem.south < south || !$type.isNumber(south)) {\n        south = dataItem.south;\n      }\n\n      if (dataItem.west < west || !$type.isNumber(west)) {\n        west = dataItem.west;\n      }\n\n      if (dataItem.east > east || !$type.isNumber(east)) {\n        east = dataItem.east;\n      }\n    });\n\n    if (this._mapObjects) {\n      this._mapObjects.each(function (mapObject) {\n        if (mapObject.north > north || !$type.isNumber(north)) {\n          north = mapObject.north;\n        }\n\n        if (mapObject.south < south || !$type.isNumber(south)) {\n          south = mapObject.south;\n        }\n\n        if (mapObject.west < west || !$type.isNumber(west)) {\n          west = mapObject.west;\n        }\n\n        if (mapObject.east > east || !$type.isNumber(east)) {\n          east = mapObject.east;\n        }\n      });\n    }\n\n    if (this.north != north || this.east != east || this.south != south || this.west != west) {\n      this._north = north;\n      this._east = east;\n      this._west = west;\n      this._south = south;\n      this.dispatch(\"geoBoundsChanged\");\n\n      if (!this.ignoreBounds) {\n        this.chart.updateExtremes();\n      }\n    }\n  };\n\n  Object.defineProperty(MapSeries.prototype, \"north\", {\n    /**\r\n     * @return Latitude\r\n     */\n    get: function () {\n      if ($type.isNumber(this._northDefined)) {\n        return this._northDefined;\n      }\n\n      return this._north;\n    },\n\n    /**\r\n     * North-most latitude of the series.\r\n     *\r\n     * By default, this holds auto-calculated latitude of the extremity.\r\n     *\r\n     * It can be overridden manually.\r\n     *\r\n     * @param  value  Latitude\r\n     */\n    set: function (value) {\n      this._northDefined = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapSeries.prototype, \"south\", {\n    /**\r\n     * @return Latitude\r\n     */\n    get: function () {\n      if ($type.isNumber(this._southDefined)) {\n        return this._southDefined;\n      }\n\n      return this._south;\n    },\n\n    /**\r\n     * South-most latitude of the series.\r\n     *\r\n     * By default, this holds auto-calculated latitude of the extremity.\r\n     *\r\n     * It can be overridden manually.\r\n     *\r\n     * @param  value  Latitude\r\n     */\n    set: function (value) {\n      this._southDefined = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapSeries.prototype, \"west\", {\n    /**\r\n     * @return Longitude\r\n     */\n    get: function () {\n      if ($type.isNumber(this._westDefined)) {\n        return this._westDefined;\n      }\n\n      return this._west;\n    },\n\n    /**\r\n     * West-most longitude of the series.\r\n     *\r\n     * By default, this holds auto-calculated longitude of the extremity.\r\n     *\r\n     * It can be overridden manually.\r\n     *\r\n     * @param  value  Longitude\r\n     */\n    set: function (value) {\n      this._westDefined = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapSeries.prototype, \"east\", {\n    /**\r\n     * @return Longitude\r\n     */\n    get: function () {\n      if ($type.isNumber(this._eastDefined)) {\n        return this._eastDefined;\n      }\n\n      return this._east;\n    },\n\n    /**\r\n     * East-most longitude of the series.\r\n     *\r\n     * By default, this holds auto-calculated longitude of the extremity.\r\n     *\r\n     * It can be overridden manually.\r\n     *\r\n     * @param  value  Longitude\r\n     */\n    set: function (value) {\n      this._eastDefined = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Processes JSON-based config before it is applied to the object.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param config  Config\r\n   */\n\n  MapSeries.prototype.processConfig = function (config) {\n    if ($type.hasValue(config[\"geodata\"]) && $type.isString(config[\"geodata\"])) {\n      var name_1 = config[\"geodata\"]; // Check if there's a map loaded by such name\n\n      if ($type.hasValue(window[\"am4geodata_\" + config[\"geodata\"]])) {\n        config[\"geodata\"] = window[\"am4geodata_\" + config[\"geodata\"]];\n      } // Nope. Let's try maybe we got JSON as string?\n      else {\n          try {\n            config[\"geodata\"] = JSON.parse(config[\"geodata\"]);\n          } catch (e) {\n            // No go again. Error out.\n            throw Error(\"MapChart error: Geodata `\" + name_1 + \"` is not loaded or is incorrect.\");\n          }\n        }\n    }\n\n    _super.prototype.processConfig.call(this, config);\n  };\n  /**\r\n   * Adds `projection` to \"as is\" fields.\r\n   *\r\n   * @param field  Field name\r\n   * @return Assign as is?\r\n   */\n\n\n  MapSeries.prototype.asIs = function (field) {\n    return field == \"geodata\" || _super.prototype.asIs.call(this, field);\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  MapSeries.prototype.updateTooltipBounds = function () {\n    if (this.tooltip && this.topParent) {\n      this.tooltip.setBounds({\n        x: 10,\n        y: 10,\n        width: this.topParent.maxWidth - 20,\n        height: this.topParent.maxHeight - 20\n      });\n    }\n  };\n\n  return MapSeries;\n}(Series);\n\nexport { MapSeries };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"MapSeries\"] = MapSeries;\nregistry.registeredClasses[\"MapSeriesDataItem\"] = MapSeriesDataItem;","map":{"version":3,"sources":["../../../../../src/.internal/charts/map/MapSeries.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Map series module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Series, SeriesDataItem, ISeriesProperties, ISeriesDataFields, ISeriesAdapters, ISeriesEvents } from \"../series/Series\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapObject } from \"./MapObject\";\r\nimport { IListEvents } from \"../../core/utils/List\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { DataSource } from \"../../core/data/DataSource\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport { ListTemplate } from \"../../core/utils/List\";\r\nimport * as d3geo from \"d3-geo\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class MapSeriesDataItem extends SeriesDataItem {\r\n\r\n\t/**\r\n\t * South-most latitude.\r\n\t */\r\n\tprotected _south: number;\r\n\r\n\t/**\r\n\t * North-most latitude.\r\n\t */\r\n\tprotected _north: number;\r\n\r\n\t/**\r\n\t * East-most longitude.\r\n\t */\r\n\tprotected _east: number;\r\n\r\n\t/**\r\n\t * West-most longitude.\r\n\t */\r\n\tprotected _west: number;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: MapSeries;\r\n\r\n\t/**\r\n\t * Shortcut to either [[MapLine]], [[MapImage]], or [[MapPolygon]].\r\n\t */\r\n\tpublic mapObject: MapObject;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapSeriesDataItem\";\r\n\t\tthis.values.value = {};\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Numeric value of the data item.\r\n\t *\r\n\t * Value may be used in heat-map calculations.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set value(value: number) {\r\n\t\tthis.setValue(\"value\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\treturn this.values.value.value;\r\n\t}\r\n\r\n\t/**\r\n\t * When `zoomToMapObject()` is called the map will either calculate suitable\r\n\t * zoom level itself or use object's `zoomLevel` if set.\r\n\t *\r\n\t * @param value  Zoom level\r\n\t */\r\n\tpublic set zoomLevel(value: number) {\r\n\t\tthis.setProperty(\"zoomLevel\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Zoom level\r\n\t */\r\n\tpublic get zoomLevel(): number {\r\n\t\treturn this.properties[\"zoomLevel\"];\r\n\t}\r\n\r\n\t/**\r\n\t * When `zoomToMapObject()` is called the map will either calculate suitable\r\n\t * center position itself or use object's `zoomGeoPoint` if set.\r\n\t *\r\n\t * @param value  Zoom geo point\r\n\t */\r\n\tpublic set zoomGeoPoint(value: IGeoPoint) {\r\n\t\tthis.setProperty(\"zoomGeoPoint\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Zoom geo point\r\n\t */\r\n\tpublic get zoomGeoPoint(): IGeoPoint {\r\n\t\treturn this.properties[\"zoomGeoPoint\"];\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Longitude of the East-most point of the element.\r\n\t */\r\n\tpublic get east(): number {\r\n\t\treturn this._east;\r\n\t}\r\n\r\n\t/**\r\n\t * Longitude of the West-most point of the element.\r\n\t */\r\n\tpublic get west(): number {\r\n\t\treturn this._west;\r\n\t}\r\n\r\n\t/**\r\n\t * Latitude of the South-most point of the element.\r\n\t */\r\n\tpublic get south(): number {\r\n\t\treturn this._south;\r\n\t}\r\n\r\n\t/**\r\n\t * Latitude of the North-most point of the element.\r\n\t */\r\n\tpublic get north(): number {\r\n\t\treturn this._north;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the item's bounding coordinates: coordinates of the East, West,\r\n\t * North, and South-most points.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateExtremes(): void {\r\n\t\tlet geometry = this.getFeature().geometry;\r\n\t\tif (geometry) {\r\n\r\n\t\t\tlet bounds = d3geo.geoBounds(geometry);\r\n\r\n\t\t\tlet west = bounds[0][0];\r\n\t\t\tlet south = bounds[0][1];\r\n\r\n\t\t\tlet north = bounds[1][1];\r\n\t\t\tlet east = bounds[1][0];\r\n\r\n\t\t\tlet changed = false;\r\n\t\t\tif (north != this.north) {\r\n\t\t\t\tthis._north = $math.round(north, 6);\r\n\t\t\t\tchanged = true;\r\n\t\t\t}\r\n\r\n\t\t\tif (south != this.south) {\r\n\t\t\t\tthis._south = $math.round(south, 6);\r\n\t\t\t\tchanged = true;\r\n\t\t\t}\r\n\r\n\t\t\tif (east != this.east) {\r\n\t\t\t\tthis._east = $math.round(east, 6);\r\n\t\t\t\tchanged = true;\r\n\t\t\t}\r\n\r\n\t\t\tif (west != this.west) {\r\n\t\t\t\tthis._west = $math.round(west, 6);\r\n\t\t\t\tchanged = true;\r\n\t\t\t}\r\n\r\n\t\t\t// solves single russia prob\r\n\t\t\tif (this._east < this._west) {\r\n\t\t\t\tthis._east = 180;\r\n\t\t\t\tthis._west = -180;\r\n\t\t\t}\r\n\r\n\t\t\tif (changed) {\r\n\t\t\t\tthis.component.invalidateDataItems();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic getFeature(): any {\r\n\t\treturn {};\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * [GEOJSONGeometry description]\r\n *\r\n * @todo Description\r\n */\r\nexport type GEOJSONGeometry = \"Point\" | \"LineString\" | \"Polygon\" | \"MultiPoint\" | \"MultiLineString\" | \"MultiPolygon\";\r\n\r\n/**\r\n * Defines data fields for [[MapSeries]].\r\n *\r\n * @todo Alllow any number of values?\r\n */\r\nexport interface IMapSeriesDataFields extends ISeriesDataFields {\r\n\r\n\t/**\r\n\t * A field name in data for a numeric value of the map object.\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * A field name in data for a `zoomLevel` of the map object.\r\n\t */\r\n\tzoomLevel?: string;\r\n\r\n\t/**\r\n\t * A field name in data for a `zoomGeoPoint` of the map object.\r\n\t */\r\n\tzoomGeoPoint?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[MapSeries]].\r\n */\r\nexport interface IMapSeriesProperties extends ISeriesProperties {\r\n\r\n\t/**\r\n\t * A flag telling if the series should get data from `geodata` or not\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tuseGeodata?: boolean;\r\n\r\n\t/**\r\n\t * A list of object ids to include from the series.\r\n\t */\r\n\tinclude?: string[];\r\n\r\n\t/**\r\n\t * A list of object ids to exclude from the series.\r\n\t */\r\n\texclude?: string[];\r\n\r\n\t/**\r\n\t * Should this series be included when calculating bounds of the map?\r\n\t *\r\n\t * This affects initial zoom as well as limits for zoom/pan.\r\n\t *\r\n\t * By default, `MapPolygonSeries` included (true), while `MapImageSeries` and\r\n\t * `MapLineSeries` are not (`false`).\r\n\t */\r\n\tignoreBounds?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[MapSeries]].\r\n */\r\nexport interface IMapSeriesEvents extends ISeriesEvents {\r\n\tgeoBoundsChanged: {};\r\n}\r\n\r\n/**\r\n * Defines adapters for [[MapSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapSeriesAdapters extends ISeriesAdapters, IMapSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A base class for series of map objects.\r\n *\r\n * @see {@link IMapSeriesEvents} for a list of available Events\r\n * @see {@link IMapSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class MapSeries extends Series {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IMapSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IMapSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IMapSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IMapSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: MapSeriesDataItem;\r\n\r\n\t/**\r\n\t * The longitude of the East-most point in the series. (out of all elements)\r\n\t */\r\n\tprotected _east: number;\r\n\r\n\t/**\r\n\t * The longitude of the West-most point in the series. (out of all elements)\r\n\t */\r\n\tprotected _west: number;\r\n\r\n\t/**\r\n\t * The latitude of the South-most point in the series. (out of all elements)\r\n\t */\r\n\tprotected _south: number;\r\n\r\n\t/**\r\n\t * The latitude of the North-most point in the series. (out of all elements)\r\n\t */\r\n\tprotected _north: number;\r\n\r\n\tprotected _eastDefined: number;\r\n\r\n\tprotected _westDefined: number;\r\n\r\n\tprotected _southDefined: number;\r\n\r\n\tprotected _northDefined: number;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: MapChart;\r\n\r\n\t/**\r\n\t * Map data in GeoJSON format.\r\n\t *\r\n\t * @see {@link http://geojson.org/} GeoJSON official specification\r\n\t */\r\n\tprotected _geodata: Object;\r\n\r\n\r\n\tprotected _mapObjects: ListTemplate<MapObject>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapSeries\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.nonScalingStroke = true;\r\n\r\n\t\t// Set data fields\r\n\t\tthis.dataFields.value = \"value\";\r\n\r\n\t\tthis.ignoreBounds = false;\r\n\r\n\t\tif (this.tooltip) {\r\n\t\t\tthis.tooltip.showInViewport = true;\r\n\t\t}\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new MapSeriesDataItem();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Checks whether object should be included in series.\r\n\t *\r\n\t * @param includes  A list of explicitly included ids\r\n\t * @param excludes  A list of explicitly excluded ids\r\n\t * @param id        Id of the object\r\n\t * @return Include?\r\n\t */\r\n\tprotected checkInclude(includes: string[], excludes: string[], id: string): boolean {\r\n\t\tif (includes) {\r\n\t\t\tif (includes.length == 0) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (includes.indexOf(id) == -1) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (excludes && excludes.length > 0) {\r\n\t\t\tif (excludes.indexOf(id) != -1) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Should the map extract all the data about element from the GeoJSON?\r\n\t *\r\n\t * This is especially relevant for [[MapPolygonSeries]]. If not set to `true`\r\n\t * polygon series will need to contain geographical data in itself in order\r\n\t * to be drawn.\r\n\t *\r\n\t * If this is set to `true`, series will try to extract data for its objects\r\n\t * from either chart-level `geodata` or from series' `geodata` which holds\r\n\t * map infor in GeoJSON format.\r\n\t *\r\n\t * @default false\r\n\t * @param value  Use GeoJSON data?\r\n\t */\r\n\tpublic set useGeodata(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"useGeodata\", value)) {\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Use GeoJSON data?\r\n\t */\r\n\tpublic get useGeodata(): boolean {\r\n\t\treturn this.getPropertyValue(\"useGeodata\");\r\n\t}\r\n\r\n\t/**\r\n\t * A list of object ids that should be explictly included in the series.\r\n\t *\r\n\t * If this is not set, the series will automatically include all of the\r\n\t * objects, available in the GeoJSON map. (minus the ones listed in\r\n\t * `exclude`)\r\n\t *\r\n\t * If you need to display only specific objects, use `include`. E.g.:\r\n\t *\r\n\t * `include = [\"FR\", \"ES\", \"DE\"];`\r\n\t *\r\n\t * The above will show only France, Spain, and Germany out of the whole map.\r\n\t *\r\n\t * @param value  Included objects\r\n\t */\r\n\tpublic set include(value: string[]) {\r\n\t\tif (this.setPropertyValue(\"include\", value)) {\r\n\t\t\tthis.processIncExc();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected processIncExc() {\r\n\t\t//this.data = [];\r\n\t\tthis.invalidateData();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Included objects\r\n\t */\r\n\tpublic get include(): string[] {\r\n\t\treturn this.getPropertyValue(\"include\");\r\n\t}\r\n\r\n\t/**\r\n\t * Should this series be included when calculating bounds of the map?\r\n\t *\r\n\t * This affects initial zoom as well as limits for zoom/pan.\r\n\t *\r\n\t * By default, `MapPolygonSeries` included (true), while `MapImageSeries` and\r\n\t * `MapLineSeries` are not (`false`).\r\n\t *\r\n\t * @since 4.3.0\r\n\t * @param  value  Ignore bounds?\r\n\t */\r\n\tpublic set ignoreBounds(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"ignoreBounds\", value)) {\r\n\t\t\tif (this.chart) {\r\n\t\t\t\tthis.chart.updateExtremes();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Ignore bounds?\r\n\t */\r\n\tpublic get ignoreBounds(): boolean {\r\n\t\treturn this.getPropertyValue(\"ignoreBounds\");\r\n\t}\r\n\r\n\t/**\r\n\t * A list of object ids that should be excluded from the series.\r\n\t *\r\n\t * E.g. you want to include all of the areas from a GeoJSON map, except\r\n\t * Antarctica.\r\n\t *\r\n\t * You'd leave `include` empty, and set `exclude = [\"AQ\"]`.\r\n\t *\r\n\t * @param value  Excluded ids\r\n\t */\r\n\tpublic set exclude(value: string[]) {\r\n\t\tif (this.setPropertyValue(\"exclude\", value)) {\r\n\t\t\tthis.processIncExc();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Excluded ids\r\n\t */\r\n\tpublic get exclude(): string[] {\r\n\t\treturn this.getPropertyValue(\"exclude\");\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a newly added object.\r\n\t *\r\n\t * @param event [description]\r\n\t */\r\n\tprotected handleObjectAdded(event: IListEvents<MapObject>[\"inserted\"]) {\r\n\t\tlet mapObject: MapObject = event.newValue;\r\n\t\tmapObject.parent = this;\r\n\t\tmapObject.series = this;\r\n\t\tmapObject.strokeWidth = mapObject.strokeWidth;\r\n\t}\r\n\r\n\t/**\r\n\t * Map data in GeoJSON format.\r\n\t *\r\n\t * The series supports the following GeoJSON objects: `Point`, `LineString`,\r\n\t * `Polygon`, `MultiPoint`, `MultiLineString`, and `MultiPolygon`.\r\n\t *\r\n\t * @see {@link http://geojson.org/} Official GeoJSON format specification\r\n\t * @param geoJSON GeoJSON data\r\n\t */\r\n\tpublic set geodata(geodata: Object) {\r\n\t\tif (geodata != this._geodata) {\r\n\t\t\tthis._geodata = geodata;\r\n\t\t\tfor (let i = this.data.length - 1; i >= 0; i--) {\r\n\t\t\t\tif (this.data[i].madeFromGeoData == true) {\r\n\t\t\t\t\tthis.data.splice(i, 1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.disposeData();\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return GeoJSON data\r\n\t */\r\n\tpublic get geodata(): Object {\r\n\t\treturn this._geodata;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets a [[DataSource]] to be used for loading Component's data.\r\n\t *\r\n\t * @param value Data source\r\n\t */\r\n\tpublic set geodataSource(value: DataSource) {\r\n\t\tif (this._dataSources[\"geodata\"]) {\r\n\t\t\tthis.removeDispose(this._dataSources[\"geodata\"]);\r\n\t\t}\r\n\t\tthis._dataSources[\"geodata\"] = value;\r\n\t\tthis._dataSources[\"geodata\"].component = this;\r\n\t\tthis.events.on(\"inited\", () => {\r\n\t\t\tthis.loadData(\"geodata\")\r\n\t\t}, undefined, false);\r\n\t\tthis.setDataSourceEvents(value, \"geodata\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns a [[DataSource]] specifically for loading Component's data.\r\n\t *\r\n\t * @return Data source\r\n\t */\r\n\tpublic get geodataSource(): DataSource {\r\n\t\tif (!this._dataSources[\"geodata\"]) {\r\n\t\t\tthis.getDataSource(\"geodata\");\r\n\t\t}\r\n\t\treturn this._dataSources[\"geodata\"];\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic getFeatures(): { \"type\": \"Feature\", geometry: { type: \"Point\" | \"MultiLineString\" | \"MultiPolygon\", coordinates: [number, number] | Array<Array<[number, number]>> | Array<Array<Array<[number, number]>>> } }[] {\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic validateDataItems() {\r\n\t\tsuper.validateDataItems();\r\n\t\tthis.updateExtremes();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic updateExtremes() {\r\n\t\tlet north: number;\r\n\t\tlet south: number;\r\n\t\tlet east: number;\r\n\t\tlet west: number;\r\n\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\tif (dataItem.north > north || !$type.isNumber(north)) {\r\n\t\t\t\tnorth = dataItem.north;\r\n\t\t\t}\r\n\r\n\t\t\tif (dataItem.south < south || !$type.isNumber(south)) {\r\n\t\t\t\tsouth = dataItem.south;\r\n\t\t\t}\r\n\r\n\t\t\tif (dataItem.west < west || !$type.isNumber(west)) {\r\n\t\t\t\twest = dataItem.west;\r\n\t\t\t}\r\n\r\n\t\t\tif (dataItem.east > east || !$type.isNumber(east)) {\r\n\t\t\t\teast = dataItem.east;\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tif (this._mapObjects) {\r\n\t\t\tthis._mapObjects.each((mapObject) => {\r\n\t\t\t\tif (mapObject.north > north || !$type.isNumber(north)) {\r\n\t\t\t\t\tnorth = mapObject.north;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (mapObject.south < south || !$type.isNumber(south)) {\r\n\t\t\t\t\tsouth = mapObject.south;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (mapObject.west < west || !$type.isNumber(west)) {\r\n\t\t\t\t\twest = mapObject.west;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (mapObject.east > east || !$type.isNumber(east)) {\r\n\t\t\t\t\teast = mapObject.east;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\r\n\r\n\t\tif (this.north != north || this.east != east || this.south != south || this.west != west) {\r\n\t\t\tthis._north = north;\r\n\t\t\tthis._east = east;\r\n\t\t\tthis._west = west;\r\n\t\t\tthis._south = south;\r\n\r\n\t\t\tthis.dispatch(\"geoBoundsChanged\");\r\n\t\t\tif (!this.ignoreBounds) {\r\n\t\t\t\tthis.chart.updateExtremes();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * North-most latitude of the series.\r\n\t *\r\n\t * By default, this holds auto-calculated latitude of the extremity.\r\n\t *\r\n\t * It can be overridden manually.\r\n\t *\r\n\t * @param  value  Latitude\r\n\t */\r\n\tpublic set north(value: number) {\r\n\t\tthis._northDefined = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Latitude\r\n\t */\r\n\tpublic get north(): number {\r\n\t\tif ($type.isNumber(this._northDefined)) {\r\n\t\t\treturn this._northDefined;\r\n\t\t}\r\n\t\treturn this._north;\r\n\t}\r\n\r\n\t/**\r\n\t * South-most latitude of the series.\r\n\t *\r\n\t * By default, this holds auto-calculated latitude of the extremity.\r\n\t *\r\n\t * It can be overridden manually.\r\n\t *\r\n\t * @param  value  Latitude\r\n\t */\r\n\tpublic set south(value: number) {\r\n\t\tthis._southDefined = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Latitude\r\n\t */\r\n\tpublic get south(): number {\r\n\t\tif ($type.isNumber(this._southDefined)) {\r\n\t\t\treturn this._southDefined;\r\n\t\t}\r\n\t\treturn this._south;\r\n\t}\r\n\r\n\t/**\r\n\t * West-most longitude of the series.\r\n\t *\r\n\t * By default, this holds auto-calculated longitude of the extremity.\r\n\t *\r\n\t * It can be overridden manually.\r\n\t *\r\n\t * @param  value  Longitude\r\n\t */\r\n\tpublic set west(value: number) {\r\n\t\tthis._westDefined = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Longitude\r\n\t */\r\n\tpublic get west(): number {\r\n\t\tif ($type.isNumber(this._westDefined)) {\r\n\t\t\treturn this._westDefined;\r\n\t\t}\r\n\t\treturn this._west;\r\n\t}\r\n\r\n\t/**\r\n\t * East-most longitude of the series.\r\n\t *\r\n\t * By default, this holds auto-calculated longitude of the extremity.\r\n\t *\r\n\t * It can be overridden manually.\r\n\t *\r\n\t * @param  value  Longitude\r\n\t */\r\n\tpublic set east(value: number) {\r\n\t\tthis._eastDefined = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Longitude\r\n\t */\r\n\tpublic get east(): number {\r\n\t\tif ($type.isNumber(this._eastDefined)) {\r\n\t\t\treturn this._eastDefined;\r\n\t\t}\r\n\t\treturn this._east;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif ($type.hasValue(config[\"geodata\"]) && $type.isString(config[\"geodata\"])) {\r\n\t\t\tconst name = config[\"geodata\"];\r\n\t\t\t// Check if there's a map loaded by such name\r\n\t\t\tif ($type.hasValue((<any>window)[\"am4geodata_\" + config[\"geodata\"]])) {\r\n\t\t\t\tconfig[\"geodata\"] = (<any>window)[\"am4geodata_\" + config[\"geodata\"]];\r\n\t\t\t}\r\n\t\t\t// Nope. Let's try maybe we got JSON as string?\r\n\t\t\telse {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconfig[\"geodata\"] = JSON.parse(config[\"geodata\"]);\r\n\t\t\t\t}\r\n\t\t\t\tcatch (e) {\r\n\t\t\t\t\t// No go again. Error out.\r\n\t\t\t\t\tthrow Error(\"MapChart error: Geodata `\" + name + \"` is not loaded or is incorrect.\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n\t/**\r\n\t * Adds `projection` to \"as is\" fields.\r\n\t *\r\n\t * @param field  Field name\r\n\t * @return Assign as is?\r\n\t */\r\n\tprotected asIs(field: string): boolean {\r\n\t\treturn field == \"geodata\" || super.asIs(field);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic updateTooltipBounds() {\r\n\t\tif (this.tooltip && this.topParent) {\r\n\t\t\tthis.tooltip.setBounds({ x: 10, y: 10, width: this.topParent.maxWidth - 20, height: this.topParent.maxHeight - 20 });\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapSeries\"] = MapSeries;\r\nregistry.registeredClasses[\"MapSeriesDataItem\"] = MapSeriesDataItem;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}