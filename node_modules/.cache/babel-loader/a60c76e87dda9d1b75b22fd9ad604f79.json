{"ast":null,"code":"/**\r\n * Map image series module\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { MapSeries, MapSeriesDataItem } from \"./MapSeries\";\nimport { MapImage } from \"./MapImage\";\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\nimport { registry } from \"../../core/Registry\";\nimport * as $array from \"../../core/utils/Array\";\nimport * as $mapUtils from \"./MapUtils\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $type from \"../../core/utils/Type\";\nimport { Disposer } from \"../../core/utils/Disposer\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines a [[DataItem]] for [[MapImageSeries]]\r\n * @see {@link DataItem}\r\n */\n\nvar MapImageSeriesDataItem =\n/** @class */\nfunction (_super) {\n  __extends(MapImageSeriesDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function MapImageSeriesDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"MapImageSeriesDataItem\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * @ignore\r\n   */\n\n\n  MapImageSeriesDataItem.prototype.getFeature = function () {\n    return {\n      \"type\": \"Feature\",\n      geometry: {\n        type: \"Point\",\n        coordinates: this.point\n      }\n    };\n  };\n\n  Object.defineProperty(MapImageSeriesDataItem.prototype, \"mapImage\", {\n    /**\r\n     * A [[MapImage]] element related to this data item.\r\n     *\r\n     * @return Element\r\n     */\n    get: function () {\n      var _this = this;\n\n      if (!this._mapImage) {\n        var mapImage_1 = this.component.mapImages.create();\n        this.addSprite(mapImage_1);\n        this._mapImage = mapImage_1;\n\n        this._disposers.push(mapImage_1);\n\n        this._disposers.push(new Disposer(function () {\n          if (_this.component) {\n            _this.component.mapImages.removeValue(mapImage_1);\n          }\n        }));\n\n        this.mapObject = mapImage_1;\n      }\n\n      return this._mapImage;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapImageSeriesDataItem.prototype, \"point\", {\n    /**\r\n     * @return [description]\r\n     */\n    get: function () {\n      return this._point;\n    },\n\n    /**\r\n     * [point description]\r\n     *\r\n     * @todo Description\r\n     * @param point [description]\r\n     */\n    set: function (point) {\n      this._point = point;\n      this._geoPoint = $mapUtils.pointToGeo(point);\n      this.updateExtremes();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapImageSeriesDataItem.prototype, \"multiPoint\", {\n    /**\r\n     * @return [description]\r\n     */\n    get: function () {\n      return [this._point];\n    },\n\n    /**\r\n     * [point description]\r\n     *\r\n     * @todo Description\r\n     * @param point [description]\r\n     */\n    set: function (multiPoint) {\n      this._point = multiPoint[0];\n      this._geoPoint = $mapUtils.pointToGeo(this._point);\n      this.updateExtremes();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapImageSeriesDataItem.prototype, \"geoPoint\", {\n    /**\r\n     * @return Image coordinates\r\n     */\n    get: function () {\n      return this._geoPoint;\n    },\n\n    /**\r\n     * Geographical coordinates (lat/long) image is placed at.\r\n     *\r\n     * @param geoPoint Image coordinates\r\n     */\n    set: function (geoPoint) {\n      this._geoPoint = geoPoint;\n      this.point = [geoPoint.longitude, geoPoint.latitude];\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return MapImageSeriesDataItem;\n}(MapSeriesDataItem);\n\nexport { MapImageSeriesDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * A series of map image (marker) elements.\r\n *\r\n * @see {@link IMapImageSeriesEvents} for a list of available Events\r\n * @see {@link IMapImageSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\n\nvar MapImageSeries =\n/** @class */\nfunction (_super) {\n  __extends(MapImageSeries, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function MapImageSeries() {\n    var _this = // Init\n    _super.call(this) || this;\n\n    _this.className = \"MapImageSeries\"; // Set data fields\n\n    _this.dataFields.multiPoint = \"multiPoint\";\n    _this.dataFields.point = \"point\";\n    _this.dataFields.geoPoint = \"geoPoint\";\n    _this.dataFields.multiGeoPoint = \"multiGeoPoint\";\n    _this.ignoreBounds = true; // Apply theme\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Returns a new/empty DataItem of the type appropriate for this object.\r\n   *\r\n   * @see {@link DataItem}\r\n   * @return Data Item\r\n   */\n\n\n  MapImageSeries.prototype.createDataItem = function () {\n    return new MapImageSeriesDataItem();\n  };\n  /**\r\n   * (Re)validates the data of the sries, effectively forcing it to redraw\r\n   * all of its elements.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  MapImageSeries.prototype.validateData = function () {\n    var _this = this;\n\n    if (this.data.length > 0 && this._parseDataFrom == 0) {\n      this.mapImages.clear();\n    } // process geoJSON and created map objects\n\n\n    if (this.useGeodata) {\n      if (this.useGeodata || this.geodata) {\n        var geoJSON = this.chart.geodata;\n        var features = void 0;\n\n        if (geoJSON.type == \"FeatureCollection\") {\n          features = geoJSON.features;\n        } else if (geoJSON.type == \"Feature\") {\n          features = [geoJSON];\n        } else if ([\"Point\", \"LineString\", \"Polygon\", \"MultiPoint\", \"MultiLineString\", \"MultiPolygon\"].indexOf(geoJSON.type) != -1) {\n          features = [{\n            geometry: geoJSON\n          }];\n        } else {\n          console.log(\"nothing found in geoJSON\");\n        }\n\n        if (features) {\n          var _loop_1 = function (i, len) {\n            var feature = features[i];\n            var geometry = feature.geometry;\n\n            if (geometry) {\n              var type = geometry.type;\n              var id_1 = feature.id;\n\n              if (type == \"Point\" || type == \"MultiPoint\") {\n                // todo: we don't support multipoints at the moment actually\n                if (!this_1.checkInclude(this_1.include, this_1.exclude, id_1)) {\n                  return \"continue\";\n                }\n\n                var coordinates = geometry.coordinates; // make the same as MultiPoint\n\n                if (type == \"Point\") {\n                  coordinates = [coordinates];\n                }\n\n                var dataObject = $array.find(this_1.data, function (value, i) {\n                  return value.id == id_1;\n                });\n\n                if (!dataObject) {\n                  dataObject = {\n                    multiPoint: coordinates,\n                    id: id_1,\n                    madeFromGeoData: true\n                  };\n                  this_1.data.push(dataObject);\n                } else {\n                  if (!dataObject.multiPoint) {\n                    dataObject.multiPoint = coordinates;\n                  }\n                } // copy properties data to datacontext\n\n\n                $utils.softCopyProperties(feature.properties, dataObject);\n              }\n            }\n          };\n\n          var this_1 = this;\n\n          for (var i = 0, len = features.length; i < len; i++) {\n            _loop_1(i, len);\n          }\n        }\n      }\n    }\n\n    _super.prototype.validateData.call(this); // important! this should go after super.validateData\n    // if data is parsed in chunks, images list is corrupted, fix it here\n\n\n    $iter.each(this.dataItems.iterator(), function (dataItem) {\n      var mapImage = dataItem.mapImage;\n\n      if (!mapImage.isDisposed()) {\n        _this.mapImages.moveValue(mapImage);\n\n        if ($type.isNumber(mapImage.latitude) && $type.isNumber(mapImage.latitude)) {\n          dataItem.geoPoint = {\n            latitude: mapImage.latitude,\n            longitude: mapImage.longitude\n          };\n        }\n      }\n    });\n  };\n\n  Object.defineProperty(MapImageSeries.prototype, \"mapImages\", {\n    /**\r\n     * A list of map images in the series.\r\n     *\r\n     * @return Map images\r\n     */\n    get: function () {\n      if (!this._mapImages) {\n        var template = new MapImage();\n        var mapImages = new ListTemplate(template);\n\n        this._disposers.push(new ListDisposer(mapImages));\n\n        this._disposers.push(mapImages.template);\n\n        mapImages.template.focusable = true;\n        mapImages.events.on(\"inserted\", this.handleObjectAdded, this, false);\n        this._mapImages = mapImages;\n        this._mapObjects = mapImages;\n      }\n\n      return this._mapImages;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * (Re)validates data element, effectively triggering its redrawal.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param dataItem  Data item\r\n   */\n\n  MapImageSeries.prototype.validateDataElement = function (dataItem) {\n    _super.prototype.validateDataElement.call(this, dataItem);\n\n    dataItem.mapImage.invalidate();\n  };\n  /**\r\n   * (Re)validates the series\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  MapImageSeries.prototype.validate = function () {\n    _super.prototype.validate.call(this);\n\n    $iter.each(this.mapImages.iterator(), function (mapImage) {\n      mapImage.validatePosition();\n    });\n  };\n  /**\r\n   * Copies all properties from another instance of [[Series]].\r\n   *\r\n   * @param source  Source series\r\n   */\n\n\n  MapImageSeries.prototype.copyFrom = function (source) {\n    this.mapImages.template.copyFrom(source.mapImages.template);\n\n    _super.prototype.copyFrom.call(this, source);\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  MapImageSeries.prototype.getFeatures = function () {\n    var _this = this;\n\n    var features = [];\n    this.dataItems.each(function (dataItem) {\n      var feature = dataItem.getFeature();\n\n      if (feature) {\n        features.push(feature);\n      }\n    });\n    this.mapImages.each(function (mapImage) {\n      if (_this.dataItems.indexOf(mapImage._dataItem) == -1) {\n        var feature = mapImage.getFeature();\n\n        if (feature) {\n          features.push(feature);\n        }\n      }\n    });\n    return features;\n  };\n  /**\r\n   * returns MapImage by id\r\n   * @param image id\r\n   * @return {MapImage}\r\n   */\n\n\n  MapImageSeries.prototype.getImageById = function (id) {\n    return $iter.find(this.mapImages.iterator(), function (mapImage) {\n      var dataContext = mapImage.dataItem.dataContext;\n\n      if (mapImage.id == id || dataContext && dataContext.id == id) {\n        return true;\n      }\n    });\n  };\n\n  return MapImageSeries;\n}(MapSeries);\n\nexport { MapImageSeries };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"MapImageSeries\"] = MapImageSeries;\nregistry.registeredClasses[\"MapImageSeriesDataItem\"] = MapImageSeriesDataItem;","map":{"version":3,"sources":["../../../../../src/.internal/charts/map/MapImageSeries.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Map image series module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapSeries, MapSeriesDataItem, GEOJSONGeometry, IMapSeriesProperties, IMapSeriesDataFields, IMapSeriesAdapters, IMapSeriesEvents } from \"./MapSeries\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapImage } from \"./MapImage\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { IMapImageDataObject } from \"../types/MapChart\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $mapUtils from \"./MapUtils\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Disposer } from \"../../core/utils/Disposer\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapImageSeries]]\r\n * @see {@link DataItem}\r\n */\r\nexport class MapImageSeriesDataItem extends MapSeriesDataItem {\r\n\r\n\t/**\r\n\t * A [[MapImage]] element related to this data item.\r\n\t */\r\n\tprotected _mapImage: MapImage;\r\n\r\n\t/**\r\n\t * [_point description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _point: [number, number];\r\n\r\n\t/**\r\n\t * Geographical coordinates image is placed at.\r\n\t */\r\n\tprotected _geoPoint: IGeoPoint;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t */\r\n\tpublic _component!: MapImageSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapImageSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic getFeature(): { \"type\": \"Feature\", geometry: { type: \"Point\", coordinates: [number, number] } } {\r\n\t\treturn { \"type\": \"Feature\", geometry: { type: \"Point\", coordinates: this.point } };\r\n\t}\r\n\r\n\t/**\r\n\t * A [[MapImage]] element related to this data item.\r\n\t *\r\n\t * @return Element\r\n\t */\r\n\tpublic get mapImage(): MapImage {\r\n\t\tif (!this._mapImage) {\r\n\t\t\tlet mapImage = this.component.mapImages.create();\r\n\t\t\tthis.addSprite(mapImage);\r\n\t\t\tthis._mapImage = mapImage;\r\n\t\t\tthis._disposers.push(mapImage);\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tif (this.component) {\r\n\t\t\t\t\tthis.component.mapImages.removeValue(mapImage);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\t\t\tthis.mapObject = mapImage;\r\n\t\t}\r\n\t\treturn this._mapImage;\r\n\t}\r\n\r\n\t/**\r\n\t * [point description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param point [description]\r\n\t */\r\n\tpublic set point(point: [number, number]) {\r\n\t\tthis._point = point;\r\n\t\tthis._geoPoint = $mapUtils.pointToGeo(point);\r\n\t\tthis.updateExtremes();\r\n\t}\r\n\r\n\t/**\r\n\t * @return [description]\r\n\t */\r\n\tpublic get point(): [number, number] {\r\n\t\treturn this._point;\r\n\t}\r\n\r\n\t/**\r\n\t * [point description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param point [description]\r\n\t */\r\n\tpublic set multiPoint(multiPoint: [[number, number]]) {\r\n\t\tthis._point = multiPoint[0];\r\n\t\tthis._geoPoint = $mapUtils.pointToGeo(this._point);\r\n\t\tthis.updateExtremes();\r\n\t}\r\n\r\n\t/**\r\n\t * @return [description]\r\n\t */\r\n\tpublic get multiPoint(): [[number, number]] {\r\n\t\treturn [this._point];\r\n\t}\t\r\n\r\n\t/**\r\n\t * Geographical coordinates (lat/long) image is placed at.\r\n\t *\r\n\t * @param geoPoint Image coordinates\r\n\t */\r\n\tpublic set geoPoint(geoPoint: IGeoPoint) {\r\n\t\tthis._geoPoint = geoPoint;\r\n\t\tthis.point = [geoPoint.longitude, geoPoint.latitude];\r\n\t}\r\n\r\n\t/**\r\n\t * @return Image coordinates\r\n\t */\r\n\tpublic get geoPoint(): IGeoPoint {\r\n\t\treturn this._geoPoint;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[MapImageSeries]].\r\n */\r\nexport interface IMapImageSeriesDataFields extends IMapSeriesDataFields {\r\n\r\n\t/**\r\n\t * Field name that holds image point data in pixels.\r\n\t */\r\n\tpoint?: string;\r\n\r\n\t/**\r\n\t * Field name that holds multi-image point data in pixels.\r\n\t */\r\n\tmultiPoint?: string;\r\n\r\n\t/**\r\n\t * Field name that holds image point data in Geo coordinates.\r\n\t */\r\n\tgeoPoint?: string;\r\n\r\n\t/**\r\n\t * Field name that holds multi-image point data in Geo coordinates.\r\n\t */\r\n\tmultiGeoPoint?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[MapImageSeries]].\r\n */\r\nexport interface IMapImageSeriesProperties extends IMapSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[MapImageSeries]].\r\n */\r\nexport interface IMapImageSeriesEvents extends IMapSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapImageSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapImageSeriesAdapters extends IMapSeriesAdapters, IMapImageSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A series of map image (marker) elements.\r\n *\r\n * @see {@link IMapImageSeriesEvents} for a list of available Events\r\n * @see {@link IMapImageSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class MapImageSeries extends MapSeries {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IMapImageSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IMapImageSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IMapImageSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IMapImageSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: MapImageSeriesDataItem;\r\n\r\n\t/**\r\n\t * A related chart/map object, this image is drawn on.\r\n\t */\r\n\tpublic chart: MapChart;\r\n\r\n\t/**\r\n\t * A list of map images in the series.\r\n\t */\r\n\tprotected _mapImages: ListTemplate<MapImage>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapImageSeries\";\r\n\r\n\t\t// Set data fields\r\n\t\tthis.dataFields.multiPoint = \"multiPoint\";\r\n\t\tthis.dataFields.point = \"point\";\r\n\r\n\t\tthis.dataFields.geoPoint = \"geoPoint\";\r\n\t\tthis.dataFields.multiGeoPoint = \"multiGeoPoint\";\r\n\r\n\t\tthis.ignoreBounds = true;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new MapImageSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the data of the sries, effectively forcing it to redraw\r\n\t * all of its elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tif (this.data.length > 0 && this._parseDataFrom == 0) {\r\n\t\t\tthis.mapImages.clear();\r\n\t\t}\r\n\r\n\t\t// process geoJSON and created map objects\r\n\t\tif (this.useGeodata) {\r\n\t\t\tif (this.useGeodata || this.geodata) {\r\n\t\t\t\tlet geoJSON: any = this.chart.geodata;\r\n\r\n\t\t\t\tlet features: any[];\r\n\r\n\t\t\t\tif (geoJSON.type == \"FeatureCollection\") {\r\n\t\t\t\t\tfeatures = geoJSON.features;\r\n\t\t\t\t}\r\n\t\t\t\telse if (geoJSON.type == \"Feature\") {\r\n\t\t\t\t\tfeatures = [geoJSON];\r\n\t\t\t\t}\r\n\t\t\t\telse if ([\"Point\", \"LineString\", \"Polygon\", \"MultiPoint\", \"MultiLineString\", \"MultiPolygon\"].indexOf(geoJSON.type) != -1) {\r\n\t\t\t\t\tfeatures = [{ geometry: geoJSON }];\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tconsole.log(\"nothing found in geoJSON\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (features) {\r\n\t\t\t\t\tfor (let i = 0, len = features.length; i < len; i++) {\r\n\r\n\t\t\t\t\t\tlet feature: any = features[i];\r\n\t\t\t\t\t\tlet geometry: any = feature.geometry;\r\n\t\t\t\t\t\tif (geometry) {\r\n\t\t\t\t\t\t\tlet type: GEOJSONGeometry = <GEOJSONGeometry>geometry.type;\r\n\t\t\t\t\t\t\tlet id: string = feature.id;\r\n\t\t\t\t\t\t\tif (type == \"Point\" || type == \"MultiPoint\") {  // todo: we don't support multipoints at the moment actually\r\n\r\n\t\t\t\t\t\t\t\tif (!this.checkInclude(this.include, this.exclude, id)) {\r\n\t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet coordinates: any[] = geometry.coordinates;\r\n\r\n\t\t\t\t\t\t\t\t// make the same as MultiPoint\r\n\t\t\t\t\t\t\t\tif (type == \"Point\") {\r\n\t\t\t\t\t\t\t\t\tcoordinates = [coordinates];\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet dataObject: IMapImageDataObject = $array.find(this.data, (value, i) => {\r\n\t\t\t\t\t\t\t\t\treturn value.id == id;\r\n\t\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\t\tif (!dataObject) {\r\n\t\t\t\t\t\t\t\t\tdataObject = { multiPoint: coordinates, id: id, madeFromGeoData:true };\r\n\t\t\t\t\t\t\t\t\tthis.data.push(dataObject);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tif (!dataObject.multiPoint) {\r\n\t\t\t\t\t\t\t\t\t\tdataObject.multiPoint = coordinates;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t// copy properties data to datacontext\r\n\t\t\t\t\t\t\t\t$utils.softCopyProperties(feature.properties, dataObject);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\t// important! this should go after super.validateData\r\n\t\t// if data is parsed in chunks, images list is corrupted, fix it here\r\n\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tlet mapImage = dataItem.mapImage;\r\n\t\t\tif (!mapImage.isDisposed()) {\r\n\t\t\t\tthis.mapImages.moveValue(mapImage);\r\n\t\t\t\tif ($type.isNumber(mapImage.latitude) && $type.isNumber(mapImage.latitude)) {\r\n\t\t\t\t\tdataItem.geoPoint = { latitude: mapImage.latitude, longitude: mapImage.longitude }\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * A list of map images in the series.\r\n\t *\r\n\t * @return Map images\r\n\t */\r\n\tpublic get mapImages(): ListTemplate<MapImage> {\r\n\r\n\t\tif (!this._mapImages) {\r\n\t\t\tlet template: MapImage = new MapImage();\r\n\t\t\tlet mapImages = new ListTemplate<MapImage>(template);\r\n\t\t\tthis._disposers.push(new ListDisposer(mapImages));\r\n\t\t\tthis._disposers.push(mapImages.template);\r\n\t\t\tmapImages.template.focusable = true;\r\n\t\t\tmapImages.events.on(\"inserted\", this.handleObjectAdded, this, false);\r\n\t\t\tthis._mapImages = mapImages;\r\n\t\t\tthis._mapObjects = mapImages;\r\n\t\t}\r\n\r\n\t\treturn this._mapImages;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates data element, effectively triggering its redrawal.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]) {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\t\tdataItem.mapImage.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the series\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\t$iter.each(this.mapImages.iterator(), (mapImage) => {\r\n\t\t\tmapImage.validatePosition();\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[Series]].\r\n\t *\r\n\t * @param source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tthis.mapImages.template.copyFrom(source.mapImages.template);\r\n\t\tsuper.copyFrom(source);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic getFeatures(): Array<{ \"type\": \"Feature\", geometry: { type: \"Point\", coordinates: [number, number] } }> {\r\n\t\tlet features: Array<{ \"type\": \"Feature\", geometry: { type: \"Point\", coordinates: [number, number] } }> = [];\r\n\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\tlet feature = dataItem.getFeature();\r\n\t\t\tif (feature) {\r\n\t\t\t\tfeatures.push(feature);\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tthis.mapImages.each((mapImage)=>{\r\n\t\t\tif (this.dataItems.indexOf(mapImage._dataItem) == -1) {\r\n\t\t\t\tlet feature = mapImage.getFeature();\r\n\t\t\t\tif (feature) {\r\n\t\t\t\t\tfeatures.push(feature);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\t\treturn features;\r\n\t}\r\n\r\n\t/**\r\n\t * returns MapImage by id\r\n\t * @param image id\r\n\t * @return {MapImage}\r\n\t */\r\n\tpublic getImageById(id: string): MapImage {\r\n\t\treturn $iter.find(this.mapImages.iterator(), (mapImage) => {\r\n\t\t\tlet dataContext: any = mapImage.dataItem.dataContext;\r\n\t\t\tif(mapImage.id == id || (dataContext && dataContext.id == id)){\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapImageSeries\"] = MapImageSeries;\r\nregistry.registeredClasses[\"MapImageSeriesDataItem\"] = MapImageSeriesDataItem;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}