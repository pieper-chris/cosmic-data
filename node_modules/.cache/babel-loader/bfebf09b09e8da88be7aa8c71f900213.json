{"ast":null,"code":"/**\r\n * A module for the mini-map control.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Container } from \"../../core/Container\";\nimport { Rectangle } from \"../../core/elements/Rectangle\";\nimport { List } from \"../../core/utils/List\";\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\nimport { registry } from \"../../core/Registry\";\nimport { color } from \"../../core/utils/Color\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $type from \"../../core/utils/Type\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Creates a \"bird's eye\" view of the whole map.\r\n *\r\n * This control creates a mini-map with the whole of the map, highlighting\r\n * the area which is in the current viewport of the map map.\r\n *\r\n * @see {@link ISmallMapEvents} for a list of available events\r\n * @see {@link ISmallMapAdapters} for a list of available Adapters\r\n * @important\r\n */\n\nvar SmallMap =\n/** @class */\nfunction (_super) {\n  __extends(SmallMap, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function SmallMap() {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\r\n     * A target map.\r\n     */\n\n\n    _this._chart = new MutableValueDisposer();\n    _this.className = \"SmallMap\"; // Set defaults\n\n    _this.align = \"left\";\n    _this.valign = \"bottom\";\n    _this.percentHeight = 20;\n    _this.percentWidth = 20;\n\n    _this.margin(5, 5, 5, 5);\n\n    var interfaceColors = new InterfaceColorSet(); // Set background defailts\n\n    _this.background.fillOpacity = 0.9;\n    _this.background.fill = interfaceColors.getFor(\"background\"); // Set up events\n\n    _this.events.on(\"hit\", _this.moveToPosition, _this, false);\n\n    _this.events.on(\"maxsizechanged\", _this.updateMapSize, _this, false); // Create a container\n\n\n    _this.seriesContainer = _this.createChild(Container);\n    _this.seriesContainer.shouldClone = false; // Create an outline rectangle\n\n    var rectangle = _this.createChild(Rectangle);\n\n    rectangle.shouldClone = false;\n    rectangle.stroke = interfaceColors.getFor(\"alternativeBackground\");\n    rectangle.strokeWidth = 1;\n    rectangle.strokeOpacity = 0.5;\n    rectangle.fill = color(); //\"none\";\n\n    rectangle.verticalCenter = \"middle\";\n    rectangle.horizontalCenter = \"middle\";\n    rectangle.isMeasured = false;\n    rectangle.visible = false;\n    _this.rectangle = rectangle;\n\n    _this._disposers.push(_this._chart); // Apply theme\n\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  Object.defineProperty(SmallMap.prototype, \"series\", {\n    /**\r\n     * A list of map series used to draw the mini-map.\r\n     *\r\n     * @readonly\r\n     * @return Series\r\n     */\n    get: function () {\n      if (!this._series) {\n        this._series = new List();\n\n        this._series.events.on(\"inserted\", this.handleSeriesAdded, this, false);\n\n        this._series.events.on(\"removed\", this.handleSeriesRemoved, this, false);\n      }\n\n      return this._series;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Decorates a new series when they are pushed into a `series` list.\r\n   *\r\n   * @param event Event\r\n   */\n\n  SmallMap.prototype.handleSeriesAdded = function (event) {\n    var series = event.newValue;\n\n    if (this.chart.series.contains(series)) {\n      var newSeries = series.clone();\n\n      this._series.removeValue(series);\n\n      this._series.push(newSeries);\n\n      series = newSeries;\n      this.chart.dataUsers.push(newSeries);\n    }\n\n    series.chart = this.chart;\n    series.parent = this.seriesContainer;\n    series.interactionsEnabled = false;\n    series.events.on(\"inited\", this.updateMapSize, this, false);\n    series.hidden = false;\n  };\n  /**\r\n   * Cleans up after series are removed from Scrollbar.\r\n   *\r\n   * @param event  Event\r\n   */\n\n\n  SmallMap.prototype.handleSeriesRemoved = function (event) {\n    //let sourceSeries: MapSeries = event.oldValue;\n    this.invalidate();\n  };\n  /**\r\n   * Moves main map pan position after click on the small map.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event  Event\r\n   */\n\n\n  SmallMap.prototype.moveToPosition = function (event) {\n    var rectPoint = $utils.spritePointToSprite(event.spritePoint, this, this.seriesContainer);\n    var geoPoint = this.chart.seriesPointToGeo(rectPoint);\n    this.chart.zoomToGeoPoint(geoPoint, this.chart.zoomLevel, true);\n  };\n\n  Object.defineProperty(SmallMap.prototype, \"chart\", {\n    /**\r\n     * @return Chart/map\r\n     */\n    get: function () {\n      return this._chart.get();\n    },\n\n    /**\r\n     * A chart/map that this control is meant for.\r\n     *\r\n     * @param chart  Chart/map\r\n     */\n    set: function (chart) {\n      if (this.chart != chart) {\n        this._chart.set(chart, new MultiDisposer([//chart.events.on(\"zoomlevelchanged\", this.updateRectangle, this, false),\n        chart.events.on(\"mappositionchanged\", this.updateRectangle, this, false), chart.events.on(\"scaleratiochanged\", this.updateMapSize, this, false)]));\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Updates the viewport recangle as per current map zoom/pan position.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  SmallMap.prototype.updateRectangle = function () {\n    var chart = this.chart;\n    var zoomLevel = chart.zoomLevel;\n    var rectangle = this.rectangle;\n    rectangle.width = this.pixelWidth / zoomLevel;\n    rectangle.height = this.pixelHeight / zoomLevel;\n    var scale = Math.min(this.percentWidth, this.percentHeight) / 100;\n    var seriesContainer = chart.seriesContainer;\n    rectangle.x = Math.ceil(-seriesContainer.pixelX * scale / zoomLevel) + this.seriesContainer.pixelX;\n    rectangle.y = Math.ceil(-seriesContainer.pixelY * scale / zoomLevel) + this.seriesContainer.pixelY;\n    rectangle.validate();\n  };\n  /**\r\n   * Update map size so that internal elements can redraw themselves after\r\n   * the size of the small map changes.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  SmallMap.prototype.updateMapSize = function () {\n    if (this.chart) {\n      var scale = this.chart.scaleRatio * Math.min(this.percentWidth, this.percentHeight) / 100;\n      this.seriesContainer.scale = scale;\n      var bbox = {\n        width: 0,\n        height: 0,\n        x: 0,\n        y: 0\n      };\n\n      try {\n        // Add exception catching to tame FF\n        bbox = this.seriesContainer.group.node.getBBox();\n      } catch (err) {}\n\n      if (bbox.width > 0) {\n        this.rectangle.visible = true;\n      }\n\n      this.seriesContainer.x = this.pixelWidth / 2 - bbox.x * scale - bbox.width / 2 * scale;\n      this.seriesContainer.y = this.pixelHeight / 2 - bbox.y * scale - bbox.height / 2 * scale;\n      this.updateRectangle();\n      this.afterDraw();\n    }\n  };\n  /**\r\n   * Update elements after drawing the small map.\r\n   */\n\n\n  SmallMap.prototype.afterDraw = function () {\n    _super.prototype.afterDraw.call(this); //this.seriesContainer.moveTo({ x: this.pixelWidth / 2, y: this.pixelHeight / 2 });\n\n\n    this.rectangle.maskRectangle = {\n      x: -1,\n      y: -1,\n      width: Math.ceil(this.pixelWidth + 2),\n      height: Math.ceil(this.pixelHeight + 2)\n    };\n  };\n  /**\r\n   * Processes JSON-based config before it is applied to the object.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param config  Config\r\n   */\n\n\n  SmallMap.prototype.processConfig = function (config) {\n    if (config) {\n      // Set up series\n      if ($type.hasValue(config.series) && $type.isArray(config.series)) {\n        for (var i = 0, len = config.series.length; i < len; i++) {\n          var series = config.series[i];\n\n          if ($type.hasValue(series) && $type.isString(series) && this.map.hasKey(series)) {\n            config.series[i] = this.map.getKey(series);\n          }\n        }\n      }\n    }\n\n    _super.prototype.processConfig.call(this, config);\n  };\n\n  return SmallMap;\n}(Container);\n\nexport { SmallMap };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"SmallMap\"] = SmallMap;","map":{"version":3,"sources":["../../../../../src/.internal/charts/map/SmallMap.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * A module for the mini-map control.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { Sprite, ISpriteEvents, AMEvent } from \"../../core/Sprite\";\r\nimport { Rectangle } from \"../../core/elements/Rectangle\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapSeries } from \"./MapSeries\";\r\nimport { List, IListEvents } from \"../../core/utils/List\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[SmallMap]].\r\n */\r\nexport interface ISmallMapProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[SmallMap]].\r\n */\r\nexport interface ISmallMapEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SmallMap]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISmallMapAdapters extends IContainerAdapters, ISmallMapProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a \"bird's eye\" view of the whole map.\r\n *\r\n * This control creates a mini-map with the whole of the map, highlighting\r\n * the area which is in the current viewport of the map map.\r\n *\r\n * @see {@link ISmallMapEvents} for a list of available events\r\n * @see {@link ISmallMapAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class SmallMap extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISmallMapProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISmallMapAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISmallMapEvents;\r\n\r\n\t/**\r\n\t * A target map.\r\n\t */\r\n\tprotected _chart: MutableValueDisposer<MapChart> = new MutableValueDisposer<MapChart>();\r\n\r\n\t/**\r\n\t * A container that holds the visual elements for the mini-map.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic seriesContainer: Container;\r\n\r\n\t/**\r\n\t * The rectangle element which highlights current viewport.\r\n\t */\r\n\tpublic rectangle: Rectangle;\r\n\r\n\t/**\r\n\t * A list of map series used to draw the mini-map.\r\n\t */\r\n\tprotected _series: List<MapSeries>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"SmallMap\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.align = \"left\";\r\n\t\tthis.valign = \"bottom\";\r\n\t\tthis.percentHeight = 20;\r\n\t\tthis.percentWidth = 20;\r\n\t\tthis.margin(5, 5, 5, 5);\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// Set background defailts\r\n\t\tthis.background.fillOpacity = 0.9;\r\n\t\tthis.background.fill = interfaceColors.getFor(\"background\");\r\n\r\n\t\t// Set up events\r\n\t\tthis.events.on(\"hit\", this.moveToPosition, this, false);\r\n\t\tthis.events.on(\"maxsizechanged\", this.updateMapSize, this, false);\r\n\r\n\t\t// Create a container\r\n\t\tthis.seriesContainer = this.createChild(Container);\r\n\t\tthis.seriesContainer.shouldClone = false;\r\n\r\n\t\t// Create an outline rectangle\r\n\t\tlet rectangle: Rectangle = this.createChild(Rectangle);\r\n\t\trectangle.shouldClone = false;\r\n\t\trectangle.stroke = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\trectangle.strokeWidth = 1;\r\n\t\trectangle.strokeOpacity = 0.5;\r\n\t\trectangle.fill = color(); //\"none\";\r\n\t\trectangle.verticalCenter = \"middle\";\r\n\t\trectangle.horizontalCenter = \"middle\";\r\n\t\trectangle.isMeasured = false;\r\n\t\trectangle.visible = false;\t\t\r\n\r\n\t\tthis.rectangle = rectangle;\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * A list of map series used to draw the mini-map.\r\n\t *\r\n\t * @readonly\r\n\t * @return Series\r\n\t */\r\n\tpublic get series(): List<MapSeries> {\r\n\t\tif (!this._series) {\r\n\t\t\tthis._series = new List<MapSeries>();\r\n\t\t\tthis._series.events.on(\"inserted\", this.handleSeriesAdded, this, false);\r\n\t\t\tthis._series.events.on(\"removed\", this.handleSeriesRemoved, this, false);\r\n\t\t}\r\n\t\treturn this._series;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Decorates a new series when they are pushed into a `series` list.\r\n\t *\r\n\t * @param event Event\r\n\t */\r\n\tprotected handleSeriesAdded(event: IListEvents<MapSeries>[\"inserted\"]) {\r\n\t\tlet series: MapSeries = event.newValue;\r\n\t\tif (this.chart.series.contains(series)) {\r\n\t\t\tlet newSeries = series.clone();\r\n\t\t\tthis._series.removeValue(series);\r\n\t\t\tthis._series.push(newSeries);\r\n\t\t\tseries = newSeries;\r\n\r\n\t\t\tthis.chart.dataUsers.push(newSeries);\r\n\t\t}\r\n\t\tseries.chart = this.chart;\r\n\t\tseries.parent = this.seriesContainer;\r\n\t\tseries.interactionsEnabled = false;\r\n\t\tseries.events.on(\"inited\", this.updateMapSize, this, false);\r\n\t\tseries.hidden = false;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Cleans up after series are removed from Scrollbar.\r\n\t *\r\n\t * @param event  Event\r\n\t */\r\n\tprotected handleSeriesRemoved(event: IListEvents<MapSeries>[\"removed\"]) {\r\n\t\t//let sourceSeries: MapSeries = event.oldValue;\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * Moves main map pan position after click on the small map.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event  Event\r\n\t */\r\n\tpublic moveToPosition(event: AMEvent<Sprite, ISpriteEvents>[\"hit\"]) {\r\n\t\tlet rectPoint: IPoint = $utils.spritePointToSprite(event.spritePoint, this, this.seriesContainer);\r\n\t\tlet geoPoint: IGeoPoint = this.chart.seriesPointToGeo(rectPoint);\r\n\t\tthis.chart.zoomToGeoPoint(geoPoint, this.chart.zoomLevel, true);\r\n\t}\r\n\r\n\t/**\r\n\t * A chart/map that this control is meant for.\r\n\t *\r\n\t * @param chart  Chart/map\r\n\t */\r\n\tpublic set chart(chart: MapChart) {\r\n\t\tif (this.chart != chart) {\r\n\t\t\tthis._chart.set(chart, new MultiDisposer([\r\n\t\t\t\t//chart.events.on(\"zoomlevelchanged\", this.updateRectangle, this, false),\r\n\t\t\t\tchart.events.on(\"mappositionchanged\", this.updateRectangle, this, false),\r\n\t\t\t\tchart.events.on(\"scaleratiochanged\", this.updateMapSize, this, false)\r\n\t\t\t]));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Chart/map\r\n\t */\r\n\tpublic get chart(): MapChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the viewport recangle as per current map zoom/pan position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateRectangle(): void {\r\n\t\tlet chart: MapChart = this.chart;\r\n\t\tlet zoomLevel: number = chart.zoomLevel;\r\n\t\tlet rectangle: Rectangle = this.rectangle;\r\n\r\n\t\trectangle.width = this.pixelWidth / zoomLevel;\r\n\t\trectangle.height = this.pixelHeight / zoomLevel;\r\n\r\n\t\tlet scale: number = Math.min(this.percentWidth, this.percentHeight) / 100;\r\n\r\n\t\tlet seriesContainer: Container = chart.seriesContainer;\r\n\r\n\t\trectangle.x = Math.ceil(( - seriesContainer.pixelX) * scale / zoomLevel) + this.seriesContainer.pixelX;\r\n\t\trectangle.y = Math.ceil(( - seriesContainer.pixelY) * scale / zoomLevel) + this.seriesContainer.pixelY;\r\n\r\n\t\trectangle.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Update map size so that internal elements can redraw themselves after\r\n\t * the size of the small map changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateMapSize(): void {\r\n\t\tif (this.chart) {\r\n\t\t\tlet scale = this.chart.scaleRatio * Math.min(this.percentWidth, this.percentHeight) / 100;\r\n\t\t\tthis.seriesContainer.scale = scale;\r\n\r\n\t\t\tlet bbox: IRectangle = {\r\n\t\t\t\twidth: 0,\r\n\t\t\t\theight: 0,\r\n\t\t\t\tx: 0,\r\n\t\t\t\ty: 0\r\n\t\t\t};\r\n\r\n\t\t\ttry { // Add exception catching to tame FF\r\n\t\t\t\tbbox = this.seriesContainer.group.node.getBBox();\r\n\t\t\t} catch (err) { }\r\n\r\n\t\t\tif(bbox.width > 0){\r\n\t\t\t\tthis.rectangle.visible = true;\r\n\t\t\t}\r\n\r\n\t\t\tthis.seriesContainer.x = this.pixelWidth / 2 - bbox.x * scale - bbox.width / 2 * scale;\r\n\t\t\tthis.seriesContainer.y = this.pixelHeight / 2 - bbox.y * scale - bbox.height / 2 * scale;\r\n\r\n\t\t\tthis.updateRectangle();\r\n\t\t\tthis.afterDraw();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Update elements after drawing the small map.\r\n\t */\r\n\tprotected afterDraw(): void {\r\n\t\tsuper.afterDraw();\r\n\t\t//this.seriesContainer.moveTo({ x: this.pixelWidth / 2, y: this.pixelHeight / 2 });\r\n\t\tthis.rectangle.maskRectangle = { x: -1, y: -1, width: Math.ceil(this.pixelWidth + 2), height: Math.ceil(this.pixelHeight + 2) };\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tlet series = config.series[i];\r\n\t\t\t\t\tif ($type.hasValue(series) && $type.isString(series) && this.map.hasKey(series)) {\r\n\t\t\t\t\t\tconfig.series[i] = this.map.getKey(series);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SmallMap\"] = SmallMap;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}