{"ast":null,"code":"/**\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { MapObject } from \"./MapObject\";\nimport { registry } from \"../../core/Registry\";\nimport * as $type from \"../../core/utils/Type\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Used to place an image on the map.\r\n *\r\n * @see {@link IMapImageEvents} for a list of available events\r\n * @see {@link IMapImageAdapters} for a list of available Adapters\r\n */\n\nvar MapImage =\n/** @class */\nfunction (_super) {\n  __extends(MapImage, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function MapImage() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"MapImage\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  Object.defineProperty(MapImage.prototype, \"latitude\", {\n    /**\r\n     * @return Latitude\r\n     */\n    get: function () {\n      var latitude = this.getPropertyValue(\"latitude\");\n\n      if (!$type.isNumber(latitude) && this.dataItem && this.dataItem.geoPoint) {\n        latitude = this.dataItem.geoPoint.latitude;\n      }\n\n      return latitude;\n    },\n\n    /**\r\n     * Latitude image is placed at.\r\n     *\r\n     * @param value  Latitude\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"latitude\", value, false, true);\n      this.updateExtremes();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapImage.prototype, \"longitude\", {\n    /**\r\n     * @return Longitude\r\n     */\n    get: function () {\n      var longitude = this.getPropertyValue(\"longitude\");\n\n      if (!$type.isNumber(longitude) && this.dataItem && this.dataItem.geoPoint) {\n        longitude = this.dataItem.geoPoint.longitude;\n      }\n\n      return longitude;\n    },\n\n    /**\r\n     * Longitude image is placed on.\r\n     *\r\n     * @param value  Longitude\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"longitude\", value, false, true);\n      this.updateExtremes();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Repositions the image to it's current position.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  MapImage.prototype.validatePosition = function () {\n    if ($type.isNumber(this.latitude) && $type.isNumber(this.longitude)) {\n      //this.moveTo(this.series.chart.projection.convert({ latitude: this.latitude, longitude: this.longitude }));\n      var p = this.series.chart.projection.d3Projection([this.longitude, this.latitude]);\n      var visible = this.series.chart.projection.d3Path({\n        type: 'Point',\n        coordinates: [this.longitude, this.latitude]\n      });\n\n      if (!visible) {\n        this.__disabled = true;\n      } else {\n        this.__disabled = false;\n      }\n\n      this.moveTo({\n        x: p[0],\n        y: p[1]\n      });\n    }\n\n    _super.prototype.validatePosition.call(this);\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  MapImage.prototype.getFeature = function () {\n    return {\n      \"type\": \"Feature\",\n      geometry: {\n        type: \"Point\",\n        coordinates: [this.longitude, this.latitude]\n      }\n    };\n  };\n\n  return MapImage;\n}(MapObject);\n\nexport { MapImage };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"MapImage\"] = MapImage;","map":{"version":3,"sources":["../../../../../src/.internal/charts/map/MapImage.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapObject, IMapObjectProperties, IMapObjectAdapters, IMapObjectEvents } from \"./MapObject\";\r\nimport { MapImageSeriesDataItem, MapImageSeries } from \"./MapImageSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[MapImage]].\r\n */\r\nexport interface IMapImageProperties extends IMapObjectProperties {\r\n\r\n\t/**\r\n\t * Latitude of the image location.\r\n\t */\r\n\tlatitude?: number;\r\n\r\n\t/**\r\n\t * Longitude of the mage location.\r\n\t */\r\n\tlongitude?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[MapImage]].\r\n */\r\nexport interface IMapImageEvents extends IMapObjectEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapImage]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapImageAdapters extends IMapObjectAdapters, IMapImageProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to place an image on the map.\r\n *\r\n * @see {@link IMapImageEvents} for a list of available events\r\n * @see {@link IMapImageAdapters} for a list of available Adapters\r\n */\r\nexport class MapImage extends MapObject {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IMapImageProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IMapImageAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IMapImageEvents;\r\n\r\n\t/**\r\n\t * A related data item.\r\n\t */\r\n\tpublic _dataItem: MapImageSeriesDataItem;\r\n\r\n\t/**\r\n\t * A map series this object belongs to.\r\n\t */\r\n\tpublic series: MapImageSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"MapImage\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Latitude image is placed at.\r\n\t *\r\n\t * @param value  Latitude\r\n\t */\r\n\tpublic set latitude(value: number) {\r\n\t\tthis.setPropertyValue(\"latitude\", value, false, true);\r\n\t\tthis.updateExtremes();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Latitude\r\n\t */\r\n\tpublic get latitude(): number {\r\n\t\tlet latitude = this.getPropertyValue(\"latitude\");\r\n\t\t\r\n\t\tif(!$type.isNumber(latitude) && this.dataItem && this.dataItem.geoPoint){\r\n\t\t\tlatitude = this.dataItem.geoPoint.latitude;\r\n\t\t}\t\t\r\n\t\treturn latitude;\t\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Longitude image is placed on.\r\n\t *\r\n\t * @param value  Longitude\r\n\t */\r\n\tpublic set longitude(value: number) {\r\n\t\tthis.setPropertyValue(\"longitude\", value, false, true);\r\n\t\tthis.updateExtremes();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Longitude\r\n\t */\r\n\tpublic get longitude(): number {\r\n\t\tlet longitude = this.getPropertyValue(\"longitude\");\r\n\t\tif(!$type.isNumber(longitude) && this.dataItem && this.dataItem.geoPoint){\r\n\t\t\tlongitude = this.dataItem.geoPoint.longitude;\r\n\t\t}\t\t\r\n\t\treturn longitude;\r\n\t}\r\n\r\n\t/**\r\n\t * Repositions the image to it's current position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validatePosition(): void {\r\n\t\tif ($type.isNumber(this.latitude) && $type.isNumber(this.longitude)) {\r\n\t\t\t//this.moveTo(this.series.chart.projection.convert({ latitude: this.latitude, longitude: this.longitude }));\r\n\t\t\tlet p = this.series.chart.projection.d3Projection([this.longitude, this.latitude]);\r\n\r\n\t\t\tlet visible: any = this.series.chart.projection.d3Path({ type: 'Point', coordinates: [this.longitude, this.latitude] });\r\n\r\n\t\t\tif (!visible) {\r\n\t\t\t\tthis.__disabled = true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.__disabled = false;\r\n\t\t\t}\r\n\r\n\t\t\tthis.moveTo({ x: p[0], y: p[1] });\r\n\t\t}\r\n\t\tsuper.validatePosition();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic getFeature(): { \"type\": \"Feature\", geometry: { type: \"Point\", coordinates: [number, number] } } {\r\n\t\treturn { \"type\": \"Feature\", geometry: { type: \"Point\", coordinates: [this.longitude, this.latitude] } };\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapImage\"] = MapImage;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}