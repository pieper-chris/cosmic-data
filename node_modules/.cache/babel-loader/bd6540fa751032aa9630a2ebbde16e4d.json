{"ast":null,"code":"/**\r\n * A collection of Map-related utility functions.\r\n */\nimport * as $array from \"../../core/utils/Array\";\nimport * as d3geo from \"d3-geo\";\n/**\r\n * Converts a multi-part polygon in X/Y coordinates to a geo-multipolygon in\r\n * geo-points (lat/long).\r\n *\r\n * @param multiPolygon  Source multi-polygon\r\n * @return Geo-multipolygon\r\n */\n\nexport function multiPolygonToGeo(multiPolygon) {\n  return $array.map(multiPolygon, function (polygon) {\n    var surface = polygon[0];\n    var hole = polygon[1]; //let holePoints: Array<IGeoPoint> = [];\n\n    var geoArea = [];\n\n    if (surface) {\n      geoArea.push(multiPointToGeo(surface));\n    }\n\n    if (hole) {\n      geoArea.push(multiPointToGeo(hole));\n    }\n\n    return geoArea;\n  });\n}\n/**\r\n * Converts a multiline in X/Y coordinates to a geo-multiline in geo-points\r\n * (lat/long).\r\n *\r\n * @param multiLine  Source multiline\r\n * @return Geo-multiline\r\n */\n\nexport function multiLineToGeo(multiLine) {\n  return $array.map(multiLine, function (multiLine) {\n    return multiPointToGeo(multiLine);\n  });\n}\n/**\r\n * Converts multiple X/Y points into a lat/long geo-points.\r\n *\r\n * @param points  Source points\r\n * @return Geo-points\r\n */\n\nexport function multiPointToGeo(points) {\n  return $array.map(points, function (point) {\n    return pointToGeo(point);\n  });\n}\n/**\r\n * Converts multiple X/Y points into a lat/long geo-points.\r\n *\r\n * @param points  Source points\r\n * @return Geo-points\r\n */\n\nexport function multiGeoToPoint(geoPoints) {\n  return $array.map(geoPoints, geoToPoint);\n}\n/**\r\n * Converts X/Y point into a lat/long geo-point.\r\n *\r\n * @param point  Source point\r\n * @return Geo-point\r\n */\n\nexport function pointToGeo(point) {\n  return {\n    longitude: point[0],\n    latitude: point[1]\n  };\n}\n/**\r\n * Converts lat/long geo-point into a X/Y point.\r\n *\r\n * @param point  Source geo-point\r\n * @return X/Y point\r\n */\n\nexport function geoToPoint(geoPoint) {\n  return [geoPoint.longitude, geoPoint.latitude];\n}\n/**\r\n * Converts geo line (collection of lat/long coordinates) to screen line (x/y).\r\n *\r\n * @param   multiGeoLine  Source geo line\r\n * @return                Screen line\r\n */\n\nexport function multiGeoLineToMultiLine(multiGeoLine) {\n  return $array.map(multiGeoLine, function (segment) {\n    return $array.map(segment, geoToPoint);\n  });\n}\n/**\r\n * Converts a geo polygon (collection of lat/long coordinates) to screen\r\n * polygon (x/y).\r\n *\r\n * @param   multiGeoPolygon  Source polygon\r\n * @return                   Screen polygon\r\n */\n\nexport function multiGeoPolygonToMultipolygon(multiGeoPolygon) {\n  return $array.map(multiGeoPolygon, function (geoPolygon) {\n    var surface = geoPolygon[0];\n    var hole = geoPolygon[1];\n    var multiPolygon = [];\n\n    if (surface) {\n      multiPolygon.push(multiGeoToPoint(surface));\n    }\n\n    if (hole) {\n      multiPolygon.push(multiGeoToPoint(hole));\n    }\n\n    return multiPolygon;\n  });\n}\n/**\r\n * Returns a set of geographical coordinates for the circle with a center\r\n * at specific lat/long coordinates and radius (in degrees).\r\n *\r\n * @since 4.3.0\r\n * @param   longitude  Center longitude\r\n * @param   latitude   Center latitude\r\n * @param   radius     Radius (degrees)\r\n * @return             Circle coordinates\r\n */\n\nexport function getCircle(longitude, latitude, radius) {\n  return [d3geo.geoCircle().center([longitude, latitude]).radius(radius)().coordinates];\n}\n/**\r\n * Returns a set of screen coordinates that represents a \"background\" area\r\n * between provided extremities.\r\n *\r\n * @since 4.3.0\r\n * @param   north  North latitude\r\n * @param   east   East longitude\r\n * @param   south  South latitude\r\n * @param   west   West longitude\r\n * @return         Polygon\r\n */\n\nexport function getBackground(north, east, south, west) {\n  var multiPolygon = [];\n\n  if (west == -180) {\n    west = -179.9999;\n  }\n\n  if (south == -90) {\n    south = -89.9999;\n  }\n\n  if (north == 90) {\n    north = 89.9999;\n  }\n\n  if (east == 180) {\n    east = 179.9999;\n  }\n\n  var stepLong = Math.min(90, (east - west) / Math.ceil((east - west) / 90));\n  var stepLat = (north - south) / Math.ceil((north - south) / 90);\n\n  for (var ln = west; ln < east; ln = ln + stepLong) {\n    var surface = [];\n    multiPolygon.push([surface]);\n\n    if (ln + stepLong > east) {\n      stepLong = east - ln;\n    }\n\n    for (var ll = ln; ll <= ln + stepLong; ll = ll + 5) {\n      surface.push([ll, north]);\n    }\n\n    for (var lt = north; lt >= south; lt = lt - stepLat) {\n      surface.push([ln + stepLong, lt]);\n    }\n\n    for (var ll = ln + stepLong; ll >= ln; ll = ll - 5) {\n      surface.push([ll, south]);\n    }\n\n    for (var lt = south; lt <= north; lt = lt + stepLat) {\n      surface.push([ln, lt]);\n    }\n  }\n\n  return multiPolygon;\n}","map":{"version":3,"sources":["../../../../../src/.internal/charts/map/MapUtils.ts"],"names":[],"mappings":"AAAA;;;AAWA,OAAO,KAAK,MAAZ,MAAwB,wBAAxB;AACA,OAAO,KAAK,KAAZ,MAAuB,QAAvB;AAEA;;;;;;;;AAQA,OAAM,SAAU,iBAAV,CAA4B,YAA5B,EAAmG;AACxG,SAAO,MAAM,CAAC,GAAP,CAAW,YAAX,EAAyB,UAAC,OAAD,EAAQ;AACvC,QAAI,OAAO,GAA4B,OAAO,CAAC,CAAD,CAA9C;AACA,QAAI,IAAI,GAA4B,OAAO,CAAC,CAAD,CAA3C,CAFuC,CAIvC;;AAEA,QAAM,OAAO,GAAG,EAAhB;;AAEA,QAAI,OAAJ,EAAa;AACZ,MAAA,OAAO,CAAC,IAAR,CAAa,eAAe,CAAC,OAAD,CAA5B;AACA;;AAED,QAAI,IAAJ,EAAU;AACT,MAAA,OAAO,CAAC,IAAR,CAAa,eAAe,CAAC,IAAD,CAA5B;AACA;;AAED,WAAO,OAAP;AACA,GAjBM,CAAP;AAkBA;AAED;;;;;;;;AAOA,OAAM,SAAU,cAAV,CAAyB,SAAzB,EAAkE;AACvE,SAAO,MAAM,CAAC,GAAP,CAAW,SAAX,EAAsB,UAAC,SAAD,EAAU;AACtC,WAAO,eAAe,CAAC,SAAD,CAAtB;AACA,GAFM,CAAP;AAGA;AAED;;;;;;;AAMA,OAAM,SAAU,eAAV,CAA0B,MAA1B,EAAyD;AAC9D,SAAO,MAAM,CAAC,GAAP,CAAW,MAAX,EAAmB,UAAC,KAAD,EAAM;AAC/B,WAAO,UAAU,CAAC,KAAD,CAAjB;AACA,GAFM,CAAP;AAGA;AAGD;;;;;;;AAMA,OAAM,SAAU,eAAV,CAA0B,SAA1B,EAAqD;AAC1D,SAAO,MAAM,CAAC,GAAP,CAAW,SAAX,EAAsB,UAAtB,CAAP;AACA;AAGD;;;;;;;AAMA,OAAM,SAAU,UAAV,CAAqB,KAArB,EAA4C;AACjD,SAAO;AAAE,IAAA,SAAS,EAAE,KAAK,CAAC,CAAD,CAAlB;AAAuB,IAAA,QAAQ,EAAE,KAAK,CAAC,CAAD;AAAtC,GAAP;AACA;AAED;;;;;;;AAMA,OAAM,SAAU,UAAV,CAAqB,QAArB,EAAwC;AAC7C,SAAO,CAAC,QAAQ,CAAC,SAAV,EAAqB,QAAQ,CAAC,QAA9B,CAAP;AACA;AAGD;;;;;;;AAMA,OAAM,SAAU,uBAAV,CAAkC,YAAlC,EAAuE;AAC5E,SAAO,MAAM,CAAC,GAAP,CAAW,YAAX,EAAyB,UAAC,OAAD,EAAQ;AACvC,WAAO,MAAM,CAAC,GAAP,CAAW,OAAX,EAAoB,UAApB,CAAP;AACA,GAFM,CAAP;AAGA;AAED;;;;;;;;AAOA,OAAM,SAAU,6BAAV,CAAwC,eAAxC,EAAoG;AACzG,SAAO,MAAM,CAAC,GAAP,CAAW,eAAX,EAA4B,UAAC,UAAD,EAAW;AAC7C,QAAI,OAAO,GAAG,UAAU,CAAC,CAAD,CAAxB;AACA,QAAI,IAAI,GAAG,UAAU,CAAC,CAAD,CAArB;AAEA,QAAM,YAAY,GAAG,EAArB;;AAEA,QAAI,OAAJ,EAAa;AACZ,MAAA,YAAY,CAAC,IAAb,CAAkB,eAAe,CAAC,OAAD,CAAjC;AACA;;AAED,QAAI,IAAJ,EAAU;AACT,MAAA,YAAY,CAAC,IAAb,CAAkB,eAAe,CAAC,IAAD,CAAjC;AACA;;AAED,WAAO,YAAP;AACA,GAfM,CAAP;AAgBA;AAED;;;;;;;;;;;AAUA,OAAM,SAAU,SAAV,CAAoB,SAApB,EAAuC,QAAvC,EAAyD,MAAzD,EAAuE;AAC5E,SAAO,CAAC,KAAK,CAAC,SAAN,GAAkB,MAAlB,CAAyB,CAAC,SAAD,EAAY,QAAZ,CAAzB,EAAgD,MAAhD,CAAuD,MAAvD,IAAiE,WAAlE,CAAP;AACA;AAED;;;;;;;;;;;;AAWA,OAAM,SAAU,aAAV,CAAwB,KAAxB,EAAuC,IAAvC,EAAqD,KAArD,EAAoE,IAApE,EAAgF;AAErF,MAAI,YAAY,GAA0C,EAA1D;;AAEA,MAAG,IAAI,IAAI,CAAC,GAAZ,EAAgB;AACf,IAAA,IAAI,GAAG,CAAC,QAAR;AACA;;AACD,MAAG,KAAK,IAAI,CAAC,EAAb,EAAgB;AACf,IAAA,KAAK,GAAG,CAAC,OAAT;AACA;;AACD,MAAG,KAAK,IAAI,EAAZ,EAAe;AACd,IAAA,KAAK,GAAG,OAAR;AACA;;AACD,MAAG,IAAI,IAAI,GAAX,EAAe;AACd,IAAA,IAAI,GAAG,QAAP;AACA;;AAGD,MAAI,QAAQ,GAAG,IAAI,CAAC,GAAL,CAAS,EAAT,EAAa,CAAC,IAAI,GAAG,IAAR,IAAgB,IAAI,CAAC,IAAL,CAAU,CAAC,IAAI,GAAG,IAAR,IAAgB,EAA1B,CAA7B,CAAf;AACA,MAAI,OAAO,GAAG,CAAC,KAAK,GAAG,KAAT,IAAkB,IAAI,CAAC,IAAL,CAAU,CAAC,KAAK,GAAG,KAAT,IAAkB,EAA5B,CAAhC;;AAEA,OAAK,IAAI,EAAE,GAAG,IAAd,EAAoB,EAAE,GAAG,IAAzB,EAA+B,EAAE,GAAG,EAAE,GAAG,QAAzC,EAAmD;AAClD,QAAI,OAAO,GAA4B,EAAvC;AACA,IAAA,YAAY,CAAC,IAAb,CAAkB,CAAC,OAAD,CAAlB;;AAEA,QAAG,EAAE,GAAG,QAAL,GAAgB,IAAnB,EAAwB;AACvB,MAAA,QAAQ,GAAG,IAAI,GAAG,EAAlB;AACA;;AAED,SAAK,IAAI,EAAE,GAAG,EAAd,EAAkB,EAAE,IAAI,EAAE,GAAG,QAA7B,EAAuC,EAAE,GAAG,EAAE,GAAG,CAAjD,EAAoD;AACnD,MAAA,OAAO,CAAC,IAAR,CAAa,CAAC,EAAD,EAAK,KAAL,CAAb;AACA;;AAED,SAAK,IAAI,EAAE,GAAG,KAAd,EAAqB,EAAE,IAAI,KAA3B,EAAkC,EAAE,GAAG,EAAE,GAAG,OAA5C,EAAqD;AACpD,MAAA,OAAO,CAAC,IAAR,CAAa,CAAC,EAAE,GAAG,QAAN,EAAgB,EAAhB,CAAb;AACA;;AAED,SAAK,IAAI,EAAE,GAAG,EAAE,GAAG,QAAnB,EAA6B,EAAE,IAAI,EAAnC,EAAuC,EAAE,GAAG,EAAE,GAAG,CAAjD,EAAoD;AACnD,MAAA,OAAO,CAAC,IAAR,CAAa,CAAC,EAAD,EAAK,KAAL,CAAb;AACA;;AAED,SAAK,IAAI,EAAE,GAAG,KAAd,EAAqB,EAAE,IAAI,KAA3B,EAAkC,EAAE,GAAG,EAAE,GAAG,OAA5C,EAAqD;AACpD,MAAA,OAAO,CAAC,IAAR,CAAa,CAAC,EAAD,EAAK,EAAL,CAAb;AACA;AAGD;;AAED,SAAO,YAAP;AACA","sourcesContent":["/**\r\n * A collection of Map-related utility functions.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as d3geo from \"d3-geo\";\r\n\r\n/**\r\n * Converts a multi-part polygon in X/Y coordinates to a geo-multipolygon in\r\n * geo-points (lat/long).\r\n *\r\n * @param multiPolygon  Source multi-polygon\r\n * @return Geo-multipolygon\r\n */\r\n\r\nexport function multiPolygonToGeo(multiPolygon: Array<[Array<[number, number]>, Array<[number, number]>]>): Array<Array<Array<IGeoPoint>>> {\r\n\treturn $array.map(multiPolygon, (polygon) => {\r\n\t\tlet surface: Array<[number, number]> = polygon[0];\r\n\t\tlet hole: Array<[number, number]> = polygon[1];\r\n\r\n\t\t//let holePoints: Array<IGeoPoint> = [];\r\n\r\n\t\tconst geoArea = [];\r\n\r\n\t\tif (surface) {\r\n\t\t\tgeoArea.push(multiPointToGeo(surface));\r\n\t\t}\r\n\r\n\t\tif (hole) {\r\n\t\t\tgeoArea.push(multiPointToGeo(hole));\r\n\t\t}\r\n\r\n\t\treturn geoArea;\r\n\t});\r\n}\r\n\r\n/**\r\n * Converts a multiline in X/Y coordinates to a geo-multiline in geo-points\r\n * (lat/long).\r\n *\r\n * @param multiLine  Source multiline\r\n * @return Geo-multiline\r\n */\r\nexport function multiLineToGeo(multiLine: Array<Array<[number, number]>>): Array<Array<IGeoPoint>> {\r\n\treturn $array.map(multiLine, (multiLine) => {\r\n\t\treturn multiPointToGeo(multiLine);\r\n\t});\r\n}\r\n\r\n/**\r\n * Converts multiple X/Y points into a lat/long geo-points.\r\n *\r\n * @param points  Source points\r\n * @return Geo-points\r\n */\r\nexport function multiPointToGeo(points: Array<[number, number]>): Array<IGeoPoint> {\r\n\treturn $array.map(points, (point) => {\r\n\t\treturn pointToGeo(point);\r\n\t});\r\n}\r\n\r\n\r\n/**\r\n * Converts multiple X/Y points into a lat/long geo-points.\r\n *\r\n * @param points  Source points\r\n * @return Geo-points\r\n */\r\nexport function multiGeoToPoint(geoPoints: Array<IGeoPoint>): Array<[number, number]> {\r\n\treturn $array.map(geoPoints, geoToPoint);\r\n}\r\n\r\n\r\n/**\r\n * Converts X/Y point into a lat/long geo-point.\r\n *\r\n * @param point  Source point\r\n * @return Geo-point\r\n */\r\nexport function pointToGeo(point: [number, number]): IGeoPoint {\r\n\treturn { longitude: point[0], latitude: point[1] }\r\n}\r\n\r\n/**\r\n * Converts lat/long geo-point into a X/Y point.\r\n *\r\n * @param point  Source geo-point\r\n * @return X/Y point\r\n */\r\nexport function geoToPoint(geoPoint: IGeoPoint): [number, number] {\r\n\treturn [geoPoint.longitude, geoPoint.latitude];\r\n}\r\n\r\n\r\n/**\r\n * Converts geo line (collection of lat/long coordinates) to screen line (x/y).\r\n *\r\n * @param   multiGeoLine  Source geo line\r\n * @return                Screen line\r\n */\r\nexport function multiGeoLineToMultiLine(multiGeoLine: Array<Array<IGeoPoint>>): Array<Array<[number, number]>> {\r\n\treturn $array.map(multiGeoLine, (segment) => {\r\n\t\treturn $array.map(segment, geoToPoint);\r\n\t});\r\n}\r\n\r\n/**\r\n * Converts a geo polygon (collection of lat/long coordinates) to screen\r\n * polygon (x/y).\r\n *\r\n * @param   multiGeoPolygon  Source polygon\r\n * @return                   Screen polygon\r\n */\r\nexport function multiGeoPolygonToMultipolygon(multiGeoPolygon: Array<[Array<IGeoPoint>, Array<IGeoPoint>]>): Array<Array<Array<[number, number]>>> {\r\n\treturn $array.map(multiGeoPolygon, (geoPolygon) => {\r\n\t\tlet surface = geoPolygon[0];\r\n\t\tlet hole = geoPolygon[1];\r\n\r\n\t\tconst multiPolygon = [];\r\n\r\n\t\tif (surface) {\r\n\t\t\tmultiPolygon.push(multiGeoToPoint(surface));\r\n\t\t}\r\n\r\n\t\tif (hole) {\r\n\t\t\tmultiPolygon.push(multiGeoToPoint(hole));\r\n\t\t}\r\n\r\n\t\treturn multiPolygon;\r\n\t});\r\n}\r\n\r\n/**\r\n * Returns a set of geographical coordinates for the circle with a center\r\n * at specific lat/long coordinates and radius (in degrees).\r\n *\r\n * @since 4.3.0\r\n * @param   longitude  Center longitude\r\n * @param   latitude   Center latitude\r\n * @param   radius     Radius (degrees)\r\n * @return             Circle coordinates\r\n */\r\nexport function getCircle(longitude: number, latitude: number, radius: number): Array<Array<Array<[number, number]>>> {\r\n\treturn [d3geo.geoCircle().center([longitude, latitude]).radius(radius)().coordinates as Array<Array<[number, number]>>];\r\n}\r\n\r\n/**\r\n * Returns a set of screen coordinates that represents a \"background\" area\r\n * between provided extremities.\r\n *\r\n * @since 4.3.0\r\n * @param   north  North latitude\r\n * @param   east   East longitude\r\n * @param   south  South latitude\r\n * @param   west   West longitude\r\n * @return         Polygon\r\n */\r\nexport function getBackground(north: number, east: number, south: number, west: number): Array<Array<Array<[number, number]>>> {\r\n\r\n\tlet multiPolygon: Array<Array<Array<[number, number]>>> = [];\r\n\r\n\tif(west == -180){\r\n\t\twest = -179.9999;\r\n\t}\r\n\tif(south == -90){\r\n\t\tsouth = -89.9999;\r\n\t}\r\n\tif(north == 90){\r\n\t\tnorth = 89.9999;\r\n\t}\r\n\tif(east == 180){\r\n\t\teast = 179.9999;\r\n\t}\r\n\r\n\r\n\tlet stepLong = Math.min(90, (east - west) / Math.ceil((east - west) / 90));\r\n\tlet stepLat = (north - south) / Math.ceil((north - south) / 90);\r\n\r\n\tfor (let ln = west; ln < east; ln = ln + stepLong) {\r\n\t\tlet surface: Array<[number, number]> = [];\r\n\t\tmultiPolygon.push([surface]);\r\n\r\n\t\tif(ln + stepLong > east){\r\n\t\t\tstepLong = east - ln;\r\n\t\t}\r\n\r\n\t\tfor (let ll = ln; ll <= ln + stepLong; ll = ll + 5) {\r\n\t\t\tsurface.push([ll, north]);\r\n\t\t}\r\n\r\n\t\tfor (let lt = north; lt >= south; lt = lt - stepLat) {\r\n\t\t\tsurface.push([ln + stepLong, lt]);\r\n\t\t}\r\n\r\n\t\tfor (let ll = ln + stepLong; ll >= ln; ll = ll - 5) {\r\n\t\t\tsurface.push([ll, south]);\r\n\t\t}\r\n\r\n\t\tfor (let lt = south; lt <= north; lt = lt + stepLat) {\r\n\t\t\tsurface.push([ln, lt]);\r\n\t\t}\r\n\r\n\r\n\t}\r\n\r\n\treturn multiPolygon;\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}