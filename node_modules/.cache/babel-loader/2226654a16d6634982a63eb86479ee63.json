{"ast":null,"code":"/**\r\n * A collection of GeoJSON format-related utility functions.\r\n */\nimport * as $math from \"../../core/utils/Math\";\nimport * as $array from \"../../core/utils/Array\";\n/**\r\n * Normalizes a geo-point.\r\n *\r\n * @ignore Exclude from docs\r\n * @param geoPoint  Source geo-point\r\n * @return Normalized geo-point\r\n */\n\nexport function normalizePoint(geoPoint) {\n  var longitude = wrapAngleTo180(geoPoint.longitude);\n  var latitude = Math.asin(Math.sin(geoPoint.latitude * $math.RADIANS)) * $math.DEGREES;\n  var latitude180 = wrapAngleTo180(geoPoint.latitude);\n\n  if (Math.abs(latitude180) > 90) {\n    longitude = wrapAngleTo180(longitude + 180);\n  }\n\n  geoPoint.longitude = longitude;\n  geoPoint.latitude = latitude;\n  return geoPoint;\n}\n/**\r\n * Normalizes all points of a geo-line.\r\n *\r\n * @ignore Exclude from docs\r\n * @param multiline  Source geo-line\r\n * @return Normalized geo-line\r\n */\n\nexport function normalizeMultiline(multiline) {\n  $array.each(multiline, function (segment) {\n    $array.each(segment, function (point) {\n      normalizePoint(point);\n    });\n  });\n  return multiline;\n}\n/**\r\n * [wrapAngleTo180 description]\r\n *\r\n * @todo Description\r\n * @ignore Exclude from docs\r\n * @param angle  Angle\r\n * @return Angle\r\n */\n\nexport function wrapAngleTo180(angle) {\n  angle = angle % 360;\n\n  if (angle > 180) {\n    angle -= 360;\n  }\n\n  if (angle < -180) {\n    angle += 360;\n  }\n\n  return angle;\n}\n/**\r\n * Converts a geo point to a regular point object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param geoPoint  Source geo point\r\n * @return Point\r\n */\n\nexport function geoToPoint(geoPoint) {\n  return {\n    x: geoPoint.longitude,\n    y: geoPoint.latitude\n  };\n}","map":{"version":3,"sources":["../../../../../src/.internal/charts/map/Geo.ts"],"names":[],"mappings":"AAAA;;;AAYA,OAAO,KAAK,KAAZ,MAAuB,uBAAvB;AACA,OAAO,KAAK,MAAZ,MAAwB,wBAAxB;AAGA;;;;;;;;AAOA,OAAM,SAAU,cAAV,CAAyB,QAAzB,EAA4C;AACjD,MAAI,SAAS,GAAG,cAAc,CAAC,QAAQ,CAAC,SAAV,CAA9B;AACA,MAAI,QAAQ,GAAG,IAAI,CAAC,IAAL,CAAU,IAAI,CAAC,GAAL,CAAU,QAAQ,CAAC,QAAT,GAAoB,KAAK,CAAC,OAApC,CAAV,IAA2D,KAAK,CAAC,OAAhF;AAEA,MAAI,WAAW,GAAG,cAAc,CAAC,QAAQ,CAAC,QAAV,CAAhC;;AAEA,MAAI,IAAI,CAAC,GAAL,CAAS,WAAT,IAAwB,EAA5B,EAAgC;AAC/B,IAAA,SAAS,GAAG,cAAc,CAAC,SAAS,GAAG,GAAb,CAA1B;AACA;;AAED,EAAA,QAAQ,CAAC,SAAT,GAAqB,SAArB;AACA,EAAA,QAAQ,CAAC,QAAT,GAAoB,QAApB;AAEA,SAAO,QAAP;AACA;AAED;;;;;;;;AAOA,OAAM,SAAU,kBAAV,CAA6B,SAA7B,EAA+D;AACpE,EAAA,MAAM,CAAC,IAAP,CAAY,SAAZ,EAAuB,UAAC,OAAD,EAAQ;AAC9B,IAAA,MAAM,CAAC,IAAP,CAAY,OAAZ,EAAqB,UAAC,KAAD,EAAM;AAC1B,MAAA,cAAc,CAAC,KAAD,CAAd;AACA,KAFD;AAGA,GAJD;AAKA,SAAO,SAAP;AACA;AAED;;;;;;;;;AAQA,OAAM,SAAU,cAAV,CAAyB,KAAzB,EAAsC;AAC3C,EAAA,KAAK,GAAG,KAAK,GAAG,GAAhB;;AAEA,MAAI,KAAK,GAAG,GAAZ,EAAiB;AAChB,IAAA,KAAK,IAAI,GAAT;AACA;;AACD,MAAI,KAAK,GAAG,CAAC,GAAb,EAAkB;AACjB,IAAA,KAAK,IAAI,GAAT;AACA;;AAED,SAAO,KAAP;AACA;AAED;;;;;;;;AAOA,OAAM,SAAU,UAAV,CAAqB,QAArB,EAAwC;AAC7C,SAAO;AAAE,IAAA,CAAC,EAAE,QAAQ,CAAC,SAAd;AAAyB,IAAA,CAAC,EAAE,QAAQ,CAAC;AAArC,GAAP;AACA","sourcesContent":["/**\r\n * A collection of GeoJSON format-related utility functions.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $array from \"../../core/utils/Array\";\r\n\r\n\r\n/**\r\n * Normalizes a geo-point.\r\n *\r\n * @ignore Exclude from docs\r\n * @param geoPoint  Source geo-point\r\n * @return Normalized geo-point\r\n */\r\nexport function normalizePoint(geoPoint: IGeoPoint): IGeoPoint {\r\n\tlet longitude = wrapAngleTo180(geoPoint.longitude);\r\n\tlet latitude = Math.asin(Math.sin((geoPoint.latitude * $math.RADIANS))) * $math.DEGREES;\r\n\r\n\tlet latitude180 = wrapAngleTo180(geoPoint.latitude);\r\n\r\n\tif (Math.abs(latitude180) > 90) {\r\n\t\tlongitude = wrapAngleTo180(longitude + 180);\r\n\t}\r\n\r\n\tgeoPoint.longitude = longitude;\r\n\tgeoPoint.latitude = latitude;\r\n\r\n\treturn geoPoint;\r\n}\r\n\r\n/**\r\n * Normalizes all points of a geo-line.\r\n *\r\n * @ignore Exclude from docs\r\n * @param multiline  Source geo-line\r\n * @return Normalized geo-line\r\n */\r\nexport function normalizeMultiline(multiline: Array<Array<IGeoPoint>>): Array<Array<IGeoPoint>> {\r\n\t$array.each(multiline, (segment) => {\r\n\t\t$array.each(segment, (point) => {\r\n\t\t\tnormalizePoint(point);\r\n\t\t});\r\n\t});\r\n\treturn multiline;\r\n}\r\n\r\n/**\r\n * [wrapAngleTo180 description]\r\n *\r\n * @todo Description\r\n * @ignore Exclude from docs\r\n * @param angle  Angle\r\n * @return Angle\r\n */\r\nexport function wrapAngleTo180(angle: number): number {\r\n\tangle = angle % 360;\r\n\r\n\tif (angle > 180) {\r\n\t\tangle -= 360;\r\n\t}\r\n\tif (angle < -180) {\r\n\t\tangle += 360;\r\n\t}\r\n\r\n\treturn angle;\r\n}\r\n\r\n/**\r\n * Converts a geo point to a regular point object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param geoPoint  Source geo point\r\n * @return Point\r\n */\r\nexport function geoToPoint(geoPoint: IGeoPoint): IPoint {\r\n\treturn { x: geoPoint.longitude, y: geoPoint.latitude };\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}