{"ast":null,"code":"/**\r\n * Graticule (map grid) series functionality.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { MapLineSeries, MapLineSeriesDataItem } from \"./MapLineSeries\";\nimport { Graticule } from \"./Graticule\";\nimport { registry } from \"../../core/Registry\";\nimport * as d3geo from \"d3-geo\";\nimport * as $array from \"../../core/utils/Array\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines a [[DataItem]] for [[GraticuleSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\n\nvar GraticuleSeriesDataItem =\n/** @class */\nfunction (_super) {\n  __extends(GraticuleSeriesDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function GraticuleSeriesDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"GraticuleSeriesDataItem\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  return GraticuleSeriesDataItem;\n}(MapLineSeriesDataItem);\n\nexport { GraticuleSeriesDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * This class is used to create a set of graticules (map grid).\r\n *\r\n * To enable, create like you would create any regular map series:\r\n *\r\n * ```TypeScript\r\n * let graticule = chart.series.push(new am4maps.GraticuleSeries())\r\n * graticule.mapLines.template.line.stroke = am4core.color(\"#000000\");\r\n * graticule.mapLines.template.line.strokeOpacity = 0.1;\r\n * ```\r\n * ```JavaScript\r\n * var graticule = chart.series.push(new am4maps.GraticuleSeries())\r\n * graticule.mapLines.template.line.stroke = am4core.color(\"#000000\");\r\n * graticule.mapLines.template.line.strokeOpacity = 0.1;\r\n * ```\r\n * ```JSON\r\n * {\r\n *   // ...\r\n *   \"series\": [{\r\n *     \"type\": \"GraticuleSeries\",\r\n *     \"mapLines\": {\r\n *       \"line\": {\r\n *         \"stroke\": \"#000000\",\r\n *         \"strokeOpacity\": 0.1\r\n *       }\r\n *     }\r\n *   }]\r\n * }\r\n * ```\r\n *\r\n * @since 4.3.0\r\n * @see {@link IGraticuleSeriesEvents} for a list of available Events\r\n * @see {@link IGraticuleSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\n\nvar GraticuleSeries =\n/** @class */\nfunction (_super) {\n  __extends(GraticuleSeries, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function GraticuleSeries() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"GraticuleSeries\";\n    _this.longitudeStep = 10;\n    _this.latitudeStep = 10;\n    _this.north = 90;\n    _this.south = -90;\n    _this.east = -180;\n    _this.west = 180; //this.majorLatitudeStep = 90;\n    //this.majorLongitudeStep = 360;\n\n    _this.fitExtent = true;\n    _this.singleSprite = true;\n\n    _this.events.disableType(\"geoBoundsChanged\");\n\n    _this.mapLines.template.line.strokeOpacity = 0.08;\n    _this.ignoreBounds = false;\n    _this.hiddenInLegend = true;\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Returns a new/empty DataItem of the type appropriate for this object.\r\n   *\r\n   * @see {@link DataItem}\r\n   * @return Data Item\r\n   */\n\n\n  GraticuleSeries.prototype.createDataItem = function () {\n    return new GraticuleSeriesDataItem();\n  };\n\n  GraticuleSeries.prototype.validateData = function () {\n    var _this = this;\n\n    _super.prototype.validateData.call(this);\n\n    this.mapLines.clear();\n    var graticule = d3geo.geoGraticule();\n\n    if (graticule) {\n      graticule.stepMinor([this.longitudeStep, this.latitudeStep]);\n      graticule.stepMajor([360, 360]);\n      var chart = this.chart;\n\n      if (this.fitExtent) {\n        graticule.extent([[chart.east, chart.north], [chart.west, chart.south]]);\n      } else {\n        graticule.extent([[this.east, this.north], [this.west, this.south]]);\n      }\n\n      if (this.singleSprite) {\n        var mapLine = this.mapLines.create();\n        mapLine.multiLine = graticule().coordinates;\n      } else {\n        var lineStrings = graticule.lines();\n        $array.each(lineStrings, function (lineString) {\n          var mapLine = _this.mapLines.create();\n\n          mapLine.multiLine = [lineString.coordinates];\n        });\n      }\n    }\n  };\n  /**\r\n   * Returns a new line instance of suitable type.\r\n   *\r\n   * @return New line\r\n   */\n\n\n  GraticuleSeries.prototype.createLine = function () {\n    return new Graticule();\n  };\n\n  Object.defineProperty(GraticuleSeries.prototype, \"latitudeStep\", {\n    /**\r\n     * @return Step\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"latitudeStep\");\n    },\n\n    /**\r\n     * Draw a graticule (grid) every X degrees of latitude.\r\n     *\r\n     * @default 10\r\n     * @param  value Step\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"latitudeStep\", value)) {\n        this.invalidateData();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(GraticuleSeries.prototype, \"longitudeStep\", {\n    /**\r\n     * @return Step\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"longitudeStep\");\n    },\n\n    /**\r\n     * Draw a graticule (grid) every X degrees of longitude.\r\n     *\r\n     * @default 10\r\n     * @param  value  Step\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"longitudeStep\", value)) {\n        this.invalidateData();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(GraticuleSeries.prototype, \"fitExtent\", {\n    /**\r\n     * @return Fit?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"fitExtent\");\n    },\n\n    /**\r\n     * Draw a thicker (major) graticule every X degrees of latitude.\r\n     *\r\n     * @default 90\r\n     * @param  value  Step\r\n     */\n    // public set majorLatitudeStep(value: number) {\n    // \tif (this.setPropertyValue(\"majorLatitudeStep\", value)) {\n    // \t\tthis.invalidateData();\n    // \t}\n    // }\n\n    /**\r\n     * @return Step\r\n     */\n    // public get majorLatitudeStep(): number {\n    // \treturn this.getPropertyValue(\"majorLatitudeStep\");\n    // }\n\n    /**\r\n     * Draw a thicker (major) graticule every X degrees of longitude.\r\n     *\r\n     * @default 360\r\n     * @param  value  Step\r\n     */\n    // public set majorLongitudeStep(value: number) {\n    // \tif (this.setPropertyValue(\"majorLongitudeStep\", value)) {\n    // \t\tthis.invalidateData();\n    // \t}\n    // }\n\n    /**\r\n     * @return Step\r\n     */\n    // public get majorLongitudeStep(): number {\n    // \treturn this.getPropertyValue(\"majorLongitudeStep\");\n    // }\n\n    /**\r\n     * Whether to cap graticules (grid) to actual span of the map (`true`), e.g.\r\n     * where there are polygons, or draw full-world grid (`false`).\r\n     *\r\n     * For world maps, using `false` makes sense. For smaller maps - not so much.\r\n     *\r\n     * If set to `false`, the grid will be drawn from this series `east` to\r\n     * `west`, and from `south` to `north` (default values: `east = -180`;\r\n     * `west = 180`; `south =-90`; `north =90`).\r\n     *\r\n     * These can be overridden by setting `GraticuleSeries`' respective\r\n     * properties.\r\n     *\r\n     * @default true\r\n     * @param  value  Fit?\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"fitExtent\", value)) {\n        this.invalidateData();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(GraticuleSeries.prototype, \"singleSprite\", {\n    /**\r\n     * @return Use single sprite?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"singleSprite\");\n    },\n\n    /**\r\n     * Whether to draw all the grid as a single element or as separate lines.\r\n     *\r\n     * Setting `true` (default) will result in better performance, whereas\r\n     * `false` allows setting visual properties of each line individually.\r\n     *\r\n     * @default true\r\n     * @param  value  Use single sprite?\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"singleSprite\", value)) {\n        this.invalidateData();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return GraticuleSeries;\n}(MapLineSeries);\n\nexport { GraticuleSeries };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"GraticuleSeries\"] = GraticuleSeries;\nregistry.registeredClasses[\"GraticuleSeriesDataItem\"] = GraticuleSeriesDataItem;","map":{"version":3,"sources":["../../../../../src/.internal/charts/map/GraticuleSeries.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Graticule (map grid) series functionality.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapLineSeries, MapLineSeriesDataItem, IMapLineSeriesProperties, IMapLineSeriesDataFields, IMapLineSeriesAdapters, IMapLineSeriesEvents } from \"./MapLineSeries\";\r\nimport { Graticule } from \"./Graticule\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as d3geo from \"d3-geo\";\r\nimport * as $array from \"../../core/utils/Array\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[GraticuleSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class GraticuleSeriesDataItem extends MapLineSeriesDataItem {\r\n\r\n\t/**\r\n\t * A [[Graticule]] element related to this data item.\r\n\t */\r\n\tpublic _mapLine: Graticule;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: GraticuleSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"GraticuleSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[GraticuleSeries]].\r\n */\r\nexport interface IGraticuleSeriesDataFields extends IMapLineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[GraticuleSeries]].\r\n */\r\nexport interface IGraticuleSeriesProperties extends IMapLineSeriesProperties {\r\n\t/**\r\n\t * Draw a graticule (grid) every X degrees of latitude.\r\n\t *\r\n\t * @default 10\r\n\t */\r\n\tlatitudeStep?: number;\r\n\r\n\t/**\r\n\t * Draw a graticule (grid) every X degrees of longitude.\r\n\t *\r\n\t * @default 10\r\n\t */\r\n\tlongitudeStep?: number;\r\n\r\n\t/**\r\n\t * Draw a thicker (major) graticule every X degrees of latitude.\r\n\t *\r\n\t * @default 90\r\n\t */\r\n\t// majorLatitudeStep?: number;\r\n\r\n\t/**\r\n\t * Draw a thicker (major) graticule every X degrees of longitude.\r\n\t *\r\n\t * @default 360\r\n\t */\r\n\t// majorLongitudeStep?: number;\r\n\r\n\t/**\r\n\t * Whether to cap graticules (grid) to actual span of the map (`true`), e.g.\r\n\t * where there are polygons, or draw full-world grid (`false`).\r\n\t *\r\n\t * For world maps, using `false` makes sense. For smaller maps - not so much.\r\n\t *\r\n\t * If set to `false`, the grid will be drawn from this series `east` to\r\n\t * `west`, and from `south` to `north` (default values: `east = -180`;\r\n\t * `west = 180`; `south =-90`; `north =90`).\r\n\t *\r\n\t * These can be overridden by setting `GraticuleSeries`' respective\r\n\t * properties.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tfitExtent?: boolean;\r\n\r\n\t/**\r\n\t * Whether to draw all the grid as a single element or as separate lines.\r\n\t *\r\n\t * Setting `true` (default) will result in better performance, whereas\r\n\t * `false` allows setting visual properties of each line individually.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tsingleSprite?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[GraticuleSeries]].\r\n */\r\nexport interface IGraticuleSeriesEvents extends IMapLineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[GraticuleSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IGraticuleSeriesAdapters extends IMapLineSeriesAdapters, IGraticuleSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This class is used to create a set of graticules (map grid).\r\n *\r\n * To enable, create like you would create any regular map series:\r\n *\r\n * ```TypeScript\r\n * let graticule = chart.series.push(new am4maps.GraticuleSeries())\r\n * graticule.mapLines.template.line.stroke = am4core.color(\"#000000\");\r\n * graticule.mapLines.template.line.strokeOpacity = 0.1;\r\n * ```\r\n * ```JavaScript\r\n * var graticule = chart.series.push(new am4maps.GraticuleSeries())\r\n * graticule.mapLines.template.line.stroke = am4core.color(\"#000000\");\r\n * graticule.mapLines.template.line.strokeOpacity = 0.1;\r\n * ```\r\n * ```JSON\r\n * {\r\n *   // ...\r\n *   \"series\": [{\r\n *     \"type\": \"GraticuleSeries\",\r\n *     \"mapLines\": {\r\n *       \"line\": {\r\n *         \"stroke\": \"#000000\",\r\n *         \"strokeOpacity\": 0.1\r\n *       }\r\n *     }\r\n *   }]\r\n * }\r\n * ```\r\n *\r\n * @since 4.3.0\r\n * @see {@link IGraticuleSeriesEvents} for a list of available Events\r\n * @see {@link IGraticuleSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class GraticuleSeries extends MapLineSeries {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IGraticuleSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IGraticuleSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IGraticuleSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IGraticuleSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: GraticuleSeriesDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the line items in this series.\r\n\t */\r\n\tpublic _mapLine: Graticule;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"GraticuleSeries\";\r\n\r\n\t\tthis.longitudeStep = 10;\r\n\r\n\t\tthis.latitudeStep = 10;\r\n\r\n\t\tthis.north = 90;\r\n\t\tthis.south = -90;\r\n\t\tthis.east = -180;\r\n\t\tthis.west = 180;\r\n\r\n\t\t//this.majorLatitudeStep = 90;\r\n\t\t//this.majorLongitudeStep = 360;\r\n\r\n\t\tthis.fitExtent = true;\r\n\r\n\t\tthis.singleSprite = true;\r\n\r\n\t\tthis.events.disableType(\"geoBoundsChanged\");\r\n\r\n\t\tthis.mapLines.template.line.strokeOpacity = 0.08;\r\n\r\n\t\tthis.ignoreBounds = false;\r\n\r\n\t\tthis.hiddenInLegend = true;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new GraticuleSeriesDataItem();\r\n\t}\r\n\r\n\tpublic validateData() {\r\n\t\tsuper.validateData();\r\n\r\n\t\tthis.mapLines.clear();\r\n\r\n\t\tlet graticule = d3geo.geoGraticule();\r\n\r\n\t\tif (graticule) {\r\n\t\t\tgraticule.stepMinor([this.longitudeStep, this.latitudeStep]);\r\n\t\t\tgraticule.stepMajor([360, 360]);\r\n\r\n\t\t\tlet chart = this.chart;\r\n\t\t\tif (this.fitExtent) {\r\n\t\t\t\tgraticule.extent([[chart.east, chart.north], [chart.west, chart.south]]);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tgraticule.extent([[this.east, this.north], [this.west, this.south]]);\r\n\t\t\t}\r\n\r\n\t\t\tif (this.singleSprite) {\r\n\t\t\t\tlet mapLine = this.mapLines.create();\r\n\t\t\t\tmapLine.multiLine = graticule().coordinates as Array<Array<[number, number]>>;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet lineStrings = graticule.lines();\r\n\r\n\t\t\t\t$array.each(lineStrings, (lineString) => {\r\n\t\t\t\t\tlet mapLine = this.mapLines.create();\r\n\t\t\t\t\tmapLine.multiLine = [lineString.coordinates as Array<[number, number]>];\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new line instance of suitable type.\r\n\t *\r\n\t * @return New line\r\n\t */\r\n\tprotected createLine(): this[\"_mapLine\"] {\r\n\t\treturn new Graticule();\r\n\t}\r\n\r\n\t/**\r\n\t * Draw a graticule (grid) every X degrees of latitude.\r\n\t *\r\n\t * @default 10\r\n\t * @param  value Step\r\n\t */\r\n\tpublic set latitudeStep(value: number) {\r\n\t\tif (this.setPropertyValue(\"latitudeStep\", value)) {\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Step\r\n\t */\r\n\tpublic get latitudeStep(): number {\r\n\t\treturn this.getPropertyValue(\"latitudeStep\");\r\n\t}\r\n\r\n\t/**\r\n\t * Draw a graticule (grid) every X degrees of longitude.\r\n\t *\r\n\t * @default 10\r\n\t * @param  value  Step\r\n\t */\r\n\tpublic set longitudeStep(value: number) {\r\n\t\tif (this.setPropertyValue(\"longitudeStep\", value)) {\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Step\r\n\t */\r\n\tpublic get longitudeStep(): number {\r\n\t\treturn this.getPropertyValue(\"longitudeStep\");\r\n\t}\r\n\r\n\t/**\r\n\t * Draw a thicker (major) graticule every X degrees of latitude.\r\n\t *\r\n\t * @default 90\r\n\t * @param  value  Step\r\n\t */\r\n\t// public set majorLatitudeStep(value: number) {\r\n\t// \tif (this.setPropertyValue(\"majorLatitudeStep\", value)) {\r\n\t// \t\tthis.invalidateData();\r\n\t// \t}\r\n\t// }\r\n\r\n\t/**\r\n\t * @return Step\r\n\t */\r\n\t// public get majorLatitudeStep(): number {\r\n\t// \treturn this.getPropertyValue(\"majorLatitudeStep\");\r\n\t// }\r\n\r\n\t/**\r\n\t * Draw a thicker (major) graticule every X degrees of longitude.\r\n\t *\r\n\t * @default 360\r\n\t * @param  value  Step\r\n\t */\r\n\t// public set majorLongitudeStep(value: number) {\r\n\t// \tif (this.setPropertyValue(\"majorLongitudeStep\", value)) {\r\n\t// \t\tthis.invalidateData();\r\n\t// \t}\r\n\t// }\r\n\r\n\t/**\r\n\t * @return Step\r\n\t */\r\n\t// public get majorLongitudeStep(): number {\r\n\t// \treturn this.getPropertyValue(\"majorLongitudeStep\");\r\n\t// }\r\n\r\n\t/**\r\n\t * Whether to cap graticules (grid) to actual span of the map (`true`), e.g.\r\n\t * where there are polygons, or draw full-world grid (`false`).\r\n\t *\r\n\t * For world maps, using `false` makes sense. For smaller maps - not so much.\r\n\t *\r\n\t * If set to `false`, the grid will be drawn from this series `east` to\r\n\t * `west`, and from `south` to `north` (default values: `east = -180`;\r\n\t * `west = 180`; `south =-90`; `north =90`).\r\n\t *\r\n\t * These can be overridden by setting `GraticuleSeries`' respective\r\n\t * properties.\r\n\t *\r\n\t * @default true\r\n\t * @param  value  Fit?\r\n\t */\r\n\tpublic set fitExtent(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"fitExtent\", value)) {\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Fit?\r\n\t */\r\n\tpublic get fitExtent(): boolean {\r\n\t\treturn this.getPropertyValue(\"fitExtent\");\r\n\t}\r\n\r\n\t/**\r\n\t * Whether to draw all the grid as a single element or as separate lines.\r\n\t *\r\n\t * Setting `true` (default) will result in better performance, whereas\r\n\t * `false` allows setting visual properties of each line individually.\r\n\t *\r\n\t * @default true\r\n\t * @param  value  Use single sprite?\r\n\t */\r\n\tpublic set singleSprite(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"singleSprite\", value)) {\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Use single sprite?\r\n\t */\r\n\tpublic get singleSprite(): boolean {\r\n\t\treturn this.getPropertyValue(\"singleSprite\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"GraticuleSeries\"] = GraticuleSeries;\r\nregistry.registeredClasses[\"GraticuleSeriesDataItem\"] = GraticuleSeriesDataItem;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}