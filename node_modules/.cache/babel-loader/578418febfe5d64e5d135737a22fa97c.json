{"ast":null,"code":"/**\r\n * Map line module\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Container } from \"../../core/Container\";\nimport { registry } from \"../../core/Registry\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Draws a line on the map.\r\n *\r\n * @see {@link IMapLineObjectEvents} for a list of available events\r\n * @see {@link IMapLineObjectAdapters} for a list of available Adapters\r\n */\n\nvar MapLineObject =\n/** @class */\nfunction (_super) {\n  __extends(MapLineObject, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function MapLineObject() {\n    var _this = _super.call(this) || this;\n\n    _this.adjustRotation = true;\n    _this.className = \"MapLineObject\";\n    _this.isMeasured = false;\n    _this.layout = \"none\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * (Re)validates element's position.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  MapLineObject.prototype.validatePosition = function () {\n    var mapLine = this.mapLine;\n\n    if (mapLine) {\n      var point = mapLine.positionToPoint(this.position);\n      this.x = point.x;\n      this.y = point.y;\n\n      if (this.adjustRotation) {\n        this.rotation = point.angle;\n      }\n\n      var dataItem = this.mapLine.dataItem;\n\n      if (dataItem) {\n        var series = this.mapLine.dataItem.component;\n        this.scale = 1 / series.scale;\n      } // hide out of bounds\n\n\n      if (mapLine.shortestDistance) {\n        var projection = this.mapLine.series.chart.projection;\n        var geoPoint = projection.positionToGeoPoint(mapLine.multiGeoLine, this.position);\n        var visible = projection.d3Path({\n          type: 'Point',\n          coordinates: [geoPoint.longitude, geoPoint.latitude]\n        });\n\n        if (!visible) {\n          this.__disabled = true;\n        } else {\n          this.__disabled = false;\n        }\n      }\n    }\n\n    _super.prototype.validatePosition.call(this);\n  };\n\n  Object.defineProperty(MapLineObject.prototype, \"position\", {\n    /**\r\n     * @return Position within the line\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"position\");\n    },\n\n    /**\r\n     * Sets object's relative position (0-1) within the line.\r\n     *\r\n     * `0` will place the object at the beginning of the line. `1` - at the end.\r\n     *\r\n     * Any intermediate number will place the object at some point within the\r\n     * line.\r\n     *\r\n     * @param value  Position within the line (0-1)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"position\", value, false, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapLineObject.prototype, \"adjustRotation\", {\n    /**\r\n     * @return Auto-rotate\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"adjustRotation\");\n    },\n\n    /**\r\n     * If set to `true`, the object will be automatically rotated to face the\r\n     * direction of the line at the specific position.\r\n     *\r\n     * This allows creating images that has its \"front\" always facing the logical\r\n     * direction of the line.\r\n     *\r\n     * @default false\r\n     * @param value  Auto-rotate\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"adjustRotation\", value, false, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return MapLineObject;\n}(Container);\n\nexport { MapLineObject };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"MapLineObject\"] = MapLineObject;","map":{"version":3,"sources":["../../../../../src/.internal/charts/map/MapLineObject.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Map line module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { MapLine } from \"./MapLine\";\r\nimport { IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[MapLineObject]].\r\n */\r\nexport interface IMapLineObjectProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Sets object's relative position (0-1) within the line.\r\n\t *\r\n\t * `0` will place the object at the beginning of the line. `1` - at the end.\r\n\t *\r\n\t * Any intermediate number will place the object at some point within the\r\n\t * line.\r\n\t */\r\n\tposition?: number;\r\n\r\n\t/**\r\n\t * If set to `true`, the object will be automatically rotated to face the\r\n\t * direction of the line at the specific position.\r\n\t *\r\n\t * This allows creating images that has its \"front\" always facing the logical\r\n\t * direction of the line.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tadjustRotation?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[MapLineObject]].\r\n */\r\nexport interface IMapLineObjectEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapLineObject]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapLineObjectAdapters extends IContainerAdapters, IMapLineObjectProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws a line on the map.\r\n *\r\n * @see {@link IMapLineObjectEvents} for a list of available events\r\n * @see {@link IMapLineObjectAdapters} for a list of available Adapters\r\n */\r\nexport class MapLineObject extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IMapLineObjectProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IMapLineObjectAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IMapLineObjectEvents;\r\n\r\n\t/**\r\n\t * A reference to the [[MapLine]] object this object is attached to.\r\n\t *\r\n\t * @todo Review if necessary (same as parent)\r\n\t */\r\n\tpublic mapLine: MapLine;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.adjustRotation = true;\r\n\t\tthis.className = \"MapLineObject\";\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.layout = \"none\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates element's position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validatePosition() {\r\n\r\n\t\tlet mapLine = this.mapLine;\r\n\r\n\t\tif (mapLine) {\r\n\r\n\t\t\tlet point: IOrientationPoint = mapLine.positionToPoint(this.position);\r\n\r\n\t\t\tthis.x = point.x;\r\n\t\t\tthis.y = point.y;\r\n\r\n\t\t\tif (this.adjustRotation) {\r\n\t\t\t\tthis.rotation = point.angle;\r\n\t\t\t}\r\n\r\n\t\t\tlet dataItem = this.mapLine.dataItem;\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tlet series = this.mapLine.dataItem.component;\r\n\t\t\t\tthis.scale = 1 / series.scale;\r\n\t\t\t}\r\n\r\n\t\t\t// hide out of bounds\r\n\t\t\tif (mapLine.shortestDistance) {\r\n\r\n\t\t\t\tlet projection = this.mapLine.series.chart.projection;\r\n\r\n\t\t\t\tlet geoPoint = projection.positionToGeoPoint(mapLine.multiGeoLine, this.position);\r\n\r\n\t\t\t\tlet visible: any = projection.d3Path({ type: 'Point', coordinates: [geoPoint.longitude, geoPoint.latitude] });\r\n\r\n\t\t\t\tif (!visible) {\r\n\t\t\t\t\tthis.__disabled = true;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.__disabled = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.validatePosition();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets object's relative position (0-1) within the line.\r\n\t *\r\n\t * `0` will place the object at the beginning of the line. `1` - at the end.\r\n\t *\r\n\t * Any intermediate number will place the object at some point within the\r\n\t * line.\r\n\t *\r\n\t * @param value  Position within the line (0-1)\r\n\t */\r\n\tpublic set position(value: number) {\r\n\t\tthis.setPropertyValue(\"position\", value, false, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Position within the line\r\n\t */\r\n\tpublic get position(): number {\r\n\t\treturn this.getPropertyValue(\"position\");\r\n\t}\r\n\r\n\t/**\r\n\t * If set to `true`, the object will be automatically rotated to face the\r\n\t * direction of the line at the specific position.\r\n\t *\r\n\t * This allows creating images that has its \"front\" always facing the logical\r\n\t * direction of the line.\r\n\t *\r\n\t * @default false\r\n\t * @param value  Auto-rotate\r\n\t */\r\n\tpublic set adjustRotation(value: boolean) {\r\n\t\tthis.setPropertyValue(\"adjustRotation\", value, false, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Auto-rotate\r\n\t */\r\n\tpublic get adjustRotation(): boolean {\r\n\t\treturn this.getPropertyValue(\"adjustRotation\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapLineObject\"] = MapLineObject;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}