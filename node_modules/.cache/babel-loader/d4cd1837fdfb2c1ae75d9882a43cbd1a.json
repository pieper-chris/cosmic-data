{"ast":null,"code":"/**\r\n * Zoom control module\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Container } from \"../../core/Container\";\nimport { Button } from \"../../core/elements/Button\";\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\nimport { keyboard } from \"../../core/utils/Keyboard\";\nimport { getInteraction } from \"../../core/interaction/Interaction\";\nimport { percent } from \"../../core/utils/Percent\";\nimport { registry } from \"../../core/Registry\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Creates a control for zooming the map.\r\n *\r\n * @see {@link IZoomControlEvents} for a list of available events\r\n * @see {@link IZoomControlAdapters} for a list of available Adapters\r\n * @important\r\n */\n\nvar ZoomControl =\n/** @class */\nfunction (_super) {\n  __extends(ZoomControl, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function ZoomControl() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * A target map.\r\n     */\n\n\n    _this._chart = new MutableValueDisposer();\n    _this.className = \"ZoomControl\";\n    _this.align = \"right\";\n    _this.valign = \"bottom\";\n    _this.layout = \"vertical\";\n\n    _this.padding(5, 5, 5, 5);\n\n    var interfaceColors = new InterfaceColorSet();\n\n    var plusButton = _this.createChild(Button);\n\n    plusButton.shouldClone = false;\n    plusButton.label.text = \"+\"; //plusButton.fontFamily = \"Verdana\";\n\n    _this.plusButton = plusButton;\n\n    var slider = _this.createChild(Container);\n\n    slider.shouldClone = false;\n    slider.background.fill = interfaceColors.getFor(\"alternativeBackground\");\n    slider.background.fillOpacity = 0.05;\n    slider.background.events.on(\"hit\", _this.handleBackgroundClick, _this, false);\n    slider.events.on(\"sizechanged\", _this.updateThumbSize, _this, false);\n    _this.slider = slider;\n    var thumb = slider.createChild(Button);\n    thumb.shouldClone = false;\n    thumb.padding(0, 0, 0, 0);\n    thumb.draggable = true;\n    thumb.events.on(\"drag\", _this.handleThumbDrag, _this, false);\n    _this.thumb = thumb;\n\n    var minusButton = _this.createChild(Button);\n\n    minusButton.shouldClone = false;\n    minusButton.label.text = \"-\"; //minusButton.fontFamily = \"Verdana\";\n\n    _this.minusButton = minusButton; // Set roles\n\n    _this.thumb.role = \"slider\";\n    _this.thumb.readerLive = \"polite\"; // Set reader text\n\n    _this.thumb.readerTitle = _this.language.translate(\"Use arrow keys to zoom in and out\");\n    _this.minusButton.readerTitle = _this.language.translate(\"Press ENTER to zoom in\");\n    _this.plusButton.readerTitle = _this.language.translate(\"Press ENTER to zoom out\");\n\n    _this.applyTheme();\n\n    _this.events.on(\"propertychanged\", function (event) {\n      if (event.property == \"layout\") {\n        _this.fixLayout();\n      }\n    }, undefined, false);\n\n    _this._disposers.push(_this._chart);\n\n    _this.fixLayout();\n\n    return _this;\n  }\n  /**\r\n   * @ignore\r\n   */\n\n\n  ZoomControl.prototype.fixLayout = function () {\n    var plusButton = this.plusButton;\n    var minusButton = this.minusButton;\n    var thumb = this.thumb;\n    var slider = this.slider;\n    plusButton.x = undefined;\n    plusButton.y = undefined;\n    minusButton.x = undefined;\n    minusButton.y = undefined;\n    thumb.x = undefined;\n    thumb.y = undefined;\n    slider.x = undefined;\n    slider.y = undefined;\n    plusButton.padding(6, 10, 6, 10);\n    minusButton.padding(6, 10, 6, 10);\n    minusButton.label.align = \"center\";\n    minusButton.label.valign = \"middle\";\n    plusButton.label.align = \"center\";\n    plusButton.label.valign = \"middle\";\n\n    if (this.layout == \"vertical\") {\n      this.width = 40;\n      this.height = undefined;\n      minusButton.width = percent(100);\n      minusButton.height = undefined;\n      thumb.width = percent(100);\n      thumb.height = undefined;\n      plusButton.width = percent(100);\n      plusButton.height = undefined;\n      slider.width = percent(100);\n      minusButton.marginTop = 1;\n      plusButton.marginBottom = 2;\n      slider.height = 0;\n      minusButton.toFront();\n      plusButton.toBack();\n      thumb.minX = 0;\n      thumb.maxX = 0;\n      thumb.minY = 0;\n    } else if (this.layout == \"horizontal\") {\n      this.height = 40;\n      this.width = undefined;\n      minusButton.height = percent(100);\n      minusButton.width = undefined;\n      plusButton.height = percent(100);\n      plusButton.width = undefined;\n      thumb.height = percent(100);\n      thumb.width = undefined;\n      thumb.minX = 0;\n      thumb.minY = 0;\n      thumb.maxY = 0;\n      slider.height = percent(100);\n      slider.width = 0;\n      minusButton.toBack();\n      plusButton.toFront();\n    }\n  };\n  /**\r\n   * Handles zoom operation after clicking on the slider background.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event  Event\r\n   */\n\n\n  ZoomControl.prototype.handleBackgroundClick = function (event) {\n    var sprite = event.target;\n    var y = event.spritePoint.y;\n    var chart = this.chart;\n    var maxPower = Math.log(chart.maxZoomLevel) / Math.LN2;\n    var minPower = Math.log(chart.minZoomLevel) / Math.LN2;\n    var power = (sprite.pixelHeight - y) / sprite.pixelHeight * (minPower + (maxPower - minPower));\n    var zoomLevel = Math.pow(2, power);\n    chart.zoomToGeoPoint(chart.zoomGeoPoint, zoomLevel);\n  };\n\n  Object.defineProperty(ZoomControl.prototype, \"chart\", {\n    /**\r\n     * @return Map/chart\r\n     */\n    get: function () {\n      return this._chart.get();\n    },\n\n    /**\r\n     * A main chart/map that this zoom control is for.\r\n     *\r\n     * @param chart  Map/chart\r\n     */\n    set: function (chart) {\n      var _this = this;\n\n      this._chart.set(chart, new MultiDisposer([chart.events.on(\"maxsizechanged\", this.updateThumbSize, this, false), chart.events.on(\"zoomlevelchanged\", this.updateThumb, this, false), this.minusButton.events.on(\"hit\", function () {\n        chart.zoomOut(chart.zoomGeoPoint);\n      }, chart, false), getInteraction().body.events.on(\"keyup\", function (ev) {\n        if (_this.topParent.hasFocused) {\n          // ENTER is now handled globally\n          if (keyboard.isKey(ev.event, \"plus\")) {\n            chart.zoomIn();\n          } else if (keyboard.isKey(ev.event, \"minus\")) {\n            chart.zoomOut();\n          }\n        }\n      }, chart), this.plusButton.events.on(\"hit\", function () {\n        chart.zoomIn(chart.zoomGeoPoint);\n      }, chart, false)]));\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Updates the slider's thumb size based on the available zoom space.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  ZoomControl.prototype.updateThumbSize = function () {\n    var chart = this.chart;\n\n    if (chart) {\n      var slider = this.slider;\n      var thumb = this.thumb;\n\n      if (this.layout == \"vertical\") {\n        thumb.minHeight = Math.min(this.slider.pixelHeight, 20);\n        thumb.height = slider.pixelHeight / this.stepCount;\n        thumb.maxY = slider.pixelHeight - thumb.pixelHeight;\n\n        if (thumb.pixelHeight <= 1) {\n          thumb.visible = false;\n        } else {\n          thumb.visible = true;\n        }\n      } else {\n        thumb.minWidth = Math.min(this.slider.pixelWidth, 20);\n        thumb.width = slider.pixelWidth / this.stepCount;\n        thumb.maxX = slider.pixelWidth - thumb.pixelWidth;\n\n        if (thumb.pixelWidth <= 1) {\n          thumb.visible = false;\n        } else {\n          thumb.visible = true;\n        }\n      }\n    }\n  };\n  /**\r\n   * Updates thumb according to current zoom position from map.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  ZoomControl.prototype.updateThumb = function () {\n    var slider = this.slider;\n    var chart = this.chart;\n    var thumb = this.thumb;\n\n    if (!thumb.isDown) {\n      var step = (Math.log(chart.zoomLevel) - Math.log(this.chart.minZoomLevel)) / Math.LN2;\n\n      if (this.layout == \"vertical\") {\n        thumb.y = slider.pixelHeight - (slider.pixelHeight - thumb.pixelHeight) * step / this.stepCount - thumb.pixelHeight;\n      } else {\n        thumb.x = slider.pixelWidth * step / this.stepCount;\n      }\n    }\n  };\n  /**\r\n   * Zooms the actual map when slider position changes.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  ZoomControl.prototype.handleThumbDrag = function () {\n    var slider = this.slider;\n    var chart = this.chart;\n    var thumb = this.thumb;\n    var step;\n    var minStep = Math.log(this.chart.minZoomLevel) / Math.LN2;\n\n    if (this.layout == \"vertical\") {\n      step = this.stepCount * (slider.pixelHeight - thumb.pixelY - thumb.pixelHeight) / (slider.pixelHeight - thumb.pixelHeight);\n    } else {\n      step = this.stepCount * thumb.pixelX / slider.pixelWidth;\n    }\n\n    step = minStep + step;\n    var zoomLevel = Math.pow(2, step);\n    chart.zoomToGeoPoint(undefined, zoomLevel, false, 0);\n  };\n\n  Object.defineProperty(ZoomControl.prototype, \"stepCount\", {\n    /**\r\n     * Returns the step countfor the slider grid according to map's min and max\r\n     * zoom level settings.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Step count\r\n     */\n    get: function () {\n      return Math.log(this.chart.maxZoomLevel) / Math.LN2 - Math.log(this.chart.minZoomLevel) / Math.LN2;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Creates a background element for slider control.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @return Background\r\n   */\n\n  ZoomControl.prototype.createBackground = function () {\n    return new RoundedRectangle();\n  };\n\n  return ZoomControl;\n}(Container);\n\nexport { ZoomControl };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"ZoomControl\"] = ZoomControl;","map":{"version":3,"sources":["../../../../../src/.internal/charts/map/ZoomControl.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Zoom control module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite, ISpriteEvents, AMEvent } from \"../../core/Sprite\";\r\nimport { Button } from \"../../core/elements/Button\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { keyboard } from \"../../core/utils/Keyboard\";\r\nimport { getInteraction } from \"../../core/interaction/Interaction\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ZoomControl]].\r\n */\r\nexport interface IZoomControlProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[ZoomControl]].\r\n */\r\nexport interface IZoomControlEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ZoomControl]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IZoomControlAdapters extends IContainerAdapters, IZoomControlProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a control for zooming the map.\r\n *\r\n * @see {@link IZoomControlEvents} for a list of available events\r\n * @see {@link IZoomControlAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class ZoomControl extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IZoomControlProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IZoomControlAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IZoomControlEvents;\r\n\r\n\t/**\r\n\t * Zoom in button element.\r\n\t */\r\n\tpublic plusButton: Button;\r\n\r\n\t/**\r\n\t * Zoom out button element.\r\n\t */\r\n\tpublic minusButton: Button;\r\n\r\n\t/**\r\n\t * A zoom slider background element.\r\n\t */\r\n\tpublic slider: Container;\r\n\r\n\t/**\r\n\t * A zoom slider thumb element.\r\n\t */\r\n\tpublic thumb: Button;\r\n\r\n\t/**\r\n\t * A target map.\r\n\t */\r\n\tprotected _chart: MutableValueDisposer<MapChart> = new MutableValueDisposer<MapChart>();\r\n\r\n\t/**\r\n\t * A type to use for the background element for zoom control.\r\n\t */\r\n\tpublic _background: RoundedRectangle;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ZoomControl\";\r\n\r\n\t\tthis.align = \"right\";\r\n\t\tthis.valign = \"bottom\";\r\n\r\n\t\tthis.layout = \"vertical\";\r\n\t\tthis.padding(5, 5, 5, 5);\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tlet plusButton: Button = this.createChild(Button);\r\n\t\tplusButton.shouldClone = false;\r\n\t\tplusButton.label.text = \"+\";\r\n\t\t//plusButton.fontFamily = \"Verdana\";\r\n\t\tthis.plusButton = plusButton;\r\n\r\n\t\tlet slider: Container = this.createChild(Container);\r\n\t\tslider.shouldClone = false;\r\n\t\tslider.background.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tslider.background.fillOpacity = 0.05;\r\n\t\tslider.background.events.on(\"hit\", this.handleBackgroundClick, this, false);\r\n\t\tslider.events.on(\"sizechanged\", this.updateThumbSize, this, false);\r\n\t\tthis.slider = slider;\r\n\r\n\t\tlet thumb: Button = slider.createChild(Button);\r\n\t\tthumb.shouldClone = false;\r\n\t\tthumb.padding(0, 0, 0, 0);\r\n\t\tthumb.draggable = true;\r\n\t\tthumb.events.on(\"drag\", this.handleThumbDrag, this, false);\r\n\t\tthis.thumb = thumb;\r\n\r\n\t\tlet minusButton: Button = this.createChild(Button);\r\n\t\tminusButton.shouldClone = false;\r\n\t\tminusButton.label.text = \"-\";\r\n\t\t//minusButton.fontFamily = \"Verdana\";\r\n\t\tthis.minusButton = minusButton;\r\n\r\n\t\t// Set roles\r\n\t\tthis.thumb.role = \"slider\";\r\n\t\tthis.thumb.readerLive = \"polite\";\r\n\r\n\t\t// Set reader text\r\n\t\tthis.thumb.readerTitle = this.language.translate(\"Use arrow keys to zoom in and out\");\r\n\t\tthis.minusButton.readerTitle = this.language.translate(\"Press ENTER to zoom in\");\r\n\t\tthis.plusButton.readerTitle = this.language.translate(\"Press ENTER to zoom out\");\r\n\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.events.on(\"propertychanged\", (event) => {\r\n\t\t\tif (event.property == \"layout\") {\r\n\t\t\t\tthis.fixLayout();\r\n\t\t\t}\r\n\t\t}, undefined, false);\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.fixLayout();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected fixLayout() {\r\n\r\n\t\tlet plusButton = this.plusButton;\r\n\t\tlet minusButton = this.minusButton;\r\n\r\n\t\tlet thumb = this.thumb;\r\n\t\tlet slider = this.slider;\r\n\r\n\t\tplusButton.x = undefined;\r\n\t\tplusButton.y = undefined;\r\n\r\n\t\tminusButton.x = undefined;\r\n\t\tminusButton.y = undefined;\r\n\r\n\t\tthumb.x = undefined;\r\n\t\tthumb.y = undefined;\r\n\r\n\t\tslider.x = undefined;\r\n\t\tslider.y = undefined;\r\n\r\n\t\tplusButton.padding(6, 10, 6, 10);\r\n\t\tminusButton.padding(6, 10, 6, 10);\r\n\r\n\t\tminusButton.label.align = \"center\";\r\n\t\tminusButton.label.valign = \"middle\";\r\n\r\n\t\tplusButton.label.align = \"center\";\r\n\t\tplusButton.label.valign = \"middle\";\r\n\r\n\t\tif (this.layout == \"vertical\") {\r\n\t\t\tthis.width = 40;\r\n\t\t\tthis.height = undefined;\r\n\r\n\t\t\tminusButton.width = percent(100);\r\n\t\t\tminusButton.height = undefined;\r\n\r\n\t\t\tthumb.width = percent(100);\r\n\t\t\tthumb.height = undefined;\r\n\r\n\t\t\tplusButton.width = percent(100);\r\n\t\t\tplusButton.height = undefined;\r\n\r\n\t\t\tslider.width = percent(100);\r\n\t\t\tminusButton.marginTop = 1;\r\n\t\t\tplusButton.marginBottom = 2;\r\n\r\n\t\t\tslider.height = 0;\r\n\r\n\t\t\tminusButton.toFront();\r\n\t\t\tplusButton.toBack();\r\n\r\n\t\t\tthumb.minX = 0;\r\n\t\t\tthumb.maxX = 0;\r\n\t\t\tthumb.minY = 0;\r\n\r\n\r\n\t\t}\r\n\t\telse if (this.layout == \"horizontal\") {\r\n\t\t\tthis.height = 40;\r\n\t\t\tthis.width = undefined;\r\n\r\n\t\t\tminusButton.height = percent(100);\r\n\t\t\tminusButton.width = undefined;\r\n\r\n\t\t\tplusButton.height = percent(100);\r\n\t\t\tplusButton.width = undefined;\r\n\r\n\t\t\tthumb.height = percent(100);\r\n\t\t\tthumb.width = undefined;\r\n\r\n\t\t\tthumb.minX = 0;\r\n\t\t\tthumb.minY = 0;\r\n\t\t\tthumb.maxY = 0;\r\n\r\n\t\t\tslider.height = percent(100);\r\n\t\t\tslider.width = 0;\r\n\r\n\t\t\tminusButton.toBack();\r\n\t\t\tplusButton.toFront();\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Handles zoom operation after clicking on the slider background.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event  Event\r\n\t */\r\n\tpublic handleBackgroundClick(event: AMEvent<Sprite, ISpriteEvents>[\"hit\"]): void {\r\n\t\tlet sprite: Sprite = event.target;\r\n\t\tlet y: number = event.spritePoint.y;\r\n\t\tlet chart: MapChart = this.chart;\r\n\r\n\t\tlet maxPower: number = Math.log(chart.maxZoomLevel) / Math.LN2;\r\n\t\tlet minPower: number = Math.log(chart.minZoomLevel) / Math.LN2;\r\n\r\n\t\tlet power: number = (sprite.pixelHeight - y) / sprite.pixelHeight * (minPower + (maxPower - minPower));\r\n\t\tlet zoomLevel: number = Math.pow(2, power);\r\n\t\tchart.zoomToGeoPoint(chart.zoomGeoPoint, zoomLevel);\r\n\t}\r\n\r\n\t/**\r\n\t * A main chart/map that this zoom control is for.\r\n\t *\r\n\t * @param chart  Map/chart\r\n\t */\r\n\tpublic set chart(chart: MapChart) {\r\n\t\tthis._chart.set(chart, new MultiDisposer([\r\n\t\t\tchart.events.on(\"maxsizechanged\", this.updateThumbSize, this, false),\r\n\t\t\tchart.events.on(\"zoomlevelchanged\", this.updateThumb, this, false),\r\n\r\n\t\t\tthis.minusButton.events.on(\"hit\", () => { chart.zoomOut(chart.zoomGeoPoint) }, chart, false),\r\n\r\n\t\t\tgetInteraction().body.events.on(\"keyup\", (ev) => {\r\n\t\t\t\tif (this.topParent.hasFocused) {\r\n\t\t\t\t\t// ENTER is now handled globally\r\n\t\t\t\t\tif (keyboard.isKey(ev.event, \"plus\")) {\r\n\t\t\t\t\t\tchart.zoomIn();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (keyboard.isKey(ev.event, \"minus\")) {\r\n\t\t\t\t\t\tchart.zoomOut();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}, chart),\r\n\t\t\tthis.plusButton.events.on(\"hit\", () => { chart.zoomIn(chart.zoomGeoPoint) }, chart, false)\r\n\t\t]));\r\n\t}\r\n\r\n\t/**\r\n\t * @return Map/chart\r\n\t */\r\n\tpublic get chart(): MapChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the slider's thumb size based on the available zoom space.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateThumbSize(): void {\r\n\t\tlet chart = this.chart;\r\n\t\tif (chart) {\r\n\t\t\tlet slider: Container = this.slider;\r\n\t\t\tlet thumb: Button = this.thumb;\r\n\t\t\tif (this.layout == \"vertical\") {\r\n\t\t\t\tthumb.minHeight = Math.min(this.slider.pixelHeight, 20);\r\n\r\n\t\t\t\tthumb.height = slider.pixelHeight / this.stepCount;\r\n\t\t\t\tthumb.maxY = slider.pixelHeight - thumb.pixelHeight;\r\n\r\n\t\t\t\tif (thumb.pixelHeight <= 1) {\r\n\t\t\t\t\tthumb.visible = false;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthumb.visible = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthumb.minWidth = Math.min(this.slider.pixelWidth, 20);\r\n\t\t\t\tthumb.width = slider.pixelWidth / this.stepCount;\r\n\t\t\t\tthumb.maxX = slider.pixelWidth - thumb.pixelWidth;\r\n\r\n\t\t\t\tif (thumb.pixelWidth <= 1) {\r\n\t\t\t\t\tthumb.visible = false;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthumb.visible = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates thumb according to current zoom position from map.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateThumb(): void {\r\n\t\tlet slider: Container = this.slider;\r\n\t\tlet chart: MapChart = this.chart;\r\n\t\tlet thumb: Button = this.thumb;\r\n\r\n\t\tif (!thumb.isDown) {\r\n\t\t\tlet step: number = (Math.log(chart.zoomLevel) - Math.log(this.chart.minZoomLevel)) / Math.LN2;\r\n\r\n\t\t\tif (this.layout == \"vertical\") {\r\n\t\t\t\tthumb.y = slider.pixelHeight - (slider.pixelHeight - thumb.pixelHeight) * step / this.stepCount - thumb.pixelHeight;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthumb.x = slider.pixelWidth * step / this.stepCount;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the actual map when slider position changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleThumbDrag(): void {\r\n\t\tlet slider: Container = this.slider;\r\n\t\tlet chart: MapChart = this.chart;\r\n\t\tlet thumb: Button = this.thumb;\r\n\t\tlet step: number;\r\n\r\n\t\tlet minStep = Math.log(this.chart.minZoomLevel) / Math.LN2;\r\n\r\n\t\tif (this.layout == \"vertical\") {\r\n\t\t\tstep = this.stepCount * (slider.pixelHeight - thumb.pixelY - thumb.pixelHeight) / (slider.pixelHeight - thumb.pixelHeight);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstep = this.stepCount * thumb.pixelX / slider.pixelWidth;\r\n\t\t}\r\n\t\tstep = minStep + step;\r\n\r\n\t\tlet zoomLevel: number = Math.pow(2, step);\r\n\t\tchart.zoomToGeoPoint(undefined, zoomLevel, false, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the step countfor the slider grid according to map's min and max\r\n\t * zoom level settings.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Step count\r\n\t */\r\n\tpublic get stepCount(): number {\r\n\t\treturn Math.log(this.chart.maxZoomLevel) / Math.LN2 - Math.log(this.chart.minZoomLevel) / Math.LN2;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a background element for slider control.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Background\r\n\t */\r\n\tpublic createBackground(): this[\"_background\"] {\r\n\t\treturn new RoundedRectangle();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ZoomControl\"] = ZoomControl;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}