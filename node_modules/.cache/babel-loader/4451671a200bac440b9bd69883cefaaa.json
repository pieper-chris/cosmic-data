{"ast":null,"code":"/**\r\n * Map polygon series module\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { MapSeries, MapSeriesDataItem } from \"./MapSeries\";\nimport { MapPolygon } from \"./MapPolygon\";\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\nimport { registry } from \"../../core/Registry\";\nimport * as $mapUtils from \"./MapUtils\";\nimport * as $array from \"../../core/utils/Array\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport { Disposer } from \"../../core/utils/Disposer\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines a [[DataItem]] for [[MapPolygonSeries]]\r\n * @see {@link DataItem}\r\n */\n\nvar MapPolygonSeriesDataItem =\n/** @class */\nfunction (_super) {\n  __extends(MapPolygonSeriesDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function MapPolygonSeriesDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"MapPolygonSeriesDataItem\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * @ignore\r\n   */\n\n\n  MapPolygonSeriesDataItem.prototype.getFeature = function () {\n    if (this.multiPolygon && this.multiPolygon.length > 0) {\n      return {\n        \"type\": \"Feature\",\n        geometry: {\n          type: \"MultiPolygon\",\n          coordinates: this.multiPolygon\n        }\n      };\n    }\n  };\n\n  Object.defineProperty(MapPolygonSeriesDataItem.prototype, \"mapPolygon\", {\n    /**\r\n     * A [[MapPolygon]] element related to this data item.\r\n     *\r\n     * @readonly\r\n     * @return Element\r\n     */\n    get: function () {\n      var _this = this;\n\n      if (!this._mapPolygon) {\n        var mapPolygon_1 = this.component.mapPolygons.create();\n        this._mapPolygon = mapPolygon_1;\n        this.addSprite(mapPolygon_1);\n\n        this._disposers.push(new Disposer(function () {\n          if (_this.component) {\n            _this.component.mapPolygons.removeValue(mapPolygon_1);\n          }\n        }));\n\n        this.mapObject = mapPolygon_1;\n      }\n\n      return this._mapPolygon;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapPolygonSeriesDataItem.prototype, \"polygon\", {\n    /**\r\n     * @return Coordinates\r\n     */\n    get: function () {\n      return this._polygon;\n    },\n\n    /**\r\n     * A collection of X/Y coordinates for a single polygon. E.g.:\r\n     *\r\n     * ```JSON\r\n     * [\r\n     *   [\r\n     *     [ 100, 150 ],\r\n     *     [ 120, 200 ],\r\n     *     [ 150, 200 ],\r\n     *     [ 170, 240 ],\r\n     *     [ 100, 150 ]\r\n     *   ]\r\n     * ]\r\n     * ```\r\n     *\r\n     * @param polygon  Coordinates\r\n     */\n    set: function (polygon) {\n      this._polygon = polygon;\n      this.multiPolygon = [polygon];\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapPolygonSeriesDataItem.prototype, \"multiPolygon\", {\n    /**\r\n     * @return Coordinates\r\n     */\n    get: function () {\n      return this._multiPolygon;\n    },\n\n    /**\r\n     * A collection of X/Y coordinates for a multi-part polygon. E.g.:\r\n     *\r\n     * ```JSON\r\n     * [\r\n     *   // Part 1\r\n     *   [\r\n     *     [\r\n     *       [ 100, 150 ],\r\n     *       [ 120, 200 ],\r\n     *       [ 150, 220 ],\r\n     *       [ 170, 240 ],\r\n     *       [ 100, 150 ]\r\n     *     ]\r\n     *   ],\r\n     *\r\n     *   // Part 2\r\n     *   [\r\n     *     [\r\n     *       [ 300, 350 ],\r\n     *       [ 320, 400 ],\r\n     *       [ 350, 420 ],\r\n     *       [ 370, 440 ],\r\n     *       [ 300, 350 ]\r\n     *     ]\r\n     *   ]\r\n     * ]\r\n     * ```\r\n     *\r\n     * @param multiPolygon  Coordinates\r\n     */\n    set: function (multiPolygon) {\n      this._multiPolygon = multiPolygon;\n      this.updateExtremes();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapPolygonSeriesDataItem.prototype, \"geoPolygon\", {\n    /**\r\n     * @return Coordinates\r\n     */\n    get: function () {\n      return this._geoPolygon;\n    },\n\n    /**\r\n     * A collection of lat/long coordinates for a single polygon. E.g.:\r\n     *\r\n     * ```JSON\r\n     * [\r\n     *   [\r\n     *     { latitude: -10.0, longitude: -10.0 },\r\n     *     { latitude: 10.0, longitude: -10.0 },\r\n     *     { latitude: 10.0, longitude: 10.0 },\r\n     *     { latitude: -10.0, longitude: -10.0 }\r\n     *   ]\r\n     * ]\r\n     * ```\r\n     *\r\n     * @see {@link https://tools.ietf.org/html/rfc7946#section-3.1.6} GeoJSON Polygon reference\r\n     * @param geoPolygon  Coordinates\r\n     */\n    set: function (geoPolygon) {\n      this._geoPolygon = geoPolygon;\n      this.multiGeoPolygon = [geoPolygon];\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapPolygonSeriesDataItem.prototype, \"multiGeoPolygon\", {\n    /**\r\n     * @return Coordinates\r\n     */\n    get: function () {\n      return this._multiGeoPolygon;\n    },\n\n    /**\r\n     * A collection of lat/long coordinates for a multi-part polygon. E.g.:\r\n     *\r\n     * ```JSON\r\n     * [\r\n     *   [\r\n     *     [\r\n     *       { longitude: 180.0, latitude: 40.0 },\r\n     *       { longitude: 180.0, latitude: 50.0 },\r\n     *       { longitude: 170.0, latitude: 50.0 },\r\n     *       { longitude: 170.0, latitude: 40.0 },\r\n     *       { longitude: 180.0, latitude: 40.0 }\r\n     *     ]\r\n     *   ],\r\n     *   [\r\n     *     [\r\n     *       { longitude: -170.0, latitude: 40.0 },\r\n     *       { longitude: -170.0, latitude: 50.0 },\r\n     *       { longitude: -180.0, latitude: 50.0 },\r\n     *       { longitude: -180.0, latitude: 40.0 },\r\n     *       { longitude: -170.0, latitude: 40.0 }\r\n     *     ]\r\n     *   ]\r\n     * ]\r\n     * ```\r\n     *\r\n     * @see {@link https://tools.ietf.org/html/rfc7946#section-3.1.7} GeoJSON MultiPolygon reference\r\n     * @param multiGeoPolygon  Coordinates\r\n     */\n    set: function (multiGeoPolygon) {\n      this._multiGeoPolygon = multiGeoPolygon;\n      this.multiPolygon = $mapUtils.multiGeoPolygonToMultipolygon(multiGeoPolygon);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return MapPolygonSeriesDataItem;\n}(MapSeriesDataItem);\n\nexport { MapPolygonSeriesDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * A series of map polygon elements.\r\n *\r\n * @see {@link IMapPolygonSeriesEvents} for a list of available Events\r\n * @see {@link IMapPolygonSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\n\nvar MapPolygonSeries =\n/** @class */\nfunction (_super) {\n  __extends(MapPolygonSeries, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function MapPolygonSeries() {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\r\n     * Indicates if series should automatically calculate visual center of the\r\n     * polygons (accessible via `visualLongitude` and `visualLatitude` properties\r\n     * of the [[MapPolygon]]).\r\n     *\r\n     * @default false\r\n     * @since 4.3.0\r\n     */\n\n\n    _this.calculateVisualCenter = false;\n    _this.className = \"MapPolygonSeries\"; // Set data fields\n\n    _this.dataFields.multiPolygon = \"multiPolygon\";\n    _this.dataFields.polygon = \"polygon\";\n    _this.dataFields.geoPolygon = \"geoPolygon\";\n    _this.dataFields.multiGeoPolygon = \"multiGeoPolygon\";\n\n    _this.setPropertyValue(\"sortPolygonsBy\", \"area\");\n\n    _this.setPropertyValue(\"sortPolygonsReversed\", false); // Apply theme\n\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Returns a new/empty DataItem of the type appropriate for this object.\r\n   *\r\n   * @see {@link DataItem}\r\n   * @return Data Item\r\n   */\n\n\n  MapPolygonSeries.prototype.createDataItem = function () {\n    return new MapPolygonSeriesDataItem();\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  MapPolygonSeries.prototype.processIncExc = function () {\n    this.mapPolygons.clear();\n\n    _super.prototype.processIncExc.call(this);\n  };\n  /**\r\n   * (Re)validates series data, effectively causing the whole series to be\r\n   * redrawn.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  MapPolygonSeries.prototype.validateData = function () {\n    // process geoJSON and created map objects\n    if (this.useGeodata || this.geodata) {\n      var geoJSON = !this._dataSources[\"geodata\"] ? this.chart.geodata : undefined;\n\n      if (this.geodata) {\n        geoJSON = this.geodata;\n      }\n\n      if (geoJSON) {\n        var features = void 0;\n\n        if (geoJSON.type == \"FeatureCollection\") {\n          features = geoJSON.features;\n        } else if (geoJSON.type == \"Feature\") {\n          features = [geoJSON];\n        } else if ([\"Point\", \"LineString\", \"Polygon\", \"MultiPoint\", \"MultiLineString\", \"MultiPolygon\"].indexOf(geoJSON.type) != -1) {\n          features = [{\n            geometry: geoJSON\n          }];\n        } else {\n          console.log(\"nothing found in geoJSON\");\n        }\n\n        if (features) {\n          var _loop_1 = function (i, len) {\n            var feature = features[i];\n            var geometry = feature.geometry;\n\n            if (geometry) {\n              var type = geometry.type;\n              var id_1 = feature.id;\n\n              if (this_1.chart.geodataNames && this_1.chart.geodataNames[id_1]) {\n                feature.properties.name = this_1.chart.geodataNames[id_1];\n              }\n\n              if (type == \"Polygon\" || type == \"MultiPolygon\") {\n                if (!this_1.checkInclude(this_1.include, this_1.exclude, id_1)) {\n                  return \"continue\";\n                }\n\n                var coordinates = geometry.coordinates;\n\n                if (coordinates) {\n                  // make the same as MultiPolygon\n                  if (type == \"Polygon\") {\n                    coordinates = [coordinates];\n                  }\n                } // find data object in user-provided data\n\n\n                var dataObject = $array.find(this_1.data, function (value, i) {\n                  return value.id == id_1;\n                }); // create one if not found\n\n                if (!dataObject) {\n                  dataObject = {\n                    multiPolygon: coordinates,\n                    id: id_1,\n                    madeFromGeoData: true\n                  };\n                  this_1.data.push(dataObject);\n                } // in case found\n                else {\n                    // if user-provided object doesn't have points data provided in any way:\n                    if (!dataObject.multiPolygon) {\n                      dataObject.multiPolygon = coordinates;\n                    }\n                  } // copy properties data to datacontext\n\n\n                $utils.softCopyProperties(feature.properties, dataObject);\n              }\n            }\n          };\n\n          var this_1 = this;\n\n          for (var i = 0, len = features.length; i < len; i++) {\n            _loop_1(i, len);\n          }\n        }\n      }\n    }\n\n    _super.prototype.validateData.call(this);\n  };\n  /**\r\n   * (Re)validates the series\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  MapPolygonSeries.prototype.validate = function () {\n    _super.prototype.validate.call(this);\n\n    this.dataItems.each(function (dataItem) {\n      $utils.used(dataItem.mapPolygon);\n    });\n\n    if (this.sortPolygonsBy != \"none\") {\n      var sortBy_1 = this.sortPolygonsBy;\n      var reversed_1 = this.sortPolygonsReversed;\n      this.mapPolygons.sort(function (a, b) {\n        var valA = \"\";\n        var valB = \"\";\n        var dirA = -1;\n        var dirB = 1;\n\n        switch (sortBy_1) {\n          case \"area\":\n            valA = a.boxArea;\n            valB = b.boxArea;\n            dirA = -1;\n            dirB = 1;\n            break;\n\n          case \"name\":\n            valA = a.dataItem.dataContext.name || \"\";\n            valB = b.dataItem.dataContext.name || \"\";\n            dirA = 1;\n            dirB = -1;\n            break;\n\n          case \"id\":\n            valA = a.dataItem.dataContext.id || \"\";\n            valB = b.dataItem.dataContext.id || \"\";\n            dirA = 1;\n            dirB = -1;\n            break;\n\n          case \"latitude\":\n            valA = reversed_1 ? a.south : a.north;\n            valB = reversed_1 ? b.south : b.north;\n            dirA = -1;\n            dirB = 1;\n            break;\n\n          case \"longitude\":\n            valA = reversed_1 ? a.east : a.west;\n            valB = reversed_1 ? b.east : b.west;\n            dirA = 1;\n            dirB = -1;\n            break;\n        }\n\n        if (valA < valB) {\n          return reversed_1 ? dirB : dirA;\n        }\n\n        if (valA > valB) {\n          return reversed_1 ? dirA : dirB;\n        }\n\n        return 0;\n      });\n      this.mapPolygons.each(function (mapPolygon, index) {\n        mapPolygon.validate(); // makes small go first to avoid hover problems with IE\n\n        if (!mapPolygon.zIndex && !mapPolygon.propertyFields.zIndex) {\n          mapPolygon.zIndex = 1000000 - index;\n        }\n      });\n    }\n  };\n\n  Object.defineProperty(MapPolygonSeries.prototype, \"mapPolygons\", {\n    /**\r\n     * List of polygon elements in the series.\r\n     *\r\n     * @return Polygon list\r\n     */\n    get: function () {\n      if (!this._mapPolygons) {\n        var polygonTemplate = new MapPolygon();\n        var mapPolygons = new ListTemplate(polygonTemplate);\n\n        this._disposers.push(new ListDisposer(mapPolygons));\n\n        this._disposers.push(mapPolygons.template);\n\n        mapPolygons.template.focusable = true;\n        mapPolygons.events.on(\"inserted\", this.handleObjectAdded, this, false);\n        this._mapPolygons = mapPolygons;\n        this._mapObjects = mapPolygons;\n      }\n\n      return this._mapPolygons;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * returns MapPolygon by id in geoJSON file\r\n   * @param polygon id\r\n   * @return {MapPolygon}\r\n   */\n\n  MapPolygonSeries.prototype.getPolygonById = function (id) {\n    return $iter.find(this.mapPolygons.iterator(), function (mapPolygon) {\n      var dataContext = mapPolygon.dataItem.dataContext;\n      return dataContext.id == id;\n    });\n  };\n  /**\r\n   * Copies all properties from another instance of [[Series]].\r\n   *\r\n   * @param source  Source series\r\n   */\n\n\n  MapPolygonSeries.prototype.copyFrom = function (source) {\n    this.mapPolygons.template.copyFrom(source.mapPolygons.template);\n\n    _super.prototype.copyFrom.call(this, source);\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  MapPolygonSeries.prototype.getFeatures = function () {\n    var _this = this;\n\n    var features = [];\n    this.dataItems.each(function (dataItem) {\n      var feature = dataItem.getFeature();\n\n      if (feature) {\n        features.push(feature);\n      }\n    });\n    this.mapPolygons.each(function (mapPolygon) {\n      if (_this.dataItems.indexOf(mapPolygon._dataItem) == -1) {\n        var feature = mapPolygon.getFeature();\n\n        if (feature) {\n          features.push(feature);\n        }\n      }\n    });\n    return features;\n  };\n\n  Object.defineProperty(MapPolygonSeries.prototype, \"sortPolygonsBy\", {\n    /**\r\n     * @return How to sort map polygons\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"sortPolygonsBy\");\n    },\n\n    /**\r\n     * How to order polygons in actual SVG document. Affects selection order\r\n     * using TAB key.\r\n     *\r\n     * Available options: `\"area\"` (default), `\"name\"`, `\"longitude\"`,\r\n     * `\"latitude\"`, `\"id\"`, and `\"none\"`.\r\n     *\r\n     * @default area\r\n     * @since 4.9.36\r\n     * @param value  How to sort map polygons\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"sortPolygonsBy\", value)) {\n        this.invalidateData();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapPolygonSeries.prototype, \"sortPolygonsReversed\", {\n    /**\r\n     * @return Reverse polygon sort direction\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"sortPolygonsReversed\");\n    },\n\n    /**\r\n     * If `sortPolygonsBy` is set to something other than `\"none\"`, polygons\r\n     * will be sorted by the given parameter, using natural sort direction.\r\n     *\r\n     * Setting `sortPolygonsReversed = true` will reverse this direction.\r\n     *\r\n     * @default false\r\n     * @since 4.9.36\r\n     * @param value  Reverse polygon sort direction\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"sortPolygonsReversed\", value)) {\n        this.invalidateData();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return MapPolygonSeries;\n}(MapSeries);\n\nexport { MapPolygonSeries };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"MapPolygonSeries\"] = MapPolygonSeries;\nregistry.registeredClasses[\"MapPolygonSeriesDataItem\"] = MapPolygonSeriesDataItem;","map":{"version":3,"sources":["../../../../../src/.internal/charts/map/MapPolygonSeries.ts"],"names":[],"mappings":"AAAA;;;;AAIA;;;;;;;AAMA,SAAS,SAAT,EAAoB,iBAApB,QAAgJ,aAAhJ;AAEA,SAAS,UAAT,QAA2B,cAA3B;AACA,SAAS,YAAT,EAAuB,YAAvB,QAA2C,uBAA3C;AAGA,SAAS,QAAT,QAAyB,qBAAzB;AACA,OAAO,KAAK,SAAZ,MAA2B,YAA3B;AACA,OAAO,KAAK,MAAZ,MAAwB,wBAAxB;AACA,OAAO,KAAK,MAAZ,MAAwB,wBAAxB;AACA,OAAO,KAAK,KAAZ,MAAuB,2BAAvB;AACA,SAAS,QAAT,QAAyB,2BAAzB;AAGA;;;;;;;AAOA;;;;;AAIA,IAAA,wBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA8C,EAAA,SAAA,CAAA,wBAAA,EAAA,MAAA,CAAA;AAiC7C;;;;;AAGA,WAAA,wBAAA,GAAA;AAAA,QAAA,KAAA,GACC,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IADR;;AAEC,IAAA,KAAI,CAAC,SAAL,GAAiB,0BAAjB;;AACA,IAAA,KAAI,CAAC,UAAL;;;AACA;AAED;;;;;AAGO,EAAA,wBAAA,CAAA,SAAA,CAAA,UAAA,GAAP,YAAA;AACC,QAAI,KAAK,YAAL,IAAqB,KAAK,YAAL,CAAkB,MAAlB,GAA2B,CAApD,EAAuD;AACtD,aAAO;AAAE,gBAAQ,SAAV;AAAqB,QAAA,QAAQ,EAAE;AAAE,UAAA,IAAI,EAAE,cAAR;AAAwB,UAAA,WAAW,EAAE,KAAK;AAA1C;AAA/B,OAAP;AACA;AACD,GAJM;;AAYP,EAAA,MAAA,CAAA,cAAA,CAAW,wBAAA,CAAA,SAAX,EAAW,YAAX,EAAqB;AANrB;;;;;;SAMA,YAAA;AAAA,UAAA,KAAA,GAAA,IAAA;;AACC,UAAI,CAAC,KAAK,WAAV,EAAuB;AACtB,YAAI,YAAU,GAAG,KAAK,SAAL,CAAe,WAAf,CAA2B,MAA3B,EAAjB;AACA,aAAK,WAAL,GAAmB,YAAnB;AACA,aAAK,SAAL,CAAe,YAAf;;AAEA,aAAK,UAAL,CAAgB,IAAhB,CAAqB,IAAI,QAAJ,CAAa,YAAA;AACjC,cAAI,KAAI,CAAC,SAAT,EAAoB;AACnB,YAAA,KAAI,CAAC,SAAL,CAAe,WAAf,CAA2B,WAA3B,CAAuC,YAAvC;AACA;AACD,SAJoB,CAArB;;AAMA,aAAK,SAAL,GAAiB,YAAjB;AACA;;AACD,aAAO,KAAK,WAAZ;AACA,KAfoB;oBAAA;;AAAA,GAArB;AAkCA,EAAA,MAAA,CAAA,cAAA,CAAW,wBAAA,CAAA,SAAX,EAAW,SAAX,EAAkB;AAKlB;;;SAGA,YAAA;AACC,aAAO,KAAK,QAAZ;AACA,KAViB;;AAjBlB;;;;;;;;;;;;;;;;;SAiBA,UAAmB,OAAnB,EAA0D;AACzD,WAAK,QAAL,GAAgB,OAAhB;AACA,WAAK,YAAL,GAAoB,CAAC,OAAD,CAApB;AACA,KAHiB;oBAAA;;AAAA,GAAlB;AA2CA,EAAA,MAAA,CAAA,cAAA,CAAW,wBAAA,CAAA,SAAX,EAAW,cAAX,EAAuB;AAKvB;;;SAGA,YAAA;AACC,aAAO,KAAK,aAAZ;AACA,KAVsB;;AA/BvB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SA+BA,UAAwB,YAAxB,EAA2E;AAC1E,WAAK,aAAL,GAAqB,YAArB;AACA,WAAK,cAAL;AACA,KAHsB;oBAAA;;AAAA,GAAvB;AA6BA,EAAA,MAAA,CAAA,cAAA,CAAW,wBAAA,CAAA,SAAX,EAAW,YAAX,EAAqB;AAKrB;;;SAGA,YAAA;AACC,aAAO,KAAK,WAAZ;AACA,KAVoB;;AAjBrB;;;;;;;;;;;;;;;;;SAiBA,UAAsB,UAAtB,EAAsE;AACrE,WAAK,WAAL,GAAmB,UAAnB;AACA,WAAK,eAAL,GAAuB,CAAC,UAAD,CAAvB;AACA,KAHoB;oBAAA;;AAAA,GAArB;AAyCA,EAAA,MAAA,CAAA,cAAA,CAAW,wBAAA,CAAA,SAAX,EAAW,iBAAX,EAA0B;AAK1B;;;SAGA,YAAA;AACC,aAAO,KAAK,gBAAZ;AACA,KAVyB;;AA7B1B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SA6BA,UAA2B,eAA3B,EAAuF;AACtF,WAAK,gBAAL,GAAwB,eAAxB;AACA,WAAK,YAAL,GAAoB,SAAS,CAAC,6BAAV,CAAwC,eAAxC,CAApB;AACA,KAHyB;oBAAA;;AAAA,GAA1B;AAYD,SAAA,wBAAA;AAAC,CAxND,CAA8C,iBAA9C,CAAA;;;AAmSA;;;;;;;AAOA;;;;;;;;AAOA,IAAA,gBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAsC,EAAA,SAAA,CAAA,gBAAA,EAAA,MAAA,CAAA;AA+CrC;;;;;AAGA,WAAA,gBAAA,GAAA;AAAA,QAAA,KAAA,GAEC;AACA,IAAA,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IAHR;AAbA;;;;;;;;;;AAQO,IAAA,KAAA,CAAA,qBAAA,GAAiC,KAAjC;AAUN,IAAA,KAAI,CAAC,SAAL,GAAiB,kBAAjB,CALD,CAOC;;AACA,IAAA,KAAI,CAAC,UAAL,CAAgB,YAAhB,GAA+B,cAA/B;AACA,IAAA,KAAI,CAAC,UAAL,CAAgB,OAAhB,GAA0B,SAA1B;AAEA,IAAA,KAAI,CAAC,UAAL,CAAgB,UAAhB,GAA6B,YAA7B;AACA,IAAA,KAAI,CAAC,UAAL,CAAgB,eAAhB,GAAkC,iBAAlC;;AAEA,IAAA,KAAI,CAAC,gBAAL,CAAsB,gBAAtB,EAAwC,MAAxC;;AACA,IAAA,KAAI,CAAC,gBAAL,CAAsB,sBAAtB,EAA8C,KAA9C,EAfD,CAiBC;;;AACA,IAAA,KAAI,CAAC,UAAL;;;AAEA;AAED;;;;;;;;AAMU,EAAA,gBAAA,CAAA,SAAA,CAAA,cAAA,GAAV,YAAA;AACC,WAAO,IAAI,wBAAJ,EAAP;AACA,GAFS;AAIV;;;;;AAGU,EAAA,gBAAA,CAAA,SAAA,CAAA,aAAA,GAAV,YAAA;AACC,SAAK,WAAL,CAAiB,KAAjB;;AACA,IAAA,MAAA,CAAA,SAAA,CAAM,aAAN,CAAmB,IAAnB,CAAmB,IAAnB;AACA,GAHS;AAKV;;;;;;;;AAMO,EAAA,gBAAA,CAAA,SAAA,CAAA,YAAA,GAAP,YAAA;AACC;AACA,QAAI,KAAK,UAAL,IAAmB,KAAK,OAA5B,EAAqC;AACpC,UAAI,OAAO,GAAQ,CAAC,KAAK,YAAL,CAAkB,SAAlB,CAAD,GAAgC,KAAK,KAAL,CAAW,OAA3C,GAAqD,SAAxE;;AAEA,UAAI,KAAK,OAAT,EAAkB;AACjB,QAAA,OAAO,GAAG,KAAK,OAAf;AACA;;AAED,UAAI,OAAJ,EAAa;AAEZ,YAAI,QAAQ,GAAA,KAAA,CAAZ;;AAEA,YAAI,OAAO,CAAC,IAAR,IAAgB,mBAApB,EAAyC;AACxC,UAAA,QAAQ,GAAG,OAAO,CAAC,QAAnB;AACA,SAFD,MAGK,IAAI,OAAO,CAAC,IAAR,IAAgB,SAApB,EAA+B;AACnC,UAAA,QAAQ,GAAG,CAAC,OAAD,CAAX;AACA,SAFI,MAGA,IAAI,CAAC,OAAD,EAAU,YAAV,EAAwB,SAAxB,EAAmC,YAAnC,EAAiD,iBAAjD,EAAoE,cAApE,EAAoF,OAApF,CAA4F,OAAO,CAAC,IAApG,KAA6G,CAAC,CAAlH,EAAqH;AACzH,UAAA,QAAQ,GAAG,CAAC;AAAE,YAAA,QAAQ,EAAE;AAAZ,WAAD,CAAX;AACA,SAFI,MAGA;AACJ,UAAA,OAAO,CAAC,GAAR,CAAY,0BAAZ;AACA;;AAED,YAAI,QAAJ,EAAc;kCACJ,C,EAAO,G,EAAG;AAClB,gBAAI,OAAO,GAAQ,QAAQ,CAAC,CAAD,CAA3B;AACA,gBAAI,QAAQ,GAAQ,OAAO,CAAC,QAA5B;;AAEA,gBAAI,QAAJ,EAAc;AACb,kBAAI,IAAI,GAAqC,QAAQ,CAAC,IAAtD;AACA,kBAAI,IAAE,GAAW,OAAO,CAAC,EAAzB;;AAEA,kBAAI,MAAA,CAAK,KAAL,CAAW,YAAX,IAA2B,MAAA,CAAK,KAAL,CAAW,YAAX,CAAwB,IAAxB,CAA/B,EAA4D;AAC3D,gBAAA,OAAO,CAAC,UAAR,CAAmB,IAAnB,GAA0B,MAAA,CAAK,KAAL,CAAW,YAAX,CAAwB,IAAxB,CAA1B;AACA;;AAED,kBAAI,IAAI,IAAI,SAAR,IAAqB,IAAI,IAAI,cAAjC,EAAiD;AAEhD,oBAAI,CAAC,MAAA,CAAK,YAAL,CAAkB,MAAA,CAAK,OAAvB,EAAgC,MAAA,CAAK,OAArC,EAA8C,IAA9C,CAAL,EAAwD;;AAEvD;;AAED,oBAAI,WAAW,GAAU,QAAQ,CAAC,WAAlC;;AAEA,oBAAI,WAAJ,EAAiB;AAChB;AACA,sBAAI,IAAI,IAAI,SAAZ,EAAuB;AACtB,oBAAA,WAAW,GAAG,CAAC,WAAD,CAAd;AACA;AACD,iBAb+C,CAehD;;;AACA,oBAAI,UAAU,GAA0B,MAAM,CAAC,IAAP,CAAY,MAAA,CAAK,IAAjB,EAAuB,UAAC,KAAD,EAAQ,CAAR,EAAS;AACvE,yBAAO,KAAK,CAAC,EAAN,IAAY,IAAnB;AACA,iBAFuC,CAAxC,CAhBgD,CAqBhD;;AACA,oBAAI,CAAC,UAAL,EAAiB;AAChB,kBAAA,UAAU,GAAG;AAAE,oBAAA,YAAY,EAAE,WAAhB;AAA6B,oBAAA,EAAE,EAAE,IAAjC;AAAqC,oBAAA,eAAe,EAAE;AAAtD,mBAAb;AACA,kBAAA,MAAA,CAAK,IAAL,CAAU,IAAV,CAAe,UAAf;AACA,iBAHD,CAIA;AAJA,qBAKK;AACJ;AACA,wBAAI,CAAC,UAAU,CAAC,YAAhB,EAA8B;AAC7B,sBAAA,UAAU,CAAC,YAAX,GAA0B,WAA1B;AACA;AACD,mBAhC+C,CAkChD;;;AACA,gBAAA,MAAM,CAAC,kBAAP,CAA0B,OAAO,CAAC,UAAlC,EAA8C,UAA9C;AACA;AACD;;;;;AAjDF,eAAK,IAAI,CAAC,GAAG,CAAR,EAAW,GAAG,GAAG,QAAQ,CAAC,MAA/B,EAAuC,CAAC,GAAG,GAA3C,EAAgD,CAAC,EAAjD,EAAmD;oBAA1C,C,EAAO,G;AAkDf;AACD;AACD;AACD;;AAED,IAAA,MAAA,CAAA,SAAA,CAAM,YAAN,CAAkB,IAAlB,CAAkB,IAAlB;AACA,GAnFM;AAsFP;;;;;;;AAKO,EAAA,gBAAA,CAAA,SAAA,CAAA,QAAA,GAAP,YAAA;AACC,IAAA,MAAA,CAAA,SAAA,CAAM,QAAN,CAAc,IAAd,CAAc,IAAd;;AAEA,SAAK,SAAL,CAAe,IAAf,CAAoB,UAAC,QAAD,EAAS;AAC5B,MAAA,MAAM,CAAC,IAAP,CAAY,QAAQ,CAAC,UAArB;AACA,KAFD;;AAIA,QAAI,KAAK,cAAL,IAAuB,MAA3B,EAAmC;AAElC,UAAM,QAAM,GAAG,KAAK,cAApB;AACA,UAAM,UAAQ,GAAG,KAAK,oBAAtB;AACA,WAAK,WAAL,CAAiB,IAAjB,CAAsB,UAAC,CAAD,EAAI,CAAJ,EAAK;AAC1B,YAAI,IAAI,GAAoB,EAA5B;AACA,YAAI,IAAI,GAAoB,EAA5B;AACA,YAAI,IAAI,GAAa,CAAC,CAAtB;AACA,YAAI,IAAI,GAAa,CAArB;;AAEA,gBAAQ,QAAR;AACC,eAAK,MAAL;AACC,YAAA,IAAI,GAAG,CAAC,CAAC,OAAT;AACA,YAAA,IAAI,GAAG,CAAC,CAAC,OAAT;AACA,YAAA,IAAI,GAAG,CAAC,CAAR;AACA,YAAA,IAAI,GAAG,CAAP;AACA;;AACD,eAAK,MAAL;AACC,YAAA,IAAI,GAAS,CAAE,CAAC,QAAH,CAAY,WAAZ,CAAwB,IAAxB,IAAgC,EAA7C;AACA,YAAA,IAAI,GAAS,CAAE,CAAC,QAAH,CAAY,WAAZ,CAAwB,IAAxB,IAAgC,EAA7C;AACA,YAAA,IAAI,GAAG,CAAP;AACA,YAAA,IAAI,GAAG,CAAC,CAAR;AACA;;AACD,eAAK,IAAL;AACC,YAAA,IAAI,GAAS,CAAE,CAAC,QAAH,CAAY,WAAZ,CAAwB,EAAxB,IAA8B,EAA3C;AACA,YAAA,IAAI,GAAS,CAAE,CAAC,QAAH,CAAY,WAAZ,CAAwB,EAAxB,IAA8B,EAA3C;AACA,YAAA,IAAI,GAAG,CAAP;AACA,YAAA,IAAI,GAAG,CAAC,CAAR;AACA;;AACD,eAAK,UAAL;AACC,YAAA,IAAI,GAAG,UAAQ,GAAG,CAAC,CAAC,KAAL,GAAa,CAAC,CAAC,KAA9B;AACA,YAAA,IAAI,GAAG,UAAQ,GAAG,CAAC,CAAC,KAAL,GAAa,CAAC,CAAC,KAA9B;AACA,YAAA,IAAI,GAAG,CAAC,CAAR;AACA,YAAA,IAAI,GAAG,CAAP;AACA;;AACD,eAAK,WAAL;AACC,YAAA,IAAI,GAAG,UAAQ,GAAG,CAAC,CAAC,IAAL,GAAY,CAAC,CAAC,IAA7B;AACA,YAAA,IAAI,GAAG,UAAQ,GAAG,CAAC,CAAC,IAAL,GAAY,CAAC,CAAC,IAA7B;AACA,YAAA,IAAI,GAAG,CAAP;AACA,YAAA,IAAI,GAAG,CAAC,CAAR;AACA;AA9BF;;AAiCA,YAAI,IAAI,GAAG,IAAX,EAAiB;AAChB,iBAAO,UAAQ,GAAG,IAAH,GAAU,IAAzB;AACA;;AACD,YAAI,IAAI,GAAG,IAAX,EAAiB;AAChB,iBAAO,UAAQ,GAAG,IAAH,GAAU,IAAzB;AACA;;AACD,eAAO,CAAP;AACA,OA9CD;AAgDA,WAAK,WAAL,CAAiB,IAAjB,CAAsB,UAAC,UAAD,EAAa,KAAb,EAAkB;AACvC,QAAA,UAAU,CAAC,QAAX,GADuC,CAEvC;;AACA,YAAI,CAAC,UAAU,CAAC,MAAZ,IAAsB,CAAC,UAAU,CAAC,cAAX,CAA0B,MAArD,EAA6D;AAC5D,UAAA,UAAU,CAAC,MAAX,GAAoB,UAAU,KAA9B;AACA;AACD,OAND;AAQA;AACD,GApEM;;AA2EP,EAAA,MAAA,CAAA,cAAA,CAAW,gBAAA,CAAA,SAAX,EAAW,aAAX,EAAsB;AALtB;;;;;SAKA,YAAA;AAEC,UAAI,CAAC,KAAK,YAAV,EAAwB;AACvB,YAAI,eAAe,GAAe,IAAI,UAAJ,EAAlC;AAEA,YAAI,WAAW,GAA6B,IAAI,YAAJ,CAA6B,eAA7B,CAA5C;;AACA,aAAK,UAAL,CAAgB,IAAhB,CAAqB,IAAI,YAAJ,CAAiB,WAAjB,CAArB;;AACA,aAAK,UAAL,CAAgB,IAAhB,CAAqB,WAAW,CAAC,QAAjC;;AACA,QAAA,WAAW,CAAC,QAAZ,CAAqB,SAArB,GAAiC,IAAjC;AACA,QAAA,WAAW,CAAC,MAAZ,CAAmB,EAAnB,CAAsB,UAAtB,EAAkC,KAAK,iBAAvC,EAA0D,IAA1D,EAAgE,KAAhE;AACA,aAAK,YAAL,GAAoB,WAApB;AACA,aAAK,WAAL,GAAmB,WAAnB;AACA;;AAED,aAAO,KAAK,YAAZ;AACA,KAfqB;oBAAA;;AAAA,GAAtB;AAiBA;;;;;;AAKO,EAAA,gBAAA,CAAA,SAAA,CAAA,cAAA,GAAP,UAAsB,EAAtB,EAAgC;AAC/B,WAAO,KAAK,CAAC,IAAN,CAAW,KAAK,WAAL,CAAiB,QAAjB,EAAX,EAAwC,UAAC,UAAD,EAAW;AACzD,UAAI,WAAW,GAAQ,UAAU,CAAC,QAAX,CAAoB,WAA3C;AACA,aAAO,WAAW,CAAC,EAAZ,IAAkB,EAAzB;AACA,KAHM,CAAP;AAIA,GALM;AAOP;;;;;;;AAKO,EAAA,gBAAA,CAAA,SAAA,CAAA,QAAA,GAAP,UAAgB,MAAhB,EAA4B;AAC3B,SAAK,WAAL,CAAiB,QAAjB,CAA0B,QAA1B,CAAmC,MAAM,CAAC,WAAP,CAAmB,QAAtD;;AACA,IAAA,MAAA,CAAA,SAAA,CAAM,QAAN,CAAc,IAAd,CAAc,IAAd,EAAe,MAAf;AACA,GAHM;AAKP;;;;;AAGO,EAAA,gBAAA,CAAA,SAAA,CAAA,WAAA,GAAP,YAAA;AAAA,QAAA,KAAA,GAAA,IAAA;;AAEC,QAAI,QAAQ,GAAoH,EAAhI;AAEA,SAAK,SAAL,CAAe,IAAf,CAAoB,UAAC,QAAD,EAAS;AAC5B,UAAI,OAAO,GAAG,QAAQ,CAAC,UAAT,EAAd;;AACA,UAAI,OAAJ,EAAa;AACZ,QAAA,QAAQ,CAAC,IAAT,CAAc,OAAd;AACA;AACD,KALD;AAOA,SAAK,WAAL,CAAiB,IAAjB,CAAsB,UAAC,UAAD,EAAW;AAChC,UAAI,KAAI,CAAC,SAAL,CAAe,OAAf,CAAuB,UAAU,CAAC,SAAlC,KAAgD,CAAC,CAArD,EAAwD;AACvD,YAAI,OAAO,GAAG,UAAU,CAAC,UAAX,EAAd;;AACA,YAAI,OAAJ,EAAa;AACZ,UAAA,QAAQ,CAAC,IAAT,CAAc,OAAd;AACA;AACD;AACD,KAPD;AAQA,WAAO,QAAP;AACA,GApBM;;AAiCP,EAAA,MAAA,CAAA,cAAA,CAAW,gBAAA,CAAA,SAAX,EAAW,gBAAX,EAAyB;AAMzB;;;SAGA,YAAA;AACC,aAAO,KAAK,gBAAL,CAAsB,gBAAtB,CAAP;AACA,KAXwB;;AAXzB;;;;;;;;;;;SAWA,UAA0B,KAA1B,EAA2F;AAC1F,UAAI,KAAK,gBAAL,CAAsB,gBAAtB,EAAwC,KAAxC,CAAJ,EAAoD;AACnD,aAAK,cAAL;AACA;AACD,KAJwB;oBAAA;;AAAA,GAAzB;AAuBA,EAAA,MAAA,CAAA,cAAA,CAAW,gBAAA,CAAA,SAAX,EAAW,sBAAX,EAA+B;AAM/B;;;SAGA,YAAA;AACC,aAAO,KAAK,gBAAL,CAAsB,sBAAtB,CAAP;AACA,KAX8B;;AAV/B;;;;;;;;;;SAUA,UAAgC,KAAhC,EAA8C;AAC7C,UAAI,KAAK,gBAAL,CAAsB,sBAAtB,EAA8C,KAA9C,CAAJ,EAA0D;AACzD,aAAK,cAAL;AACA;AACD,KAJ8B;oBAAA;;AAAA,GAA/B;AAYD,SAAA,gBAAA;AAAC,CApXD,CAAsC,SAAtC,CAAA;;;AAsXA;;;;;;;AAMA,QAAQ,CAAC,iBAAT,CAA2B,kBAA3B,IAAiD,gBAAjD;AACA,QAAQ,CAAC,iBAAT,CAA2B,0BAA3B,IAAyD,wBAAzD","sourcesContent":["/**\r\n * Map polygon series module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapSeries, MapSeriesDataItem, GEOJSONGeometry, IMapSeriesProperties, IMapSeriesDataFields, IMapSeriesAdapters, IMapSeriesEvents } from \"./MapSeries\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapPolygon } from \"./MapPolygon\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { IMapPolygonDataObject } from \"../types/MapChart\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $mapUtils from \"./MapUtils\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport { Disposer } from \"../../core/utils/Disposer\";\r\nimport { Ordering } from \"../../core/utils/Order\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapPolygonSeries]]\r\n * @see {@link DataItem}\r\n */\r\nexport class MapPolygonSeriesDataItem extends MapSeriesDataItem {\r\n\r\n\t/**\r\n\t * A [[MapPolygon]] element related to this data item.\r\n\t */\r\n\tprotected _mapPolygon: MapPolygon;\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a single polygon.\r\n\t */\r\n\tprotected _polygon: Array<Array<[number, number]>>;\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a multi-part polygon.\r\n\t */\r\n\tprotected _multiPolygon: Array<Array<Array<[number, number]>>>;\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a single polygon.\r\n\t */\r\n\tprotected _geoPolygon: [Array<IGeoPoint>, Array<IGeoPoint>];\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a multi-part polygon.\r\n\t */\r\n\tprotected _multiGeoPolygon: Array<[Array<IGeoPoint>, Array<IGeoPoint>]>;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t */\r\n\tpublic _component!: MapPolygonSeries;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapPolygonSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic getFeature(): { \"type\": \"Feature\", geometry: { type: \"MultiPolygon\", coordinates: Array<Array<Array<[number, number]>>> } } {\r\n\t\tif (this.multiPolygon && this.multiPolygon.length > 0) {\r\n\t\t\treturn { \"type\": \"Feature\", geometry: { type: \"MultiPolygon\", coordinates: this.multiPolygon } };\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A [[MapPolygon]] element related to this data item.\r\n\t *\r\n\t * @readonly\r\n\t * @return Element\r\n\t */\r\n\tpublic get mapPolygon(): MapPolygon {\r\n\t\tif (!this._mapPolygon) {\r\n\t\t\tlet mapPolygon = this.component.mapPolygons.create();\r\n\t\t\tthis._mapPolygon = mapPolygon;\r\n\t\t\tthis.addSprite(mapPolygon);\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tif (this.component) {\r\n\t\t\t\t\tthis.component.mapPolygons.removeValue(mapPolygon);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\r\n\t\t\tthis.mapObject = mapPolygon;\r\n\t\t}\r\n\t\treturn this._mapPolygon;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a single polygon. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   [\r\n\t *     [ 100, 150 ],\r\n\t *     [ 120, 200 ],\r\n\t *     [ 150, 200 ],\r\n\t *     [ 170, 240 ],\r\n\t *     [ 100, 150 ]\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @param polygon  Coordinates\r\n\t */\r\n\tpublic set polygon(polygon: Array<Array<[number, number]>>) {\r\n\t\tthis._polygon = polygon;\r\n\t\tthis.multiPolygon = [polygon];\r\n\t}\r\n\r\n\t/**\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic get polygon(): Array<Array<[number, number]>> {\r\n\t\treturn this._polygon;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a multi-part polygon. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   // Part 1\r\n\t *   [\r\n\t *     [\r\n\t *       [ 100, 150 ],\r\n\t *       [ 120, 200 ],\r\n\t *       [ 150, 220 ],\r\n\t *       [ 170, 240 ],\r\n\t *       [ 100, 150 ]\r\n\t *     ]\r\n\t *   ],\r\n\t *\r\n\t *   // Part 2\r\n\t *   [\r\n\t *     [\r\n\t *       [ 300, 350 ],\r\n\t *       [ 320, 400 ],\r\n\t *       [ 350, 420 ],\r\n\t *       [ 370, 440 ],\r\n\t *       [ 300, 350 ]\r\n\t *     ]\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @param multiPolygon  Coordinates\r\n\t */\r\n\tpublic set multiPolygon(multiPolygon: Array<Array<Array<[number, number]>>>) {\r\n\t\tthis._multiPolygon = multiPolygon;\r\n\t\tthis.updateExtremes();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic get multiPolygon(): Array<Array<Array<[number, number]>>> {\r\n\t\treturn this._multiPolygon;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a single polygon. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   [\r\n\t *     { latitude: -10.0, longitude: -10.0 },\r\n\t *     { latitude: 10.0, longitude: -10.0 },\r\n\t *     { latitude: 10.0, longitude: 10.0 },\r\n\t *     { latitude: -10.0, longitude: -10.0 }\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://tools.ietf.org/html/rfc7946#section-3.1.6} GeoJSON Polygon reference\r\n\t * @param geoPolygon  Coordinates\r\n\t */\r\n\tpublic set geoPolygon(geoPolygon: [Array<IGeoPoint>, Array<IGeoPoint>]) {\r\n\t\tthis._geoPolygon = geoPolygon;\r\n\t\tthis.multiGeoPolygon = [geoPolygon];\r\n\t}\r\n\r\n\t/**\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic get geoPolygon(): [Array<IGeoPoint>, Array<IGeoPoint>] {\r\n\t\treturn this._geoPolygon;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a multi-part polygon. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   [\r\n\t *     [\r\n\t *       { longitude: 180.0, latitude: 40.0 },\r\n\t *       { longitude: 180.0, latitude: 50.0 },\r\n\t *       { longitude: 170.0, latitude: 50.0 },\r\n\t *       { longitude: 170.0, latitude: 40.0 },\r\n\t *       { longitude: 180.0, latitude: 40.0 }\r\n\t *     ]\r\n\t *   ],\r\n\t *   [\r\n\t *     [\r\n\t *       { longitude: -170.0, latitude: 40.0 },\r\n\t *       { longitude: -170.0, latitude: 50.0 },\r\n\t *       { longitude: -180.0, latitude: 50.0 },\r\n\t *       { longitude: -180.0, latitude: 40.0 },\r\n\t *       { longitude: -170.0, latitude: 40.0 }\r\n\t *     ]\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://tools.ietf.org/html/rfc7946#section-3.1.7} GeoJSON MultiPolygon reference\r\n\t * @param multiGeoPolygon  Coordinates\r\n\t */\r\n\tpublic set multiGeoPolygon(multiGeoPolygon: Array<[Array<IGeoPoint>, Array<IGeoPoint>]>) {\r\n\t\tthis._multiGeoPolygon = multiGeoPolygon;\r\n\t\tthis.multiPolygon = $mapUtils.multiGeoPolygonToMultipolygon(multiGeoPolygon);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic get multiGeoPolygon(): Array<[Array<IGeoPoint>, Array<IGeoPoint>]> {\r\n\t\treturn this._multiGeoPolygon;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[MapPolygonSeries]].\r\n */\r\nexport interface IMapPolygonSeriesDataFields extends IMapSeriesDataFields {\r\n\r\n\t/**\r\n\t * Field name that holds polygon pixels.\r\n\t */\r\n\tpolygon?: string;\r\n\r\n\t/**\r\n\t * Field name that holds multi-polygon pixels.\r\n\t */\r\n\tmultiPolygon?: string;\r\n\r\n\t/**\r\n\t * Field name that holds polygon data in Geo coordinates.\r\n\t */\r\n\tgeoPolygon?: string;\r\n\r\n\t/**\r\n\t * Field name that holds poly-polygon data in Geo coordinates.\r\n\t */\r\n\tmultiGeoPolygon?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[MapPolygonSeries]].\r\n */\r\nexport interface IMapPolygonSeriesProperties extends IMapSeriesProperties {\r\n\r\n\t/**\r\n\t * How to order polygons in actual SVG document. Affects selection order\r\n\t * using TAB key.\r\n\t *\r\n\t * @since 4.9.36\r\n\t */\r\n\tsortPolygonsBy: \"area\" | \"name\" | \"longitude\" | \"latitude\" | \"id\" | \"none\";\r\n\r\n\t/**\r\n\t * If `sortPolygonsBy` is set to something other than `\"none\"`, polygons\r\n\t * will be sorted by the given parameter, using natural sort direction.\r\n\t *\r\n\t * Setting `sortPolygonsReversed = true` will reverse this direction.\r\n\t *\r\n\t * @since 4.9.36\r\n\t */\r\n\tsortPolygonsReversed: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[MapPolygonSeries]].\r\n */\r\nexport interface IMapPolygonSeriesEvents extends IMapSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapPolygonSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapPolygonSeriesAdapters extends IMapSeriesAdapters, IMapPolygonSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A series of map polygon elements.\r\n *\r\n * @see {@link IMapPolygonSeriesEvents} for a list of available Events\r\n * @see {@link IMapPolygonSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class MapPolygonSeries extends MapSeries {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IMapPolygonSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IMapPolygonSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IMapPolygonSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IMapPolygonSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: MapPolygonSeriesDataItem;\r\n\r\n\t/**\r\n\t * A related chart/map object, this element is drawn on.\r\n\t */\r\n\tpublic chart: MapChart;\r\n\r\n\t/**\r\n\t * A list of map polygons in the series.\r\n\t */\r\n\tprotected _mapPolygons: ListTemplate<MapPolygon>;\r\n\r\n\t/**\r\n\t * Indicates if series should automatically calculate visual center of the\r\n\t * polygons (accessible via `visualLongitude` and `visualLatitude` properties\r\n\t * of the [[MapPolygon]]).\r\n\t *\r\n\t * @default false\r\n\t * @since 4.3.0\r\n\t */\r\n\tpublic calculateVisualCenter: boolean = false;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"MapPolygonSeries\";\r\n\r\n\t\t// Set data fields\r\n\t\tthis.dataFields.multiPolygon = \"multiPolygon\";\r\n\t\tthis.dataFields.polygon = \"polygon\";\r\n\r\n\t\tthis.dataFields.geoPolygon = \"geoPolygon\";\r\n\t\tthis.dataFields.multiGeoPolygon = \"multiGeoPolygon\";\r\n\r\n\t\tthis.setPropertyValue(\"sortPolygonsBy\", \"area\");\r\n\t\tthis.setPropertyValue(\"sortPolygonsReversed\", false);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new MapPolygonSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected processIncExc() {\r\n\t\tthis.mapPolygons.clear();\r\n\t\tsuper.processIncExc();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates series data, effectively causing the whole series to be\r\n\t * redrawn.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\t// process geoJSON and created map objects\r\n\t\tif (this.useGeodata || this.geodata) {\r\n\t\t\tlet geoJSON: any = !this._dataSources[\"geodata\"] ? this.chart.geodata : undefined;\r\n\r\n\t\t\tif (this.geodata) {\r\n\t\t\t\tgeoJSON = this.geodata;\r\n\t\t\t}\r\n\r\n\t\t\tif (geoJSON) {\r\n\r\n\t\t\t\tlet features: any[];\r\n\r\n\t\t\t\tif (geoJSON.type == \"FeatureCollection\") {\r\n\t\t\t\t\tfeatures = geoJSON.features;\r\n\t\t\t\t}\r\n\t\t\t\telse if (geoJSON.type == \"Feature\") {\r\n\t\t\t\t\tfeatures = [geoJSON];\r\n\t\t\t\t}\r\n\t\t\t\telse if ([\"Point\", \"LineString\", \"Polygon\", \"MultiPoint\", \"MultiLineString\", \"MultiPolygon\"].indexOf(geoJSON.type) != -1) {\r\n\t\t\t\t\tfeatures = [{ geometry: geoJSON }];\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tconsole.log(\"nothing found in geoJSON\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (features) {\r\n\t\t\t\t\tfor (let i = 0, len = features.length; i < len; i++) {\r\n\t\t\t\t\t\tlet feature: any = features[i];\r\n\t\t\t\t\t\tlet geometry: any = feature.geometry;\r\n\r\n\t\t\t\t\t\tif (geometry) {\r\n\t\t\t\t\t\t\tlet type: GEOJSONGeometry = <GEOJSONGeometry>geometry.type;\r\n\t\t\t\t\t\t\tlet id: string = feature.id;\r\n\r\n\t\t\t\t\t\t\tif (this.chart.geodataNames && this.chart.geodataNames[id]) {\r\n\t\t\t\t\t\t\t\tfeature.properties.name = this.chart.geodataNames[id];\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif (type == \"Polygon\" || type == \"MultiPolygon\") {\r\n\r\n\t\t\t\t\t\t\t\tif (!this.checkInclude(this.include, this.exclude, id)) {\r\n\t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet coordinates: any[] = geometry.coordinates;\r\n\r\n\t\t\t\t\t\t\t\tif (coordinates) {\r\n\t\t\t\t\t\t\t\t\t// make the same as MultiPolygon\r\n\t\t\t\t\t\t\t\t\tif (type == \"Polygon\") {\r\n\t\t\t\t\t\t\t\t\t\tcoordinates = [coordinates];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t// find data object in user-provided data\r\n\t\t\t\t\t\t\t\tlet dataObject: IMapPolygonDataObject = $array.find(this.data, (value, i) => {\r\n\t\t\t\t\t\t\t\t\treturn value.id == id;\r\n\t\t\t\t\t\t\t\t});\r\n\r\n\r\n\t\t\t\t\t\t\t\t// create one if not found\r\n\t\t\t\t\t\t\t\tif (!dataObject) {\r\n\t\t\t\t\t\t\t\t\tdataObject = { multiPolygon: coordinates, id: id, madeFromGeoData: true };\r\n\t\t\t\t\t\t\t\t\tthis.data.push(dataObject);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// in case found\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t// if user-provided object doesn't have points data provided in any way:\r\n\t\t\t\t\t\t\t\t\tif (!dataObject.multiPolygon) {\r\n\t\t\t\t\t\t\t\t\t\tdataObject.multiPolygon = coordinates;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t// copy properties data to datacontext\r\n\t\t\t\t\t\t\t\t$utils.softCopyProperties(feature.properties, dataObject);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validateData();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * (Re)validates the series\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\t$utils.used(dataItem.mapPolygon);\r\n\t\t});\r\n\r\n\t\tif (this.sortPolygonsBy != \"none\") {\r\n\r\n\t\t\tconst sortBy = this.sortPolygonsBy;\r\n\t\t\tconst reversed = this.sortPolygonsReversed;\r\n\t\t\tthis.mapPolygons.sort((a, b) => {\r\n\t\t\t\tlet valA: number | string = \"\";\r\n\t\t\t\tlet valB: number | string = \"\";\r\n\t\t\t\tlet dirA: Ordering = -1;\r\n\t\t\t\tlet dirB: Ordering = 1;\r\n\r\n\t\t\t\tswitch (sortBy) {\r\n\t\t\t\t\tcase \"area\":\r\n\t\t\t\t\t\tvalA = a.boxArea;\r\n\t\t\t\t\t\tvalB = b.boxArea;\r\n\t\t\t\t\t\tdirA = -1;\r\n\t\t\t\t\t\tdirB = 1;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"name\":\r\n\t\t\t\t\t\tvalA = (<any>a).dataItem.dataContext.name || \"\";\r\n\t\t\t\t\t\tvalB = (<any>b).dataItem.dataContext.name || \"\";\r\n\t\t\t\t\t\tdirA = 1;\r\n\t\t\t\t\t\tdirB = -1;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"id\":\r\n\t\t\t\t\t\tvalA = (<any>a).dataItem.dataContext.id || \"\";\r\n\t\t\t\t\t\tvalB = (<any>b).dataItem.dataContext.id || \"\";\r\n\t\t\t\t\t\tdirA = 1;\r\n\t\t\t\t\t\tdirB = -1;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"latitude\":\r\n\t\t\t\t\t\tvalA = reversed ? a.south : a.north;\r\n\t\t\t\t\t\tvalB = reversed ? b.south : b.north;\r\n\t\t\t\t\t\tdirA = -1;\r\n\t\t\t\t\t\tdirB = 1;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"longitude\":\r\n\t\t\t\t\t\tvalA = reversed ? a.east : a.west;\r\n\t\t\t\t\t\tvalB = reversed ? b.east : b.west;\r\n\t\t\t\t\t\tdirA = 1;\r\n\t\t\t\t\t\tdirB = -1;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (valA < valB) {\r\n\t\t\t\t\treturn reversed ? dirB : dirA;\r\n\t\t\t\t}\r\n\t\t\t\tif (valA > valB) {\r\n\t\t\t\t\treturn reversed ? dirA : dirB;\r\n\t\t\t\t}\r\n\t\t\t\treturn 0;\r\n\t\t\t});\r\n\r\n\t\t\tthis.mapPolygons.each((mapPolygon, index) => {\r\n\t\t\t\tmapPolygon.validate();\r\n\t\t\t\t// makes small go first to avoid hover problems with IE\r\n\t\t\t\tif (!mapPolygon.zIndex && !mapPolygon.propertyFields.zIndex) {\r\n\t\t\t\t\tmapPolygon.zIndex = 1000000 - index;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * List of polygon elements in the series.\r\n\t *\r\n\t * @return Polygon list\r\n\t */\r\n\tpublic get mapPolygons(): ListTemplate<MapPolygon> {\r\n\r\n\t\tif (!this._mapPolygons) {\r\n\t\t\tlet polygonTemplate: MapPolygon = new MapPolygon();\r\n\r\n\t\t\tlet mapPolygons: ListTemplate<MapPolygon> = new ListTemplate<MapPolygon>(polygonTemplate);\r\n\t\t\tthis._disposers.push(new ListDisposer(mapPolygons));\r\n\t\t\tthis._disposers.push(mapPolygons.template);\r\n\t\t\tmapPolygons.template.focusable = true;\r\n\t\t\tmapPolygons.events.on(\"inserted\", this.handleObjectAdded, this, false);\r\n\t\t\tthis._mapPolygons = mapPolygons;\r\n\t\t\tthis._mapObjects = mapPolygons;\r\n\t\t}\r\n\r\n\t\treturn this._mapPolygons;\r\n\t}\r\n\r\n\t/**\r\n\t * returns MapPolygon by id in geoJSON file\r\n\t * @param polygon id\r\n\t * @return {MapPolygon}\r\n\t */\r\n\tpublic getPolygonById(id: string): MapPolygon {\r\n\t\treturn $iter.find(this.mapPolygons.iterator(), (mapPolygon) => {\r\n\t\t\tlet dataContext: any = mapPolygon.dataItem.dataContext;\r\n\t\t\treturn dataContext.id == id;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[Series]].\r\n\t *\r\n\t * @param source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tthis.mapPolygons.template.copyFrom(source.mapPolygons.template);\r\n\t\tsuper.copyFrom(source);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic getFeatures(): { \"type\": \"Feature\", geometry: { type: \"MultiPolygon\", coordinates: Array<Array<Array<[number, number]>>> } }[] {\r\n\r\n\t\tlet features: { \"type\": \"Feature\", geometry: { type: \"MultiPolygon\", coordinates: Array<Array<Array<[number, number]>>> } }[] = [];\r\n\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\tlet feature = dataItem.getFeature();\r\n\t\t\tif (feature) {\r\n\t\t\t\tfeatures.push(feature);\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tthis.mapPolygons.each((mapPolygon) => {\r\n\t\t\tif (this.dataItems.indexOf(mapPolygon._dataItem) == -1) {\r\n\t\t\t\tlet feature = mapPolygon.getFeature();\r\n\t\t\t\tif (feature) {\r\n\t\t\t\t\tfeatures.push(feature);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\t\treturn features;\r\n\t}\r\n\r\n\t/**\r\n\t * How to order polygons in actual SVG document. Affects selection order\r\n\t * using TAB key.\r\n\t *\r\n\t * Available options: `\"area\"` (default), `\"name\"`, `\"longitude\"`,\r\n\t * `\"latitude\"`, `\"id\"`, and `\"none\"`.\r\n\t *\r\n\t * @default area\r\n\t * @since 4.9.36\r\n\t * @param value  How to sort map polygons\r\n\t */\r\n\tpublic set sortPolygonsBy(value: \"area\" | \"name\" | \"longitude\" | \"latitude\" | \"id\" | \"none\") {\r\n\t\tif (this.setPropertyValue(\"sortPolygonsBy\", value)) {\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return How to sort map polygons\r\n\t */\r\n\tpublic get sortPolygonsBy(): \"area\" | \"name\" | \"longitude\" | \"latitude\" | \"id\" | \"none\" {\r\n\t\treturn this.getPropertyValue(\"sortPolygonsBy\");\r\n\t}\r\n\r\n\t/**\r\n\t * If `sortPolygonsBy` is set to something other than `\"none\"`, polygons\r\n\t * will be sorted by the given parameter, using natural sort direction.\r\n\t *\r\n\t * Setting `sortPolygonsReversed = true` will reverse this direction.\r\n\t *\r\n\t * @default false\r\n\t * @since 4.9.36\r\n\t * @param value  Reverse polygon sort direction\r\n\t */\r\n\tpublic set sortPolygonsReversed(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"sortPolygonsReversed\", value)) {\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Reverse polygon sort direction\r\n\t */\r\n\tpublic get sortPolygonsReversed(): boolean {\r\n\t\treturn this.getPropertyValue(\"sortPolygonsReversed\");\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapPolygonSeries\"] = MapPolygonSeries;\r\nregistry.registeredClasses[\"MapPolygonSeriesDataItem\"] = MapPolygonSeriesDataItem;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}