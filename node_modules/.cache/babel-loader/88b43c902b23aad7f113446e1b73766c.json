{"ast":null,"code":"/**\r\n * Map line series module\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { MapSeries, MapSeriesDataItem } from \"./MapSeries\";\nimport { MapLine } from \"./MapLine\";\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\nimport { registry } from \"../../core/Registry\";\nimport * as $mapUtils from \"./MapUtils\";\nimport * as $array from \"../../core/utils/Array\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport { Disposer } from \"../../core/utils/Disposer\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines a [[DataItem]] for [[MapLineSeries]]\r\n * @see {@link DataItem}\r\n */\n\nvar MapLineSeriesDataItem =\n/** @class */\nfunction (_super) {\n  __extends(MapLineSeriesDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function MapLineSeriesDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"MapLineSeriesDataItem\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  MapLineSeriesDataItem.prototype.getFeature = function () {\n    if (this.multiLine && this.multiLine.length > 0) {\n      return {\n        \"type\": \"Feature\",\n        geometry: {\n          type: \"MultiLineString\",\n          coordinates: this.multiLine\n        }\n      };\n    }\n  };\n\n  Object.defineProperty(MapLineSeriesDataItem.prototype, \"mapLine\", {\n    /**\r\n     * A [[MapLine]] element related to this data item.\r\n     *\r\n     * @readonly\r\n     * @return Element\r\n     */\n    get: function () {\n      var _this = this;\n\n      if (!this._mapLine) {\n        var mapLine_1 = this.component.mapLines.create();\n        this._mapLine = mapLine_1;\n        this.addSprite(mapLine_1);\n\n        this._disposers.push(mapLine_1);\n\n        this._disposers.push(new Disposer(function () {\n          if (_this.component) {\n            _this.component.mapLines.removeValue(mapLine_1);\n          }\n        }));\n\n        this.mapObject = mapLine_1;\n      }\n\n      return this._mapLine;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapLineSeriesDataItem.prototype, \"line\", {\n    /**\r\n     * @return Coordinates\r\n     */\n    get: function () {\n      return this._line;\n    },\n\n    /**\r\n     * A collection of X/Y coordinates for a single-segment line. E.g.:\r\n     *\r\n     * ```JSON\r\n     * [\r\n     *   [ 100, 150 ],\r\n     *   [ 120, 200 ]\r\n     * ]\r\n     * ```\r\n     *\r\n     * @param line  Coordinates\r\n     */\n    set: function (line) {\n      this._line = line;\n      this.multiLine = [line];\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapLineSeriesDataItem.prototype, \"multiLine\", {\n    /**\r\n     * @return Coordinates\r\n     */\n    get: function () {\n      return this._multiLine;\n    },\n\n    /**\r\n     * A collection of X/Y coordinates for a multi-segment line. E.g.:\r\n     *\r\n     * ```JSON\r\n     * [\r\n     *   // Segment 1\r\n     *   [\r\n     *     [ 100, 150 ],\r\n     *     [ 120, 200 ]\r\n     *   ],\r\n     *\r\n     *   // Segment 2\r\n     *   [\r\n     *     [ 120, 200 ],\r\n     *     [ 150, 100 ]\r\n     *   ]\r\n     * ]\r\n     * ```\r\n     *\r\n     * @param multiLine  Coordinates\r\n     */\n    set: function (multiLine) {\n      this._multiLine = multiLine;\n      this._multiGeoLine = $mapUtils.multiLineToGeo(multiLine);\n      this.updateExtremes();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapLineSeriesDataItem.prototype, \"geoLine\", {\n    /**\r\n     * @return Coordinates\r\n     */\n    get: function () {\n      return this._geoLine;\n    },\n\n    /**\r\n     * A collection of lat/long coordinates for a single-segment line. E.g.:\r\n     *\r\n     * ```JSON\r\n     * [\r\n     *   { longitude: 3.121, latitude: 0.58 },\r\n     *   { longitude: -5.199, latitude: 21.223 }\r\n     * ]\r\n     * ```\r\n     *\r\n     * @see {@link https://tools.ietf.org/html/rfc7946#section-3.1.4} GeoJSON LineString reference\r\n     * @param geoLine  Coordinates\r\n     */\n    set: function (geoLine) {\n      this._geoLine = geoLine;\n      this.multiLine = $mapUtils.multiGeoLineToMultiLine([geoLine]);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MapLineSeriesDataItem.prototype, \"multiGeoLine\", {\n    /**\r\n     * @return Coordinates\r\n     */\n    get: function () {\n      return this._multiGeoLine;\n    },\n\n    /**\r\n     * A collection of X/Y coordinates for a multi-segment line. E.g.:\r\n     *\r\n     * ```JSON\r\n     * [\r\n     *   // Segment 1\r\n     *   [\r\n     *     { longitude: 3.121, latitude: 0.58 },\r\n     *     { longitude: -5.199, latitude: 21.223 }\r\n     *   ],\r\n     *\r\n     *   // Segment 2\r\n     *   [\r\n     *     { longitude: -5.199, latitude: 21.223 },\r\n     *     { longitude: -12.9, latitude: 25.85 }\r\n     *   ]\r\n     * ]\r\n     * ```\r\n     *\r\n     * @see {@link https://tools.ietf.org/html/rfc7946#section-3.1.5} GeoJSON MultiLineString reference\r\n     * @param multiGeoLine  Coordinates\r\n     */\n    set: function (multiGeoLine) {\n      this._multiGeoLine = multiGeoLine;\n      this.multiLine = $mapUtils.multiGeoLineToMultiLine(multiGeoLine);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return MapLineSeriesDataItem;\n}(MapSeriesDataItem);\n\nexport { MapLineSeriesDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * A series of map line series.\r\n *\r\n * @see {@link IMapLineSeriesEvents} for a list of available Events\r\n * @see {@link IMapLineSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\n\nvar MapLineSeries =\n/** @class */\nfunction (_super) {\n  __extends(MapLineSeries, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function MapLineSeries() {\n    var _this = // Init\n    _super.call(this) || this;\n\n    _this.className = \"MapLineSeries\"; // Set data fields\n\n    _this.dataFields.multiLine = \"multiLine\";\n    _this.dataFields.line = \"line\";\n    _this.dataFields.geoLine = \"geoLine\";\n    _this.dataFields.multiGeoLine = \"multiGeoLine\";\n    _this.ignoreBounds = true; // Apply theme\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Returns a new/empty DataItem of the type appropriate for this object.\r\n   *\r\n   * @see {@link DataItem}\r\n   * @return Data Item\r\n   */\n\n\n  MapLineSeries.prototype.createDataItem = function () {\n    return new MapLineSeriesDataItem();\n  };\n  /**\r\n   * (Re)validates series data, effectively causing the whole series to be\r\n   * redrawn.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  MapLineSeries.prototype.validateData = function () {\n    // process geoJSON and created map objects\n    if (this.useGeodata || this.geodata) {\n      var geoJSON = this.chart.geodata;\n\n      if (geoJSON) {\n        var features = void 0;\n\n        if (geoJSON.type == \"FeatureCollection\") {\n          features = geoJSON.features;\n        } else if (geoJSON.type == \"Feature\") {\n          features = [geoJSON];\n        } else if ([\"Point\", \"LineString\", \"Polygon\", \"MultiPoint\", \"MultiLineString\", \"MultiPolygon\"].indexOf(geoJSON.type) != -1) {\n          features = [{\n            geometry: geoJSON\n          }];\n        } else {\n          console.log(\"nothing found in geoJSON\");\n        }\n\n        if (features) {\n          var _loop_1 = function (i, len) {\n            var feature = features[i];\n            var geometry = feature.geometry;\n\n            if (geometry) {\n              var type = geometry.type;\n              var id_1 = feature.id;\n\n              if (type == \"LineString\" || type == \"MultiLineString\") {\n                if (!this_1.checkInclude(this_1.include, this_1.exclude, id_1)) {\n                  return \"continue\";\n                }\n\n                var coordinates = geometry.coordinates;\n                var dataObject = $array.find(this_1.data, function (value, i) {\n                  return value.id == id_1;\n                });\n\n                if (type == \"LineString\") {\n                  coordinates = [coordinates];\n                }\n\n                if (!dataObject) {\n                  dataObject = {\n                    multiLine: coordinates,\n                    id: id_1,\n                    madeFromGeoData: true\n                  };\n                  this_1.data.push(dataObject);\n                } else {\n                  if (!dataObject.multiLine) {\n                    dataObject.multiLine = coordinates;\n                  }\n                } // copy properties data to datacontext\n\n\n                $utils.softCopyProperties(feature.properties, dataObject);\n              }\n            }\n          };\n\n          var this_1 = this;\n\n          for (var i = 0, len = features.length; i < len; i++) {\n            _loop_1(i, len);\n          }\n        }\n      }\n    }\n\n    _super.prototype.validateData.call(this);\n  };\n\n  Object.defineProperty(MapLineSeries.prototype, \"mapLines\", {\n    /**\r\n     * A list of lines in the series.\r\n     *\r\n     * @return Lines\r\n     */\n    get: function () {\n      if (!this._mapLines) {\n        var lineTemplate = this.createLine();\n        var mapLines = new ListTemplate(lineTemplate);\n\n        this._disposers.push(new ListDisposer(mapLines));\n\n        this._disposers.push(mapLines.template);\n\n        mapLines.events.on(\"inserted\", this.handleObjectAdded, this, false);\n        this._mapLines = mapLines;\n        this._mapObjects = mapLines;\n      }\n\n      return this._mapLines;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns a new line instance of suitable type.\r\n   *\r\n   * @return New line\r\n   */\n\n  MapLineSeries.prototype.createLine = function () {\n    return new MapLine();\n  };\n  /**\r\n   * (Re)validates the series\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  MapLineSeries.prototype.validate = function () {\n    this.dataItems.each(function (dataItem) {\n      $utils.used(dataItem.mapLine);\n    });\n\n    _super.prototype.validate.call(this);\n\n    this.mapLines.each(function (mapLine) {\n      mapLine.validate();\n    });\n  };\n  /**\r\n   * Copies all properties from another instance of [[Series]].\r\n   *\r\n   * @param source  Source series\r\n   */\n\n\n  MapLineSeries.prototype.copyFrom = function (source) {\n    this.mapLines.template.copyFrom(source.mapLines.template);\n\n    _super.prototype.copyFrom.call(this, source);\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  MapLineSeries.prototype.getFeatures = function () {\n    var _this = this;\n\n    var features = [];\n    this.dataItems.each(function (dataItem) {\n      var feature = dataItem.getFeature();\n\n      if (feature) {\n        features.push(feature);\n      }\n    });\n    this.mapLines.each(function (mapLine) {\n      if (_this.dataItems.indexOf(mapLine._dataItem) == -1) {\n        var feature = mapLine.getFeature();\n\n        if (feature) {\n          features.push(feature);\n        }\n      }\n    });\n    return features;\n  };\n  /**\r\n   * returns MapLine by id\r\n   * @param line id\r\n   * @return {MapLine}\r\n   */\n\n\n  MapLineSeries.prototype.getLineById = function (id) {\n    return $iter.find(this.mapLines.iterator(), function (mapLine) {\n      var dataContext = mapLine.dataItem.dataContext;\n      return dataContext.id == id;\n    });\n  };\n\n  return MapLineSeries;\n}(MapSeries);\n\nexport { MapLineSeries };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"MapLineSeries\"] = MapLineSeries;\nregistry.registeredClasses[\"MapLineSeriesDataItem\"] = MapLineSeriesDataItem;","map":{"version":3,"sources":["../../../../../src/.internal/charts/map/MapLineSeries.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Map line series module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { MapSeries, MapSeriesDataItem, GEOJSONGeometry, IMapSeriesProperties, IMapSeriesDataFields, IMapSeriesAdapters, IMapSeriesEvents } from \"./MapSeries\";\r\nimport { MapChart } from \"../types/MapChart\";\r\nimport { MapLine } from \"./MapLine\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { IMapLineDataObject } from \"../types/MapChart\";\r\nimport { IGeoPoint } from \"../../core/defs/IGeoPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $mapUtils from \"./MapUtils\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport { Disposer } from \"../../core/utils/Disposer\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[MapLineSeries]]\r\n * @see {@link DataItem}\r\n */\r\nexport class MapLineSeriesDataItem extends MapSeriesDataItem {\r\n\r\n\t/**\r\n\t * A [[MapLine]] element related to this data item.\r\n\t */\r\n\tpublic _mapLine: MapLine;\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a single-segment line.\r\n\t */\r\n\tprotected _line: Array<[number, number]>;\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a multi-segment line.\r\n\t */\r\n\tprotected _multiLine: Array<Array<[number, number]>>;\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a single-segment line.\r\n\t */\r\n\tprotected _geoLine: Array<IGeoPoint>;\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a multi-segment line.\r\n\t */\r\n\tprotected _multiGeoLine: Array<Array<IGeoPoint>>;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t */\r\n\tpublic _component!: MapLineSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"MapLineSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\tpublic getFeature(): { \"type\": \"Feature\", geometry: { type: \"MultiLineString\", coordinates: Array<Array<[number, number]>> } } {\r\n\t\tif (this.multiLine && this.multiLine.length > 0) {\r\n\t\t\treturn { \"type\": \"Feature\", geometry: { type: \"MultiLineString\", coordinates: this.multiLine } };\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A [[MapLine]] element related to this data item.\r\n\t *\r\n\t * @readonly\r\n\t * @return Element\r\n\t */\r\n\tpublic get mapLine(): this[\"_mapLine\"] {\r\n\t\tif (!this._mapLine) {\r\n\t\t\tlet mapLine = this.component.mapLines.create();\r\n\r\n\t\t\tthis._mapLine = mapLine;\r\n\t\t\tthis.addSprite(mapLine);\r\n\r\n\t\t\tthis._disposers.push(mapLine);\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tif (this.component) {\r\n\t\t\t\t\tthis.component.mapLines.removeValue(mapLine);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\r\n\t\t\tthis.mapObject = mapLine;\r\n\t\t}\r\n\t\treturn this._mapLine;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a single-segment line. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   [ 100, 150 ],\r\n\t *   [ 120, 200 ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @param line  Coordinates\r\n\t */\r\n\tpublic set line(line: Array<[number, number]>) {\r\n\t\tthis._line = line;\r\n\t\tthis.multiLine = [line];\r\n\t}\r\n\r\n\t/**\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic get line(): Array<[number, number]> {\r\n\t\treturn this._line;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a multi-segment line. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   // Segment 1\r\n\t *   [\r\n\t *     [ 100, 150 ],\r\n\t *     [ 120, 200 ]\r\n\t *   ],\r\n\t *\r\n\t *   // Segment 2\r\n\t *   [\r\n\t *     [ 120, 200 ],\r\n\t *     [ 150, 100 ]\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @param multiLine  Coordinates\r\n\t */\r\n\tpublic set multiLine(multiLine: Array<Array<[number, number]>>) {\r\n\t\tthis._multiLine = multiLine;\r\n\t\tthis._multiGeoLine = $mapUtils.multiLineToGeo(multiLine);\r\n\t\tthis.updateExtremes();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic get multiLine(): Array<Array<[number, number]>> {\r\n\t\treturn this._multiLine;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of lat/long coordinates for a single-segment line. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   { longitude: 3.121, latitude: 0.58 },\r\n\t *   { longitude: -5.199, latitude: 21.223 }\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://tools.ietf.org/html/rfc7946#section-3.1.4} GeoJSON LineString reference\r\n\t * @param geoLine  Coordinates\r\n\t */\r\n\tpublic set geoLine(geoLine: Array<IGeoPoint>) {\r\n\t\tthis._geoLine = geoLine;\r\n\t\tthis.multiLine = $mapUtils.multiGeoLineToMultiLine([geoLine]);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic get geoLine(): Array<IGeoPoint> {\r\n\t\treturn this._geoLine;\r\n\t}\r\n\r\n\t/**\r\n\t * A collection of X/Y coordinates for a multi-segment line. E.g.:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *   // Segment 1\r\n\t *   [\r\n\t *     { longitude: 3.121, latitude: 0.58 },\r\n\t *     { longitude: -5.199, latitude: 21.223 }\r\n\t *   ],\r\n\t *\r\n\t *   // Segment 2\r\n\t *   [\r\n\t *     { longitude: -5.199, latitude: 21.223 },\r\n\t *     { longitude: -12.9, latitude: 25.85 }\r\n\t *   ]\r\n\t * ]\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://tools.ietf.org/html/rfc7946#section-3.1.5} GeoJSON MultiLineString reference\r\n\t * @param multiGeoLine  Coordinates\r\n\t */\r\n\tpublic set multiGeoLine(multiGeoLine: Array<Array<IGeoPoint>>) {\r\n\t\tthis._multiGeoLine = multiGeoLine;\r\n\t\tthis.multiLine = $mapUtils.multiGeoLineToMultiLine(multiGeoLine);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic get multiGeoLine(): Array<Array<IGeoPoint>> {\r\n\t\treturn this._multiGeoLine;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[MapLineSeries]].\r\n */\r\nexport interface IMapLineSeriesDataFields extends IMapSeriesDataFields {\r\n\r\n\t/**\r\n\t * Field name that holds line data in pixels.\r\n\t */\r\n\tline?: string;\r\n\r\n\t/**\r\n\t * Field name that holds multi-line data in pixels.\r\n\t */\r\n\tmultiLine?: string;\r\n\r\n\t/**\r\n\t * Field name that holds line data in Geo coordinates.\r\n\t */\r\n\tgeoLine?: string;\r\n\r\n\t/**\r\n\t * Field name that holds multi-line data in Geo coordinates.\r\n\t */\r\n\tmultiGeoLine?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[MapLineSeries]].\r\n */\r\nexport interface IMapLineSeriesProperties extends IMapSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[MapLineSeries]].\r\n */\r\nexport interface IMapLineSeriesEvents extends IMapSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[MapLineSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IMapLineSeriesAdapters extends IMapSeriesAdapters, IMapLineSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A series of map line series.\r\n *\r\n * @see {@link IMapLineSeriesEvents} for a list of available Events\r\n * @see {@link IMapLineSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class MapLineSeries extends MapSeries {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IMapLineSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IMapLineSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IMapLineSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IMapLineSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: MapLineSeriesDataItem;\r\n\r\n\r\n\t/**\r\n\t * A related chart/map object, this element is drawn on.\r\n\t */\r\n\tpublic chart: MapChart;\r\n\r\n\t/**\r\n\t * Defines the type of the line items in this series.\r\n\t */\r\n\tpublic _mapLine: MapLine;\r\n\r\n\t/**\r\n\t * A list of map lins in the series.\r\n\t */\r\n\tprotected _mapLines: ListTemplate<this[\"_mapLine\"]>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"MapLineSeries\";\r\n\r\n\t\t// Set data fields\r\n\t\tthis.dataFields.multiLine = \"multiLine\";\r\n\t\tthis.dataFields.line = \"line\";\r\n\r\n\t\tthis.dataFields.geoLine = \"geoLine\";\r\n\t\tthis.dataFields.multiGeoLine = \"multiGeoLine\";\r\n\r\n\t\tthis.ignoreBounds = true;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new MapLineSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates series data, effectively causing the whole series to be\r\n\t * redrawn.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\t// process geoJSON and created map objects\r\n\t\tif (this.useGeodata || this.geodata) {\r\n\t\t\tlet geoJSON: any = this.chart.geodata;\r\n\t\t\tif (geoJSON) {\r\n\r\n\t\t\t\tlet features: any[];\r\n\r\n\t\t\t\tif (geoJSON.type == \"FeatureCollection\") {\r\n\t\t\t\t\tfeatures = geoJSON.features;\r\n\t\t\t\t}\r\n\t\t\t\telse if (geoJSON.type == \"Feature\") {\r\n\t\t\t\t\tfeatures = [geoJSON];\r\n\t\t\t\t}\r\n\t\t\t\telse if ([\"Point\", \"LineString\", \"Polygon\", \"MultiPoint\", \"MultiLineString\", \"MultiPolygon\"].indexOf(geoJSON.type) != -1) {\r\n\t\t\t\t\tfeatures = [{ geometry: geoJSON }];\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tconsole.log(\"nothing found in geoJSON\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (features) {\r\n\t\t\t\t\tfor (let i = 0, len = features.length; i < len; i++) {\r\n\r\n\t\t\t\t\t\tlet feature: any = features[i];\r\n\t\t\t\t\t\tlet geometry: any = feature.geometry;\r\n\t\t\t\t\t\tif (geometry) {\r\n\t\t\t\t\t\t\tlet type: GEOJSONGeometry = <GEOJSONGeometry>geometry.type;\r\n\t\t\t\t\t\t\tlet id: string = feature.id;\r\n\t\t\t\t\t\t\tif (type == \"LineString\" || type == \"MultiLineString\") {\r\n\r\n\t\t\t\t\t\t\t\tif (!this.checkInclude(this.include, this.exclude, id)) {\r\n\t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet coordinates: any[] = geometry.coordinates;\r\n\t\t\t\t\t\t\t\tlet dataObject: IMapLineDataObject = $array.find(this.data, (value, i) => {\r\n\t\t\t\t\t\t\t\t\treturn value.id == id;\r\n\t\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\t\tif (type == \"LineString\") {\r\n\t\t\t\t\t\t\t\t\tcoordinates = [coordinates];\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tif (!dataObject) {\r\n\t\t\t\t\t\t\t\t\tdataObject = { multiLine: coordinates, id: id, madeFromGeoData:true};\r\n\t\t\t\t\t\t\t\t\tthis.data.push(dataObject);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tif (!dataObject.multiLine) {\r\n\t\t\t\t\t\t\t\t\t\tdataObject.multiLine = coordinates;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// copy properties data to datacontext\r\n\t\t\t\t\t\t\t\t$utils.softCopyProperties(feature.properties, dataObject);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validateData();\r\n\t}\r\n\r\n\t/**\r\n\t * A list of lines in the series.\r\n\t *\r\n\t * @return Lines\r\n\t */\r\n\tpublic get mapLines(): ListTemplate<this[\"_mapLine\"]> {\r\n\r\n\t\tif (!this._mapLines) {\r\n\t\t\tlet lineTemplate: MapLine = this.createLine();\r\n\t\t\tlet mapLines = new ListTemplate<MapLine>(lineTemplate);\r\n\t\t\tthis._disposers.push(new ListDisposer(mapLines));\r\n\t\t\tthis._disposers.push(mapLines.template);\r\n\t\t\tmapLines.events.on(\"inserted\", this.handleObjectAdded, this, false);\r\n\t\t\tthis._mapLines = mapLines;\r\n\t\t\tthis._mapObjects = mapLines;\r\n\t\t}\r\n\r\n\t\treturn this._mapLines;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new line instance of suitable type.\r\n\t *\r\n\t * @return New line\r\n\t */\r\n\tprotected createLine(): this[\"_mapLine\"] {\r\n\t\treturn new MapLine();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the series\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\t$utils.used(dataItem.mapLine);\r\n\t\t})\r\n\r\n\r\n\t\tsuper.validate();\r\n\t\tthis.mapLines.each((mapLine) => {\r\n\t\t\tmapLine.validate();\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[Series]].\r\n\t *\r\n\t * @param source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tthis.mapLines.template.copyFrom(source.mapLines.template);\r\n\t\tsuper.copyFrom(source);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic getFeatures(): { \"type\": \"Feature\", geometry: { type: \"MultiLineString\", coordinates: Array<Array<[number, number]>> } }[] {\r\n\t\tlet features: { \"type\": \"Feature\", geometry: { type: \"MultiLineString\", coordinates: Array<Array<[number, number]>> } }[] = [];\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\tlet feature = dataItem.getFeature();\r\n\t\t\tif (feature) {\r\n\t\t\t\tfeatures.push(feature);\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tthis.mapLines.each((mapLine) => {\r\n\t\t\tif (this.dataItems.indexOf(mapLine._dataItem) == -1) {\r\n\t\t\t\tlet feature = mapLine.getFeature();\r\n\t\t\t\tif (feature) {\r\n\t\t\t\t\tfeatures.push(feature);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\t\treturn features;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * returns MapLine by id\r\n\t * @param line id\r\n\t * @return {MapLine}\r\n\t */\r\n\tpublic getLineById(id: string): MapLine {\r\n\t\treturn $iter.find(this.mapLines.iterator(), (mapLine) => {\r\n\t\t\tlet dataContext: any = mapLine.dataItem.dataContext;\r\n\t\t\treturn dataContext.id == id;\r\n\t\t});\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapLineSeries\"] = MapLineSeries;\r\nregistry.registeredClasses[\"MapLineSeriesDataItem\"] = MapLineSeriesDataItem;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}